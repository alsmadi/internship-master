{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport { empty, fastInnerText } from './../helpers/dom/element';\nimport { stringify } from './../helpers/mixed';\nimport { getRenderer } from './index';\n/**\n * Default text renderer\n *\n * @private\n * @renderer TextRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  var escaped = value;\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n  escaped = stringify(escaped);\n  if (!instance.getSettings().trimWhitespace) {\n    escaped = escaped.replace(/ /g, String.fromCharCode(160));\n  }\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\nexport default textRenderer;","map":{"version":3,"names":["empty","fastInnerText","stringify","getRenderer","textRenderer","instance","TD","row","col","prop","value","cellProperties","_len","arguments","length","args","Array","_key","apply","concat","escaped","placeholder","getSettings","trimWhitespace","replace","String","fromCharCode","rendererTemplate","TEMPLATE","rootDocument","createElement","setAttribute","innerHTML","HTMLTemplateElement","decorate","model","getSourceDataAtRow","appendChild"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/renderers/textRenderer.js"],"sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport { empty, fastInnerText } from './../helpers/dom/element';\nimport { stringify } from './../helpers/mixed';\nimport { getRenderer } from './index';\n/**\n * Default text renderer\n *\n * @private\n * @renderer TextRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  var escaped = value;\n\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n\n  escaped = stringify(escaped);\n\n  if (!instance.getSettings().trimWhitespace) {\n    escaped = escaped.replace(/ /g, String.fromCharCode(160));\n  }\n\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\n\nexport default textRenderer;"],"mappings":"AAAA,OAAO,iCAAiC;AACxC,OAAO,gCAAgC;AACvC,OAAO,mCAAmC;AAC1C,SAASA,KAAK,EAAEC,aAAa,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,WAAW,QAAQ,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAY,CAACC,QAAQ,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,EAAE;EACzE,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAClC;EAEAd,WAAW,CAAC,MAAM,CAAC,CAACe,KAAK,CAAC,IAAI,EAAE,CAACb,QAAQ,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,CAAC,CAACQ,MAAM,CAACJ,IAAI,CAAC,CAAC;EACnG,IAAIK,OAAO,GAAGV,KAAK;EAEnB,IAAI,CAACU,OAAO,IAAIT,cAAc,CAACU,WAAW,EAAE;IAC1CD,OAAO,GAAGT,cAAc,CAACU,WAAW;EACtC;EAEAD,OAAO,GAAGlB,SAAS,CAACkB,OAAO,CAAC;EAE5B,IAAI,CAACf,QAAQ,CAACiB,WAAW,EAAE,CAACC,cAAc,EAAE;IAC1CH,OAAO,GAAGA,OAAO,CAACI,OAAO,CAAC,IAAI,EAAEC,MAAM,CAACC,YAAY,CAAC,GAAG,CAAC,CAAC;EAC3D;EAEA,IAAIf,cAAc,CAACgB,gBAAgB,EAAE;IACnC3B,KAAK,CAACM,EAAE,CAAC;IACT,IAAIsB,QAAQ,GAAGvB,QAAQ,CAACwB,YAAY,CAACC,aAAa,CAAC,UAAU,CAAC;IAC9DF,QAAQ,CAACG,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IACrCH,QAAQ,CAACI,SAAS,GAAGrB,cAAc,CAACgB,gBAAgB;IACpDM,mBAAmB,CAACC,QAAQ,CAACN,QAAQ,CAAC;IACtCA,QAAQ,CAACO,KAAK,GAAG9B,QAAQ,CAAC+B,kBAAkB,CAAC7B,GAAG,CAAC;IACjDD,EAAE,CAAC+B,WAAW,CAACT,QAAQ,CAAC;EAC1B,CAAC,MAAM;IACL;IACA3B,aAAa,CAACK,EAAE,EAAEc,OAAO,CAAC;EAC5B;AACF;AAEA,eAAehB,YAAY"},"metadata":{},"sourceType":"module"}