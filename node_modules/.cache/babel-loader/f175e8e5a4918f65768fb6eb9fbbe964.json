{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { CellCoords } from './../3rdparty/walkontable/src';\nimport { mixin } from './../helpers/object';\nimport localHooks from './../mixins/localHooks';\n/**\n * The Transformation class implements algorithms for transforming coordinates based on current settings\n * passed to the Handsontable.\n *\n * Transformation is always applied relative to the current selection.\n *\n * @class Transformation\n * @util\n */\n\nvar Transformation = /*#__PURE__*/\nfunction () {\n  function Transformation(range, options) {\n    _classCallCheck(this, Transformation);\n\n    /**\n     * Instance of the SelectionRange, holder for coordinates applied to the table.\n     *\n     * @type {SelectionRange}\n     */\n    this.range = range;\n    /**\n     * Additional options which define the state of the settings which can infer transformation.\n     *\n     * @type {Object}\n     */\n\n    this.options = options;\n  }\n  /**\n   * Selects cell relative to current cell (if possible).\n   *\n   * @param {Number} rowDelta Rows number to move, value can be passed as negative number.\n   * @param {Number} colDelta Columns number to move, value can be passed as negative number.\n   * @param {Boolean} force If `true` the new rows/columns will be created if necessary. Otherwise, row/column will\n   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.\n   * @returns {CellCoords}\n   */\n\n  _createClass(Transformation, [{\n    key: \"transformStart\",\n    value: function transformStart(rowDelta, colDelta, force) {\n      var delta = new CellCoords(rowDelta, colDelta);\n      this.runLocalHooks('beforeTransformStart', delta);\n      var totalRows = this.options.countRows();\n      var totalCols = this.options.countCols();\n      var fixedRowsBottom = this.options.fixedRowsBottom();\n      var minSpareRows = this.options.minSpareRows();\n      var minSpareCols = this.options.minSpareCols();\n      var autoWrapRow = this.options.autoWrapRow();\n      var autoWrapCol = this.options.autoWrapCol();\n      var highlightCoords = this.range.current().highlight;\n      if (highlightCoords.row + rowDelta > totalRows - 1) {\n        if (force && minSpareRows > 0 && !(fixedRowsBottom && highlightCoords.row >= totalRows - fixedRowsBottom - 1)) {\n          this.runLocalHooks('insertRowRequire', totalRows);\n          totalRows = this.options.countRows();\n        } else if (autoWrapCol) {\n          delta.row = 1 - totalRows;\n          delta.col = highlightCoords.col + delta.col === totalCols - 1 ? 1 - totalCols : 1;\n        }\n      } else if (autoWrapCol && highlightCoords.row + delta.row < 0 && highlightCoords.col + delta.col >= 0) {\n        delta.row = totalRows - 1;\n        delta.col = highlightCoords.col + delta.col === 0 ? totalCols - 1 : -1;\n      }\n      if (highlightCoords.col + delta.col > totalCols - 1) {\n        if (force && minSpareCols > 0) {\n          this.runLocalHooks('insertColRequire', totalCols);\n          totalCols = this.options.countCols();\n        } else if (autoWrapRow) {\n          delta.row = highlightCoords.row + delta.row === totalRows - 1 ? 1 - totalRows : 1;\n          delta.col = 1 - totalCols;\n        }\n      } else if (autoWrapRow && highlightCoords.col + delta.col < 0 && highlightCoords.row + delta.row >= 0) {\n        delta.row = highlightCoords.row + delta.row === 0 ? totalRows - 1 : -1;\n        delta.col = totalCols - 1;\n      }\n      var coords = new CellCoords(highlightCoords.row + delta.row, highlightCoords.col + delta.col);\n      var rowTransformDir = 0;\n      var colTransformDir = 0;\n      if (coords.row < 0) {\n        rowTransformDir = -1;\n        coords.row = 0;\n      } else if (coords.row > 0 && coords.row >= totalRows) {\n        rowTransformDir = 1;\n        coords.row = totalRows - 1;\n      }\n      if (coords.col < 0) {\n        colTransformDir = -1;\n        coords.col = 0;\n      } else if (coords.col > 0 && coords.col >= totalCols) {\n        colTransformDir = 1;\n        coords.col = totalCols - 1;\n      }\n      this.runLocalHooks('afterTransformStart', coords, rowTransformDir, colTransformDir);\n      return coords;\n    }\n    /**\n     * Sets selection end cell relative to current selection end cell (if possible).\n     *\n     * @param {Number} rowDelta Rows number to move, value can be passed as negative number.\n     * @param {Number} colDelta Columns number to move, value can be passed as negative number.\n     * @returns {CellCoords}\n     */\n  }, {\n    key: \"transformEnd\",\n    value: function transformEnd(rowDelta, colDelta) {\n      var delta = new CellCoords(rowDelta, colDelta);\n      this.runLocalHooks('beforeTransformEnd', delta);\n      var totalRows = this.options.countRows();\n      var totalCols = this.options.countCols();\n      var cellRange = this.range.current();\n      var coords = new CellCoords(cellRange.to.row + delta.row, cellRange.to.col + delta.col);\n      var rowTransformDir = 0;\n      var colTransformDir = 0;\n      if (coords.row < 0) {\n        rowTransformDir = -1;\n        coords.row = 0;\n      } else if (coords.row > 0 && coords.row >= totalRows) {\n        rowTransformDir = 1;\n        coords.row = totalRows - 1;\n      }\n      if (coords.col < 0) {\n        colTransformDir = -1;\n        coords.col = 0;\n      } else if (coords.col > 0 && coords.col >= totalCols) {\n        colTransformDir = 1;\n        coords.col = totalCols - 1;\n      }\n      this.runLocalHooks('afterTransformEnd', coords, rowTransformDir, colTransformDir);\n      return coords;\n    }\n  }]);\n  return Transformation;\n}();\nmixin(Transformation, localHooks);\nexport default Transformation;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","CellCoords","mixin","localHooks","Transformation","range","options","value","transformStart","rowDelta","colDelta","force","delta","runLocalHooks","totalRows","countRows","totalCols","countCols","fixedRowsBottom","minSpareRows","minSpareCols","autoWrapRow","autoWrapCol","highlightCoords","current","highlight","row","col","coords","rowTransformDir","colTransformDir","transformEnd","cellRange","to"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/selection/transformation.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { CellCoords } from './../3rdparty/walkontable/src';\nimport { mixin } from './../helpers/object';\nimport localHooks from './../mixins/localHooks';\n/**\n * The Transformation class implements algorithms for transforming coordinates based on current settings\n * passed to the Handsontable.\n *\n * Transformation is always applied relative to the current selection.\n *\n * @class Transformation\n * @util\n */\n\nvar Transformation =\n/*#__PURE__*/\nfunction () {\n  function Transformation(range, options) {\n    _classCallCheck(this, Transformation);\n\n    /**\n     * Instance of the SelectionRange, holder for coordinates applied to the table.\n     *\n     * @type {SelectionRange}\n     */\n    this.range = range;\n    /**\n     * Additional options which define the state of the settings which can infer transformation.\n     *\n     * @type {Object}\n     */\n\n    this.options = options;\n  }\n  /**\n   * Selects cell relative to current cell (if possible).\n   *\n   * @param {Number} rowDelta Rows number to move, value can be passed as negative number.\n   * @param {Number} colDelta Columns number to move, value can be passed as negative number.\n   * @param {Boolean} force If `true` the new rows/columns will be created if necessary. Otherwise, row/column will\n   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.\n   * @returns {CellCoords}\n   */\n\n\n  _createClass(Transformation, [{\n    key: \"transformStart\",\n    value: function transformStart(rowDelta, colDelta, force) {\n      var delta = new CellCoords(rowDelta, colDelta);\n      this.runLocalHooks('beforeTransformStart', delta);\n      var totalRows = this.options.countRows();\n      var totalCols = this.options.countCols();\n      var fixedRowsBottom = this.options.fixedRowsBottom();\n      var minSpareRows = this.options.minSpareRows();\n      var minSpareCols = this.options.minSpareCols();\n      var autoWrapRow = this.options.autoWrapRow();\n      var autoWrapCol = this.options.autoWrapCol();\n      var highlightCoords = this.range.current().highlight;\n\n      if (highlightCoords.row + rowDelta > totalRows - 1) {\n        if (force && minSpareRows > 0 && !(fixedRowsBottom && highlightCoords.row >= totalRows - fixedRowsBottom - 1)) {\n          this.runLocalHooks('insertRowRequire', totalRows);\n          totalRows = this.options.countRows();\n        } else if (autoWrapCol) {\n          delta.row = 1 - totalRows;\n          delta.col = highlightCoords.col + delta.col === totalCols - 1 ? 1 - totalCols : 1;\n        }\n      } else if (autoWrapCol && highlightCoords.row + delta.row < 0 && highlightCoords.col + delta.col >= 0) {\n        delta.row = totalRows - 1;\n        delta.col = highlightCoords.col + delta.col === 0 ? totalCols - 1 : -1;\n      }\n\n      if (highlightCoords.col + delta.col > totalCols - 1) {\n        if (force && minSpareCols > 0) {\n          this.runLocalHooks('insertColRequire', totalCols);\n          totalCols = this.options.countCols();\n        } else if (autoWrapRow) {\n          delta.row = highlightCoords.row + delta.row === totalRows - 1 ? 1 - totalRows : 1;\n          delta.col = 1 - totalCols;\n        }\n      } else if (autoWrapRow && highlightCoords.col + delta.col < 0 && highlightCoords.row + delta.row >= 0) {\n        delta.row = highlightCoords.row + delta.row === 0 ? totalRows - 1 : -1;\n        delta.col = totalCols - 1;\n      }\n\n      var coords = new CellCoords(highlightCoords.row + delta.row, highlightCoords.col + delta.col);\n      var rowTransformDir = 0;\n      var colTransformDir = 0;\n\n      if (coords.row < 0) {\n        rowTransformDir = -1;\n        coords.row = 0;\n      } else if (coords.row > 0 && coords.row >= totalRows) {\n        rowTransformDir = 1;\n        coords.row = totalRows - 1;\n      }\n\n      if (coords.col < 0) {\n        colTransformDir = -1;\n        coords.col = 0;\n      } else if (coords.col > 0 && coords.col >= totalCols) {\n        colTransformDir = 1;\n        coords.col = totalCols - 1;\n      }\n\n      this.runLocalHooks('afterTransformStart', coords, rowTransformDir, colTransformDir);\n      return coords;\n    }\n    /**\n     * Sets selection end cell relative to current selection end cell (if possible).\n     *\n     * @param {Number} rowDelta Rows number to move, value can be passed as negative number.\n     * @param {Number} colDelta Columns number to move, value can be passed as negative number.\n     * @returns {CellCoords}\n     */\n\n  }, {\n    key: \"transformEnd\",\n    value: function transformEnd(rowDelta, colDelta) {\n      var delta = new CellCoords(rowDelta, colDelta);\n      this.runLocalHooks('beforeTransformEnd', delta);\n      var totalRows = this.options.countRows();\n      var totalCols = this.options.countCols();\n      var cellRange = this.range.current();\n      var coords = new CellCoords(cellRange.to.row + delta.row, cellRange.to.col + delta.col);\n      var rowTransformDir = 0;\n      var colTransformDir = 0;\n\n      if (coords.row < 0) {\n        rowTransformDir = -1;\n        coords.row = 0;\n      } else if (coords.row > 0 && coords.row >= totalRows) {\n        rowTransformDir = 1;\n        coords.row = totalRows - 1;\n      }\n\n      if (coords.col < 0) {\n        colTransformDir = -1;\n        coords.col = 0;\n      } else if (coords.col > 0 && coords.col >= totalCols) {\n        colTransformDir = 1;\n        coords.col = totalCols - 1;\n      }\n\n      this.runLocalHooks('afterTransformEnd', coords, rowTransformDir, colTransformDir);\n      return coords;\n    }\n  }]);\n\n  return Transformation;\n}();\n\nmixin(Transformation, localHooks);\nexport default Transformation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}