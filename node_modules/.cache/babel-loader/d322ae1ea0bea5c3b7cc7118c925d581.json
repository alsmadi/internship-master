{"ast":null,"code":"import { getCellType } from './../cellTypes';\nimport { hasOwnProperty } from './object';\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {Number} index Column index.\n * @returns {String}\n */\n\nexport function spreadsheetColumnLabel(index) {\n  var dividend = index + 1;\n  var columnLabel = '';\n  var modulo;\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n  return columnLabel;\n}\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {String} label Column label.\n * @returns {Number}\n */\n\nexport function spreadsheetColumnIndex(label) {\n  var result = 0;\n  if (label) {\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  result -= 1;\n  return result;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n  for (i = 0; i < rows; i++) {\n    var row = [];\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} colCount Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetObjectData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n  for (i = 0; i < rows; i++) {\n    var row = {};\n    for (j = 0; j < colCount; j++) {\n      row[\"prop\".concat(j)] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n/**\n * Generates an empty data object.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate\n * @returns {Array}\n */\n\nexport function createEmptySpreadsheetData(rows, columns) {\n  var data = [];\n  var row;\n  for (var i = 0; i < rows; i++) {\n    row = [];\n    for (var j = 0; j < columns; j++) {\n      row.push('');\n    }\n    data.push(row);\n  }\n  return data;\n}\nexport function translateRowsToColumns(input) {\n  var output = [];\n  var i;\n  var ilen;\n  var j;\n  var jlen;\n  var olen = 0;\n  for (i = 0, ilen = input.length; i < ilen; i++) {\n    for (j = 0, jlen = input[i].length; j < jlen; j++) {\n      if (j === olen) {\n        output.push([]);\n        olen += 1;\n      }\n      output[j].push(input[i][j]);\n    }\n  }\n  return output;\n}\n/**\n * Factory that produces a function for searching methods (or any properties) which could be defined directly in\n * table configuration or implicitly, within cell type definition.\n *\n * For example: renderer can be defined explicitly using \"renderer\" property in column configuration or it can be\n * defined implicitly using \"type\" property.\n *\n * Methods/properties defined explicitly always takes precedence over those defined through \"type\".\n *\n * If the method/property is not found in an object, searching is continued recursively through prototype chain, until\n * it reaches the Object.prototype.\n *\n *\n * @param methodName {String} name of the method/property to search (i.e. 'renderer', 'validator', 'copyable')\n * @param allowUndefined {Boolean} [optional] if false, the search is continued if methodName has not been found in cell \"type\"\n * @returns {Function}\n */\n\nexport function cellMethodLookupFactory(methodName, allowUndefined) {\n  var isUndefinedAllowed = typeof allowUndefined === 'undefined' ? true : allowUndefined;\n  return function cellMethodLookup(row, col) {\n    return function getMethodFromProperties(properties) {\n      if (!properties) {\n        return; // method not found\n      } else if (hasOwnProperty(properties, methodName) && properties[methodName] !== void 0) {\n        // check if it is own and is not empty\n        return properties[methodName]; // method defined directly\n      } else if (hasOwnProperty(properties, 'type') && properties.type) {\n        // check if it is own and is not empty\n        if (typeof properties.type !== 'string') {\n          throw new Error('Cell type must be a string ');\n        }\n        var type = getCellType(properties.type);\n        if (hasOwnProperty(type, methodName)) {\n          return type[methodName]; // method defined in type.\n        } else if (isUndefinedAllowed) {\n          return; // method does not defined in type (eg. validator), returns undefined\n        }\n      }\n\n      return getMethodFromProperties(Object.getPrototypeOf(properties));\n    }(typeof row === 'number' ? this.getCellMeta(row, col) : row);\n  };\n}","map":{"version":3,"names":["getCellType","hasOwnProperty","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","length","spreadsheetColumnLabel","index","dividend","columnLabel","modulo","String","fromCharCode","parseInt","spreadsheetColumnIndex","label","result","i","j","Math","pow","indexOf","createSpreadsheetData","rows","arguments","undefined","columns","_rows","row","push","createSpreadsheetObjectData","colCount","concat","createEmptySpreadsheetData","data","translateRowsToColumns","input","output","ilen","jlen","olen","cellMethodLookupFactory","methodName","allowUndefined","isUndefinedAllowed","cellMethodLookup","col","getMethodFromProperties","properties","type","Error","Object","getPrototypeOf","getCellMeta"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/helpers/data.js"],"sourcesContent":["import \"core-js/modules/es.object.get-prototype-of\";\nimport { getCellType } from './../cellTypes';\nimport { hasOwnProperty } from './object';\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {Number} index Column index.\n * @returns {String}\n */\n\nexport function spreadsheetColumnLabel(index) {\n  var dividend = index + 1;\n  var columnLabel = '';\n  var modulo;\n\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n\n  return columnLabel;\n}\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {String} label Column label.\n * @returns {Number}\n */\n\nexport function spreadsheetColumnIndex(label) {\n  var result = 0;\n\n  if (label) {\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n\n  result -= 1;\n  return result;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n\n  for (i = 0; i < rows; i++) {\n    var row = [];\n\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n\n    _rows.push(row);\n  }\n\n  return _rows;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} colCount Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetObjectData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n\n  for (i = 0; i < rows; i++) {\n    var row = {};\n\n    for (j = 0; j < colCount; j++) {\n      row[\"prop\".concat(j)] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n\n    _rows.push(row);\n  }\n\n  return _rows;\n}\n/**\n * Generates an empty data object.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate\n * @returns {Array}\n */\n\nexport function createEmptySpreadsheetData(rows, columns) {\n  var data = [];\n  var row;\n\n  for (var i = 0; i < rows; i++) {\n    row = [];\n\n    for (var j = 0; j < columns; j++) {\n      row.push('');\n    }\n\n    data.push(row);\n  }\n\n  return data;\n}\nexport function translateRowsToColumns(input) {\n  var output = [];\n  var i;\n  var ilen;\n  var j;\n  var jlen;\n  var olen = 0;\n\n  for (i = 0, ilen = input.length; i < ilen; i++) {\n    for (j = 0, jlen = input[i].length; j < jlen; j++) {\n      if (j === olen) {\n        output.push([]);\n        olen += 1;\n      }\n\n      output[j].push(input[i][j]);\n    }\n  }\n\n  return output;\n}\n/**\n * Factory that produces a function for searching methods (or any properties) which could be defined directly in\n * table configuration or implicitly, within cell type definition.\n *\n * For example: renderer can be defined explicitly using \"renderer\" property in column configuration or it can be\n * defined implicitly using \"type\" property.\n *\n * Methods/properties defined explicitly always takes precedence over those defined through \"type\".\n *\n * If the method/property is not found in an object, searching is continued recursively through prototype chain, until\n * it reaches the Object.prototype.\n *\n *\n * @param methodName {String} name of the method/property to search (i.e. 'renderer', 'validator', 'copyable')\n * @param allowUndefined {Boolean} [optional] if false, the search is continued if methodName has not been found in cell \"type\"\n * @returns {Function}\n */\n\nexport function cellMethodLookupFactory(methodName, allowUndefined) {\n  var isUndefinedAllowed = typeof allowUndefined === 'undefined' ? true : allowUndefined;\n  return function cellMethodLookup(row, col) {\n    return function getMethodFromProperties(properties) {\n      if (!properties) {\n        return; // method not found\n      } else if (hasOwnProperty(properties, methodName) && properties[methodName] !== void 0) {\n        // check if it is own and is not empty\n        return properties[methodName]; // method defined directly\n      } else if (hasOwnProperty(properties, 'type') && properties.type) {\n        // check if it is own and is not empty\n        if (typeof properties.type !== 'string') {\n          throw new Error('Cell type must be a string ');\n        }\n\n        var type = getCellType(properties.type);\n\n        if (hasOwnProperty(type, methodName)) {\n          return type[methodName]; // method defined in type.\n        } else if (isUndefinedAllowed) {\n          return; // method does not defined in type (eg. validator), returns undefined\n        }\n      }\n\n      return getMethodFromProperties(Object.getPrototypeOf(properties));\n    }(typeof row === 'number' ? this.getCellMeta(row, col) : row);\n  };\n}"],"mappings":"AACA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,cAAc,QAAQ,UAAU;AACzC,IAAIC,iBAAiB,GAAG,4BAA4B;AACpD,IAAIC,wBAAwB,GAAGD,iBAAiB,CAACE,MAAM;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAsB,CAACC,KAAK,EAAE;EAC5C,IAAIC,QAAQ,GAAGD,KAAK,GAAG,CAAC;EACxB,IAAIE,WAAW,GAAG,EAAE;EACpB,IAAIC,MAAM;EAEV,OAAOF,QAAQ,GAAG,CAAC,EAAE;IACnBE,MAAM,GAAG,CAACF,QAAQ,GAAG,CAAC,IAAIJ,wBAAwB;IAClDK,WAAW,GAAGE,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGF,MAAM,CAAC,GAAGD,WAAW;IAC5DD,QAAQ,GAAGK,QAAQ,CAAC,CAACL,QAAQ,GAAGE,MAAM,IAAIN,wBAAwB,EAAE,EAAE,CAAC;EACzE;EAEA,OAAOK,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,sBAAsB,CAACC,KAAK,EAAE;EAC5C,IAAIC,MAAM,GAAG,CAAC;EAEd,IAAID,KAAK,EAAE;IACT,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,KAAK,CAACV,MAAM,GAAG,CAAC,EAAEY,CAAC,GAAGF,KAAK,CAACV,MAAM,EAAEY,CAAC,IAAI,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;MACtEF,MAAM,IAAIG,IAAI,CAACC,GAAG,CAAChB,wBAAwB,EAAEc,CAAC,CAAC,IAAIf,iBAAiB,CAACkB,OAAO,CAACN,KAAK,CAACE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7F;EACF;EAEAD,MAAM,IAAI,CAAC;EACX,OAAOA,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,qBAAqB,GAAG;EACtC,IAAIC,IAAI,GAAGC,SAAS,CAACnB,MAAM,GAAG,CAAC,IAAImB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG;EAClF,IAAIE,OAAO,GAAGF,SAAS,CAACnB,MAAM,GAAG,CAAC,IAAImB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EACnF,IAAIG,KAAK,GAAG,EAAE;EACd,IAAIV,CAAC;EACL,IAAIC,CAAC;EAEL,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,IAAI,EAAEN,CAAC,EAAE,EAAE;IACzB,IAAIW,GAAG,GAAG,EAAE;IAEZ,KAAKV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,OAAO,EAAER,CAAC,EAAE,EAAE;MAC5BU,GAAG,CAACC,IAAI,CAACvB,sBAAsB,CAACY,CAAC,CAAC,IAAID,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C;IAEAU,KAAK,CAACE,IAAI,CAACD,GAAG,CAAC;EACjB;EAEA,OAAOD,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,2BAA2B,GAAG;EAC5C,IAAIP,IAAI,GAAGC,SAAS,CAACnB,MAAM,GAAG,CAAC,IAAImB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG;EAClF,IAAIO,QAAQ,GAAGP,SAAS,CAACnB,MAAM,GAAG,CAAC,IAAImB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EACpF,IAAIG,KAAK,GAAG,EAAE;EACd,IAAIV,CAAC;EACL,IAAIC,CAAC;EAEL,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,IAAI,EAAEN,CAAC,EAAE,EAAE;IACzB,IAAIW,GAAG,GAAG,CAAC,CAAC;IAEZ,KAAKV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,QAAQ,EAAEb,CAAC,EAAE,EAAE;MAC7BU,GAAG,CAAC,MAAM,CAACI,MAAM,CAACd,CAAC,CAAC,CAAC,GAAGZ,sBAAsB,CAACY,CAAC,CAAC,IAAID,CAAC,GAAG,CAAC,CAAC;IAC7D;IAEAU,KAAK,CAACE,IAAI,CAACD,GAAG,CAAC;EACjB;EAEA,OAAOD,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,0BAA0B,CAACV,IAAI,EAAEG,OAAO,EAAE;EACxD,IAAIQ,IAAI,GAAG,EAAE;EACb,IAAIN,GAAG;EAEP,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,IAAI,EAAEN,CAAC,EAAE,EAAE;IAC7BW,GAAG,GAAG,EAAE;IAER,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,OAAO,EAAER,CAAC,EAAE,EAAE;MAChCU,GAAG,CAACC,IAAI,CAAC,EAAE,CAAC;IACd;IAEAK,IAAI,CAACL,IAAI,CAACD,GAAG,CAAC;EAChB;EAEA,OAAOM,IAAI;AACb;AACA,OAAO,SAASC,sBAAsB,CAACC,KAAK,EAAE;EAC5C,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIpB,CAAC;EACL,IAAIqB,IAAI;EACR,IAAIpB,CAAC;EACL,IAAIqB,IAAI;EACR,IAAIC,IAAI,GAAG,CAAC;EAEZ,KAAKvB,CAAC,GAAG,CAAC,EAAEqB,IAAI,GAAGF,KAAK,CAAC/B,MAAM,EAAEY,CAAC,GAAGqB,IAAI,EAAErB,CAAC,EAAE,EAAE;IAC9C,KAAKC,CAAC,GAAG,CAAC,EAAEqB,IAAI,GAAGH,KAAK,CAACnB,CAAC,CAAC,CAACZ,MAAM,EAAEa,CAAC,GAAGqB,IAAI,EAAErB,CAAC,EAAE,EAAE;MACjD,IAAIA,CAAC,KAAKsB,IAAI,EAAE;QACdH,MAAM,CAACR,IAAI,CAAC,EAAE,CAAC;QACfW,IAAI,IAAI,CAAC;MACX;MAEAH,MAAM,CAACnB,CAAC,CAAC,CAACW,IAAI,CAACO,KAAK,CAACnB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;IAC7B;EACF;EAEA,OAAOmB,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,uBAAuB,CAACC,UAAU,EAAEC,cAAc,EAAE;EAClE,IAAIC,kBAAkB,GAAG,OAAOD,cAAc,KAAK,WAAW,GAAG,IAAI,GAAGA,cAAc;EACtF,OAAO,SAASE,gBAAgB,CAACjB,GAAG,EAAEkB,GAAG,EAAE;IACzC,OAAO,SAASC,uBAAuB,CAACC,UAAU,EAAE;MAClD,IAAI,CAACA,UAAU,EAAE;QACf,OAAO,CAAC;MACV,CAAC,MAAM,IAAI9C,cAAc,CAAC8C,UAAU,EAAEN,UAAU,CAAC,IAAIM,UAAU,CAACN,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;QACtF;QACA,OAAOM,UAAU,CAACN,UAAU,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM,IAAIxC,cAAc,CAAC8C,UAAU,EAAE,MAAM,CAAC,IAAIA,UAAU,CAACC,IAAI,EAAE;QAChE;QACA,IAAI,OAAOD,UAAU,CAACC,IAAI,KAAK,QAAQ,EAAE;UACvC,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,IAAID,IAAI,GAAGhD,WAAW,CAAC+C,UAAU,CAACC,IAAI,CAAC;QAEvC,IAAI/C,cAAc,CAAC+C,IAAI,EAAEP,UAAU,CAAC,EAAE;UACpC,OAAOO,IAAI,CAACP,UAAU,CAAC,CAAC,CAAC;QAC3B,CAAC,MAAM,IAAIE,kBAAkB,EAAE;UAC7B,OAAO,CAAC;QACV;MACF;;MAEA,OAAOG,uBAAuB,CAACI,MAAM,CAACC,cAAc,CAACJ,UAAU,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOpB,GAAG,KAAK,QAAQ,GAAG,IAAI,CAACyB,WAAW,CAACzB,GAAG,EAAEkB,GAAG,CAAC,GAAGlB,GAAG,CAAC;EAC/D,CAAC;AACH"},"metadata":{},"sourceType":"module"}