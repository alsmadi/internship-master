{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport { isEmpty } from '../../../helpers/mixed';\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from '../sortService';\n/**\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {String} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {Object} columnMeta Column meta object.\n * @param {Object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    var parsedFirstValue = parseFloat(value);\n    var parsedSecondValue = parseFloat(nextValue);\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells; // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\n\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\n      return DO_NOT_SWAP;\n    }\n    if (sortEmptyCells) {\n      if (isEmpty(value)) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      if (isEmpty(nextValue)) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n    }\n    if (isNaN(parsedFirstValue)) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (isNaN(parsedSecondValue)) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (parsedFirstValue < parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (parsedFirstValue > parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'numeric';","map":{"version":3,"names":["isEmpty","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","sortOrder","columnMeta","columnPluginSettings","value","nextValue","parsedFirstValue","parseFloat","parsedSecondValue","sortEmptyCells","isNaN","COLUMN_DATA_TYPE"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/columnSorting/sortFunction/numeric.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { isEmpty } from '../../../helpers/mixed';\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from '../sortService';\n/**\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {String} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {Object} columnMeta Column meta object.\n * @param {Object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    var parsedFirstValue = parseFloat(value);\n    var parsedSecondValue = parseFloat(nextValue);\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells; // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\n\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\n      return DO_NOT_SWAP;\n    }\n\n    if (sortEmptyCells) {\n      if (isEmpty(value)) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n\n      if (isEmpty(nextValue)) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n    }\n\n    if (isNaN(parsedFirstValue)) {\n      return FIRST_AFTER_SECOND;\n    }\n\n    if (isNaN(parsedSecondValue)) {\n      return FIRST_BEFORE_SECOND;\n    }\n\n    if (parsedFirstValue < parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (parsedFirstValue > parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'numeric';"],"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,gBAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAsB,CAACC,SAAS,EAAEC,UAAU,EAAEC,oBAAoB,EAAE;EAClF,OAAO,UAAUC,KAAK,EAAEC,SAAS,EAAE;IACjC,IAAIC,gBAAgB,GAAGC,UAAU,CAACH,KAAK,CAAC;IACxC,IAAII,iBAAiB,GAAGD,UAAU,CAACF,SAAS,CAAC;IAC7C,IAAII,cAAc,GAAGN,oBAAoB,CAACM,cAAc,CAAC,CAAC;;IAE1D,IAAIH,gBAAgB,KAAKE,iBAAiB,IAAIE,KAAK,CAACJ,gBAAgB,CAAC,IAAII,KAAK,CAACF,iBAAiB,CAAC,EAAE;MACjG,OAAOX,WAAW;IACpB;IAEA,IAAIY,cAAc,EAAE;MAClB,IAAIb,OAAO,CAACQ,KAAK,CAAC,EAAE;QAClB,OAAOH,SAAS,KAAK,KAAK,GAAGH,mBAAmB,GAAGC,kBAAkB;MACvE;MAEA,IAAIH,OAAO,CAACS,SAAS,CAAC,EAAE;QACtB,OAAOJ,SAAS,KAAK,KAAK,GAAGF,kBAAkB,GAAGD,mBAAmB;MACvE;IACF;IAEA,IAAIY,KAAK,CAACJ,gBAAgB,CAAC,EAAE;MAC3B,OAAOP,kBAAkB;IAC3B;IAEA,IAAIW,KAAK,CAACF,iBAAiB,CAAC,EAAE;MAC5B,OAAOV,mBAAmB;IAC5B;IAEA,IAAIQ,gBAAgB,GAAGE,iBAAiB,EAAE;MACxC,OAAOP,SAAS,KAAK,KAAK,GAAGH,mBAAmB,GAAGC,kBAAkB;IACvE,CAAC,MAAM,IAAIO,gBAAgB,GAAGE,iBAAiB,EAAE;MAC/C,OAAOP,SAAS,KAAK,KAAK,GAAGF,kBAAkB,GAAGD,mBAAmB;IACvE;IAEA,OAAOD,WAAW;EACpB,CAAC;AACH;AACA,OAAO,IAAIc,gBAAgB,GAAG,SAAS"},"metadata":{},"sourceType":"module"}