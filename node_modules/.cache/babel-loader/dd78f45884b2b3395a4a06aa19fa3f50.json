{"ast":null,"code":"import { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from './../helpers/dom/event';\nimport { CellCoords } from './../3rdparty/walkontable/src';\n/**\n * MouseDown handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {Boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {Boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseDown(_ref) {\n  var isShiftKey = _ref.isShiftKey,\n    isLeftClick = _ref.isLeftClick,\n    isRightClick = _ref.isRightClick,\n    coords = _ref.coords,\n    selection = _ref.selection,\n    controller = _ref.controller;\n  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  var selectedCorner = selection.isSelectedByCorner();\n  var selectedRow = selection.isSelectedByRowHeader();\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(new CellCoords(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(new CellCoords(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(new CellCoords(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(currentSelection.from.row, coords.row);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(currentSelection.from.col, coords.col);\n    }\n  } else {\n    var newCoord = new CellCoords(coords.row, coords.col);\n    if (newCoord.row < 0) {\n      newCoord.row = 0;\n    }\n    if (newCoord.col < 0) {\n      newCoord.col = 0;\n    }\n    var allowRightClickSelection = !selection.inInSelection(newCoord);\n    var performSelection = isLeftClick || isRightClick && allowRightClickSelection; // clicked row header and when some column was selected\n\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col);\n      } // clicked column header and when some row was selected\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cells) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.setRangeStart(coords);\n    }\n  }\n}\n/**\n * MouseOver handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isLeftClick\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseOver(_ref2) {\n  var isLeftClick = _ref2.isLeftClick,\n    coords = _ref2.coords,\n    selection = _ref2.selection,\n    controller = _ref2.controller;\n  if (!isLeftClick) {\n    return;\n  }\n  var selectedRow = selection.isSelectedByRowHeader();\n  var selectedColumn = selection.isSelectedByColumnHeader();\n  var countCols = selection.tableProps.countCols();\n  var countRows = selection.tableProps.countRows();\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(new CellCoords(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(new CellCoords(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nvar handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {Object} options\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function handleMouseEvent(event, _ref3) {\n  var coords = _ref3.coords,\n    selection = _ref3.selection,\n    controller = _ref3.controller;\n  handlers.get(event.type)({\n    coords: coords,\n    selection: selection,\n    controller: controller,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}","map":{"version":3,"names":["isRightClick","isRightClickEvent","isLeftClick","isLeftClickEvent","CellCoords","mouseDown","_ref","isShiftKey","coords","selection","controller","currentSelection","isSelected","getSelectedRange","current","selectedCorner","isSelectedByCorner","selectedRow","isSelectedByRowHeader","row","col","cells","setRangeEnd","column","to","selectRows","from","selectColumns","newCoord","allowRightClickSelection","inInSelection","performSelection","setRangeStart","mouseOver","_ref2","selectedColumn","isSelectedByColumnHeader","countCols","tableProps","countRows","cell","handlers","Map","handleMouseEvent","event","_ref3","get","type","shiftKey"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/selection/mouseEventHandler.js"],"sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from './../helpers/dom/event';\nimport { CellCoords } from './../3rdparty/walkontable/src';\n/**\n * MouseDown handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {Boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {Boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseDown(_ref) {\n  var isShiftKey = _ref.isShiftKey,\n      isLeftClick = _ref.isLeftClick,\n      isRightClick = _ref.isRightClick,\n      coords = _ref.coords,\n      selection = _ref.selection,\n      controller = _ref.controller;\n  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  var selectedCorner = selection.isSelectedByCorner();\n  var selectedRow = selection.isSelectedByRowHeader();\n\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(new CellCoords(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(new CellCoords(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(new CellCoords(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(currentSelection.from.row, coords.row);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(currentSelection.from.col, coords.col);\n    }\n  } else {\n    var newCoord = new CellCoords(coords.row, coords.col);\n\n    if (newCoord.row < 0) {\n      newCoord.row = 0;\n    }\n\n    if (newCoord.col < 0) {\n      newCoord.col = 0;\n    }\n\n    var allowRightClickSelection = !selection.inInSelection(newCoord);\n    var performSelection = isLeftClick || isRightClick && allowRightClickSelection; // clicked row header and when some column was selected\n\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col);\n      } // clicked column header and when some row was selected\n\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cells) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.setRangeStart(coords);\n    }\n  }\n}\n/**\n * MouseOver handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isLeftClick\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseOver(_ref2) {\n  var isLeftClick = _ref2.isLeftClick,\n      coords = _ref2.coords,\n      selection = _ref2.selection,\n      controller = _ref2.controller;\n\n  if (!isLeftClick) {\n    return;\n  }\n\n  var selectedRow = selection.isSelectedByRowHeader();\n  var selectedColumn = selection.isSelectedByColumnHeader();\n  var countCols = selection.tableProps.countCols();\n  var countRows = selection.tableProps.countRows();\n\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(new CellCoords(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(new CellCoords(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nvar handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {Object} options\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function handleMouseEvent(event, _ref3) {\n  var coords = _ref3.coords,\n      selection = _ref3.selection,\n      controller = _ref3.controller;\n  handlers.get(event.type)({\n    coords: coords,\n    selection: selection,\n    controller: controller,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}