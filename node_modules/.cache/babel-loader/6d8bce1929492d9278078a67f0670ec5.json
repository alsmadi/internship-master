{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { objectEach, clone } from '../../helpers/object';\nimport { arrayEach } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport { getAdditionalData, getEndDate, getStartDate, setEndDate, setStartDate } from './utils';\n/**\n * This class handles the data-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar GanttChartDataFeed = /*#__PURE__*/\nfunction () {\n  function GanttChartDataFeed(chartInstance, data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n    _classCallCheck(this, GanttChartDataFeed);\n    this.data = data;\n    this.chartInstance = chartInstance;\n    this.chartPlugin = this.chartInstance.getPlugin('ganttChart');\n    this.hotSource = null;\n    this.sourceHooks = {};\n    this.ongoingAsync = false;\n    this.applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates || false);\n  }\n  /**\n   * Parse data accordingly to it's type (HOT instance / data object).\n   *\n   * @param {Object} data The source Handsontable instance or a data object.\n   * @param {Number} startDateColumn Index of the column containing the start dates.\n   * @param {Number} endDateColumn Index of the column containing the end dates.\n   * @param {Object} additionalData Object containing column and label information about additional data passed to the Gantt Plugin.\n   * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n   */\n\n  _createClass(GanttChartDataFeed, [{\n    key: \"applyData\",\n    value: function applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      if (Object.prototype.toString.call(data) === '[object Array]') {\n        if (data.length > 1) {\n          this.chartInstance.alter('insert_row', 0, data.length - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n        this.loadData(data);\n      } else if (data instanceof this.chartInstance.constructor) {\n        var sourceRowCount = data.countRows();\n        if (sourceRowCount > 1) {\n          this.chartInstance.alter('insert_row', 0, sourceRowCount - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n        this.bindWithHotInstance(data, startDateColumn, endDateColumn, additionalData, asyncUpdates);\n      }\n    }\n    /**\n     * Make another Handsontable instance be a live feed for the gantt chart.\n     *\n     * @param {Object} instance The source Handsontable instance.\n     * @param {Number} startDateColumn Index of the column containing the start dates.\n     * @param {Number} endDateColumn Index of the column containing the end dates.\n     * @param {Object} additionalData Object containing column and label information about additional data passed to the\n     * Gantt Plugin. See the example for more details.\n     * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n     *\n     * @example\n     * ```js\n     * hot.getPlugin('ganttChart').bindWithHotInstance(sourceInstance, 4, 5, {\n     *  vendor: 0, // data labeled 'vendor' is stored in the first sourceInstance column.\n     *  format: 1, // data labeled 'format' is stored in the second sourceInstance column.\n     *  market: 2 // data labeled 'market' is stored in the third sourceInstance column.\n     * });\n     * ```\n     */\n  }, {\n    key: \"bindWithHotInstance\",\n    value: function bindWithHotInstance(instance, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      this.hotSource = {\n        instance: instance,\n        startColumn: startDateColumn,\n        endColumn: endDateColumn,\n        additionalData: additionalData,\n        asyncUpdates: asyncUpdates\n      };\n      this.addSourceHotHooks();\n      this.asyncCall(this.updateFromSource);\n    }\n    /**\n     * Run the provided function asynchronously.\n     *\n     * @param {Function} func\n     */\n  }, {\n    key: \"asyncCall\",\n    value: function asyncCall(func) {\n      var _this = this;\n      if (!this.hotSource.asyncUpdates) {\n        func.call(this);\n        return;\n      }\n      this.asyncStart();\n      setTimeout(function () {\n        func.call(_this);\n        _this.asyncEnd();\n      }, 0);\n    }\n  }, {\n    key: \"asyncStart\",\n    value: function asyncStart() {\n      this.ongoingAsync = true;\n    }\n  }, {\n    key: \"asyncEnd\",\n    value: function asyncEnd() {\n      this.ongoingAsync = false;\n    }\n    /**\n     * Add hooks to the source Handsontable instance.\n     *\n     * @private\n     */\n  }, {\n    key: \"addSourceHotHooks\",\n    value: function addSourceHotHooks() {\n      var _this2 = this;\n      this.sourceHooks = {\n        afterLoadData: function afterLoadData() {\n          return _this2.onAfterSourceLoadData();\n        },\n        afterChange: function afterChange(changes) {\n          return _this2.onAfterSourceChange(changes);\n        },\n        afterColumnSort: function afterColumnSort() {\n          return _this2.onAfterColumnSort();\n        }\n      };\n      this.hotSource.instance.addHook('afterLoadData', this.sourceHooks.afterLoadData);\n      this.hotSource.instance.addHook('afterChange', this.sourceHooks.afterChange);\n      this.hotSource.instance.addHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n    }\n    /**\n     * Remove hooks from the source Handsontable instance.\n     *\n     * @private\n     * @param {Object} hotSource The source Handsontable instance object.\n     */\n  }, {\n    key: \"removeSourceHotHooks\",\n    value: function removeSourceHotHooks(hotSource) {\n      if (this.sourceHooks.afterLoadData) {\n        hotSource.instance.removeHook('afterLoadData', this.sourceHooks.afterLoadData);\n      }\n      if (this.sourceHooks.afterChange) {\n        hotSource.instance.removeHook('afterChange', this.sourceHooks.afterChange);\n      }\n      if (this.sourceHooks.afterColumnSort) {\n        hotSource.instance.removeHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n      }\n    }\n    /**\n     * Get data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Source Handsontable instance row.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getDataFromSource\",\n    value: function getDataFromSource(row) {\n      var additionalObjectData = {};\n      var hotSource = this.hotSource;\n      var sourceHotRows;\n      var rangeBarData = [];\n      if (row === void 0) {\n        sourceHotRows = hotSource.instance.getData(0, 0, hotSource.instance.countRows() - 1, hotSource.instance.countCols() - 1);\n      } else {\n        sourceHotRows = [];\n        sourceHotRows[row] = hotSource.instance.getDataAtRow(row);\n      }\n      var _loop = function _loop(i, dataLength) {\n        additionalObjectData = {};\n        var currentRow = sourceHotRows[i];\n        if (currentRow[hotSource.startColumn] === null || currentRow[hotSource.startColumn] === '') {\n          /* eslint-disable no-continue */\n          return \"continue\";\n        }\n        /* eslint-disable no-loop-func */\n\n        objectEach(hotSource.additionalData, function (prop, j) {\n          additionalObjectData[j] = currentRow[prop];\n        });\n        rangeBarData.push([i, currentRow[hotSource.startColumn], currentRow[hotSource.endColumn], additionalObjectData, i]);\n      };\n      for (var i = row || 0, dataLength = sourceHotRows.length; i < (row ? row + 1 : dataLength); i++) {\n        var _ret = _loop(i, dataLength);\n        if (_ret === \"continue\") continue;\n      }\n      return rangeBarData;\n    }\n    /**\n     * Update the Gantt Chart-enabled Handsontable instance with the data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Index of the row which needs updating.\n     */\n  }, {\n    key: \"updateFromSource\",\n    value: function updateFromSource(row) {\n      var dataFromSource = this.getDataFromSource(row);\n      if (!row && isNaN(row)) {\n        this.chartPlugin.clearRangeBars();\n        this.chartPlugin.clearRangeList();\n      }\n      this.loadData(dataFromSource);\n      this.chartInstance.render();\n    }\n    /**\n     * Load chart data to the Handsontable instance.\n     *\n     * @param {Array} data Array of objects containing the range data.\n     *\n     * @example\n     * ```js\n     * [\n     *  {\n     *    additionalData: {vendor: 'Vendor One', format: 'Posters', market: 'New York, NY'},\n     *    startDate: '1/5/2015',\n     *    endDate: '1/20/2015'\n     *  },\n     *  {\n     *    additionalData: {vendor: 'Vendor Two', format: 'Malls', market: 'Los Angeles, CA'},\n     *    startDate: '1/11/2015',\n     *    endDate: '1/29/2015'\n     *  }\n     * ]\n     * ```\n     */\n  }, {\n    key: \"loadData\",\n    value: function loadData(data) {\n      var _this3 = this;\n      var allBars = [];\n      arrayEach(data, function (bar, i) {\n        bar.row = i;\n        var bars = _this3.splitRangeIfNeeded(bar);\n        allBars = allBars.concat(bars);\n      });\n      arrayEach(allBars, function (bar) {\n        _this3.chartPlugin.addRangeBar(bar.row, getStartDate(bar), getEndDate(bar), getAdditionalData(bar));\n        delete bar.row;\n      });\n    }\n    /**\n     * Split the provided range into maximum-year-long chunks.\n     *\n     * @param {Object} bar The range bar object.\n     * @returns {Array} An array of slip chunks (or a single-element array, if no splicing occured)\n     */\n  }, {\n    key: \"splitRangeIfNeeded\",\n    value: function splitRangeIfNeeded(bar) {\n      var splitBars = [];\n      var startDate = new Date(getStartDate(bar));\n      var endDate = new Date(getEndDate(bar));\n      if (typeof startDate === 'string' || typeof endDate === 'string') {\n        return false;\n      }\n      var startYear = startDate.getFullYear();\n      var endYear = endDate.getFullYear();\n      if (startYear === endYear) {\n        return [bar];\n      }\n      rangeEach(startYear, endYear, function (year) {\n        var newBar = clone(bar);\n        if (year !== startYear) {\n          setStartDate(newBar, \"01/01/\".concat(year));\n        }\n        if (year !== endYear) {\n          setEndDate(newBar, \"12/31/\".concat(year));\n        }\n        splitBars.push(newBar);\n      });\n      return splitBars;\n    }\n    /**\n     * afterChange hook callback for the source Handsontable instance.\n     *\n     * @private\n     * @param {Array} changes List of changes.\n     */\n  }, {\n    key: \"onAfterSourceChange\",\n    value: function onAfterSourceChange(changes) {\n      var _this4 = this;\n      this.asyncCall(function () {\n        if (!changes) {\n          return;\n        }\n        var changesByRows = {};\n        for (var i = 0, changesLength = changes.length; i < changesLength; i++) {\n          var currentChange = changes[i];\n          var row = parseInt(currentChange[0], 10);\n          var col = parseInt(currentChange[1], 10);\n          if (!changesByRows[row]) {\n            changesByRows[row] = {};\n          }\n          changesByRows[row][col] = [currentChange[2], currentChange[3]];\n        }\n        objectEach(changesByRows, function (prop, i) {\n          var row = parseInt(i, 10);\n          if (_this4.chartPlugin.getRangeBarCoordinates(row)) {\n            _this4.chartPlugin.removeRangeBarByColumn(row, _this4.chartPlugin.rangeList[row][1]);\n          }\n          _this4.updateFromSource(i);\n        });\n      });\n    }\n    /**\n     * afterLoadData hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterSourceLoadData\",\n    value: function onAfterSourceLoadData() {\n      var _this5 = this;\n      this.asyncCall(function () {\n        _this5.chartPlugin.removeAllRangeBars();\n        _this5.updateFromSource();\n      });\n    }\n    /**\n     * afterColumnSort hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterColumnSort\",\n    value: function onAfterColumnSort() {\n      var _this6 = this;\n      this.asyncCall(function () {\n        _this6.chartPlugin.removeAllRangeBars();\n        _this6.updateFromSource();\n      });\n    }\n  }]);\n  return GanttChartDataFeed;\n}();\nexport default GanttChartDataFeed;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","objectEach","clone","arrayEach","rangeEach","getAdditionalData","getEndDate","getStartDate","setEndDate","setStartDate","GanttChartDataFeed","chartInstance","data","startDateColumn","endDateColumn","additionalData","asyncUpdates","chartPlugin","getPlugin","hotSource","sourceHooks","ongoingAsync","applyData","value","toString","call","alter","concat","pluginName","loadData","constructor","sourceRowCount","countRows","bindWithHotInstance","startColumn","endColumn","addSourceHotHooks","asyncCall","updateFromSource","func","_this","asyncStart","setTimeout","asyncEnd","_this2","afterLoadData","onAfterSourceLoadData","afterChange","changes","onAfterSourceChange","afterColumnSort","onAfterColumnSort","addHook","removeSourceHotHooks","removeHook","getDataFromSource","row","additionalObjectData","sourceHotRows","rangeBarData","getData","countCols","getDataAtRow","_loop","dataLength","currentRow","prop","j","push","_ret","dataFromSource","isNaN","clearRangeBars","clearRangeList","render","_this3","allBars","bar","bars","splitRangeIfNeeded","addRangeBar","splitBars","startDate","Date","endDate","startYear","getFullYear","endYear","year","newBar","_this4","changesByRows","changesLength","currentChange","parseInt","col","getRangeBarCoordinates","removeRangeBarByColumn","rangeList","_this5","removeAllRangeBars","_this6"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/ganttChart/ganttChartDataFeed.js"],"sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/web.timers\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { objectEach, clone } from '../../helpers/object';\nimport { arrayEach } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport { getAdditionalData, getEndDate, getStartDate, setEndDate, setStartDate } from './utils';\n/**\n * This class handles the data-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar GanttChartDataFeed =\n/*#__PURE__*/\nfunction () {\n  function GanttChartDataFeed(chartInstance, data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n    _classCallCheck(this, GanttChartDataFeed);\n\n    this.data = data;\n    this.chartInstance = chartInstance;\n    this.chartPlugin = this.chartInstance.getPlugin('ganttChart');\n    this.hotSource = null;\n    this.sourceHooks = {};\n    this.ongoingAsync = false;\n    this.applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates || false);\n  }\n  /**\n   * Parse data accordingly to it's type (HOT instance / data object).\n   *\n   * @param {Object} data The source Handsontable instance or a data object.\n   * @param {Number} startDateColumn Index of the column containing the start dates.\n   * @param {Number} endDateColumn Index of the column containing the end dates.\n   * @param {Object} additionalData Object containing column and label information about additional data passed to the Gantt Plugin.\n   * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n   */\n\n\n  _createClass(GanttChartDataFeed, [{\n    key: \"applyData\",\n    value: function applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      if (Object.prototype.toString.call(data) === '[object Array]') {\n        if (data.length > 1) {\n          this.chartInstance.alter('insert_row', 0, data.length - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n\n        this.loadData(data);\n      } else if (data instanceof this.chartInstance.constructor) {\n        var sourceRowCount = data.countRows();\n\n        if (sourceRowCount > 1) {\n          this.chartInstance.alter('insert_row', 0, sourceRowCount - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n\n        this.bindWithHotInstance(data, startDateColumn, endDateColumn, additionalData, asyncUpdates);\n      }\n    }\n    /**\n     * Make another Handsontable instance be a live feed for the gantt chart.\n     *\n     * @param {Object} instance The source Handsontable instance.\n     * @param {Number} startDateColumn Index of the column containing the start dates.\n     * @param {Number} endDateColumn Index of the column containing the end dates.\n     * @param {Object} additionalData Object containing column and label information about additional data passed to the\n     * Gantt Plugin. See the example for more details.\n     * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n     *\n     * @example\n     * ```js\n     * hot.getPlugin('ganttChart').bindWithHotInstance(sourceInstance, 4, 5, {\n     *  vendor: 0, // data labeled 'vendor' is stored in the first sourceInstance column.\n     *  format: 1, // data labeled 'format' is stored in the second sourceInstance column.\n     *  market: 2 // data labeled 'market' is stored in the third sourceInstance column.\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"bindWithHotInstance\",\n    value: function bindWithHotInstance(instance, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      this.hotSource = {\n        instance: instance,\n        startColumn: startDateColumn,\n        endColumn: endDateColumn,\n        additionalData: additionalData,\n        asyncUpdates: asyncUpdates\n      };\n      this.addSourceHotHooks();\n      this.asyncCall(this.updateFromSource);\n    }\n    /**\n     * Run the provided function asynchronously.\n     *\n     * @param {Function} func\n     */\n\n  }, {\n    key: \"asyncCall\",\n    value: function asyncCall(func) {\n      var _this = this;\n\n      if (!this.hotSource.asyncUpdates) {\n        func.call(this);\n        return;\n      }\n\n      this.asyncStart();\n      setTimeout(function () {\n        func.call(_this);\n\n        _this.asyncEnd();\n      }, 0);\n    }\n  }, {\n    key: \"asyncStart\",\n    value: function asyncStart() {\n      this.ongoingAsync = true;\n    }\n  }, {\n    key: \"asyncEnd\",\n    value: function asyncEnd() {\n      this.ongoingAsync = false;\n    }\n    /**\n     * Add hooks to the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addSourceHotHooks\",\n    value: function addSourceHotHooks() {\n      var _this2 = this;\n\n      this.sourceHooks = {\n        afterLoadData: function afterLoadData() {\n          return _this2.onAfterSourceLoadData();\n        },\n        afterChange: function afterChange(changes) {\n          return _this2.onAfterSourceChange(changes);\n        },\n        afterColumnSort: function afterColumnSort() {\n          return _this2.onAfterColumnSort();\n        }\n      };\n      this.hotSource.instance.addHook('afterLoadData', this.sourceHooks.afterLoadData);\n      this.hotSource.instance.addHook('afterChange', this.sourceHooks.afterChange);\n      this.hotSource.instance.addHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n    }\n    /**\n     * Remove hooks from the source Handsontable instance.\n     *\n     * @private\n     * @param {Object} hotSource The source Handsontable instance object.\n     */\n\n  }, {\n    key: \"removeSourceHotHooks\",\n    value: function removeSourceHotHooks(hotSource) {\n      if (this.sourceHooks.afterLoadData) {\n        hotSource.instance.removeHook('afterLoadData', this.sourceHooks.afterLoadData);\n      }\n\n      if (this.sourceHooks.afterChange) {\n        hotSource.instance.removeHook('afterChange', this.sourceHooks.afterChange);\n      }\n\n      if (this.sourceHooks.afterColumnSort) {\n        hotSource.instance.removeHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n      }\n    }\n    /**\n     * Get data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Source Handsontable instance row.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getDataFromSource\",\n    value: function getDataFromSource(row) {\n      var additionalObjectData = {};\n      var hotSource = this.hotSource;\n      var sourceHotRows;\n      var rangeBarData = [];\n\n      if (row === void 0) {\n        sourceHotRows = hotSource.instance.getData(0, 0, hotSource.instance.countRows() - 1, hotSource.instance.countCols() - 1);\n      } else {\n        sourceHotRows = [];\n        sourceHotRows[row] = hotSource.instance.getDataAtRow(row);\n      }\n\n      var _loop = function _loop(i, dataLength) {\n        additionalObjectData = {};\n        var currentRow = sourceHotRows[i];\n\n        if (currentRow[hotSource.startColumn] === null || currentRow[hotSource.startColumn] === '') {\n          /* eslint-disable no-continue */\n          return \"continue\";\n        }\n        /* eslint-disable no-loop-func */\n\n\n        objectEach(hotSource.additionalData, function (prop, j) {\n          additionalObjectData[j] = currentRow[prop];\n        });\n        rangeBarData.push([i, currentRow[hotSource.startColumn], currentRow[hotSource.endColumn], additionalObjectData, i]);\n      };\n\n      for (var i = row || 0, dataLength = sourceHotRows.length; i < (row ? row + 1 : dataLength); i++) {\n        var _ret = _loop(i, dataLength);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      return rangeBarData;\n    }\n    /**\n     * Update the Gantt Chart-enabled Handsontable instance with the data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Index of the row which needs updating.\n     */\n\n  }, {\n    key: \"updateFromSource\",\n    value: function updateFromSource(row) {\n      var dataFromSource = this.getDataFromSource(row);\n\n      if (!row && isNaN(row)) {\n        this.chartPlugin.clearRangeBars();\n        this.chartPlugin.clearRangeList();\n      }\n\n      this.loadData(dataFromSource);\n      this.chartInstance.render();\n    }\n    /**\n     * Load chart data to the Handsontable instance.\n     *\n     * @param {Array} data Array of objects containing the range data.\n     *\n     * @example\n     * ```js\n     * [\n     *  {\n     *    additionalData: {vendor: 'Vendor One', format: 'Posters', market: 'New York, NY'},\n     *    startDate: '1/5/2015',\n     *    endDate: '1/20/2015'\n     *  },\n     *  {\n     *    additionalData: {vendor: 'Vendor Two', format: 'Malls', market: 'Los Angeles, CA'},\n     *    startDate: '1/11/2015',\n     *    endDate: '1/29/2015'\n     *  }\n     * ]\n     * ```\n     */\n\n  }, {\n    key: \"loadData\",\n    value: function loadData(data) {\n      var _this3 = this;\n\n      var allBars = [];\n      arrayEach(data, function (bar, i) {\n        bar.row = i;\n\n        var bars = _this3.splitRangeIfNeeded(bar);\n\n        allBars = allBars.concat(bars);\n      });\n      arrayEach(allBars, function (bar) {\n        _this3.chartPlugin.addRangeBar(bar.row, getStartDate(bar), getEndDate(bar), getAdditionalData(bar));\n\n        delete bar.row;\n      });\n    }\n    /**\n     * Split the provided range into maximum-year-long chunks.\n     *\n     * @param {Object} bar The range bar object.\n     * @returns {Array} An array of slip chunks (or a single-element array, if no splicing occured)\n     */\n\n  }, {\n    key: \"splitRangeIfNeeded\",\n    value: function splitRangeIfNeeded(bar) {\n      var splitBars = [];\n      var startDate = new Date(getStartDate(bar));\n      var endDate = new Date(getEndDate(bar));\n\n      if (typeof startDate === 'string' || typeof endDate === 'string') {\n        return false;\n      }\n\n      var startYear = startDate.getFullYear();\n      var endYear = endDate.getFullYear();\n\n      if (startYear === endYear) {\n        return [bar];\n      }\n\n      rangeEach(startYear, endYear, function (year) {\n        var newBar = clone(bar);\n\n        if (year !== startYear) {\n          setStartDate(newBar, \"01/01/\".concat(year));\n        }\n\n        if (year !== endYear) {\n          setEndDate(newBar, \"12/31/\".concat(year));\n        }\n\n        splitBars.push(newBar);\n      });\n      return splitBars;\n    }\n    /**\n     * afterChange hook callback for the source Handsontable instance.\n     *\n     * @private\n     * @param {Array} changes List of changes.\n     */\n\n  }, {\n    key: \"onAfterSourceChange\",\n    value: function onAfterSourceChange(changes) {\n      var _this4 = this;\n\n      this.asyncCall(function () {\n        if (!changes) {\n          return;\n        }\n\n        var changesByRows = {};\n\n        for (var i = 0, changesLength = changes.length; i < changesLength; i++) {\n          var currentChange = changes[i];\n          var row = parseInt(currentChange[0], 10);\n          var col = parseInt(currentChange[1], 10);\n\n          if (!changesByRows[row]) {\n            changesByRows[row] = {};\n          }\n\n          changesByRows[row][col] = [currentChange[2], currentChange[3]];\n        }\n\n        objectEach(changesByRows, function (prop, i) {\n          var row = parseInt(i, 10);\n\n          if (_this4.chartPlugin.getRangeBarCoordinates(row)) {\n            _this4.chartPlugin.removeRangeBarByColumn(row, _this4.chartPlugin.rangeList[row][1]);\n          }\n\n          _this4.updateFromSource(i);\n        });\n      });\n    }\n    /**\n     * afterLoadData hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterSourceLoadData\",\n    value: function onAfterSourceLoadData() {\n      var _this5 = this;\n\n      this.asyncCall(function () {\n        _this5.chartPlugin.removeAllRangeBars();\n\n        _this5.updateFromSource();\n      });\n    }\n    /**\n     * afterColumnSort hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterColumnSort\",\n    value: function onAfterColumnSort() {\n      var _this6 = this;\n\n      this.asyncCall(function () {\n        _this6.chartPlugin.removeAllRangeBars();\n\n        _this6.updateFromSource();\n      });\n    }\n  }]);\n\n  return GanttChartDataFeed;\n}();\n\nexport default GanttChartDataFeed;"],"mappings":"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"},"metadata":{},"sourceType":"module"}