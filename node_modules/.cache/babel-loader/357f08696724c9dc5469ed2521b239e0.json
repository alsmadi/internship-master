{"ast":null,"code":"/**\n * SheetClip - Spreadsheet Clipboard Parser\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\n/*jslint white: true*/\n(function (global) {\n  \"use strict\";\n\n  function countQuotes(str) {\n    return str.split('\"').length - 1;\n  }\n  var SheetClip = {\n    /**\n     * Decode spreadsheet string into array\n     *\n     * @param {String} str\n     * @returns {Array}\n     */\n    parse: function parse(str) {\n      var r,\n        rLen,\n        rows,\n        arr = [],\n        a = 0,\n        c,\n        cLen,\n        multiline,\n        last;\n      rows = str.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n      if (rows.length > 1 && rows[rows.length - 1] === '') {\n        rows.pop();\n      }\n      for (r = 0, rLen = rows.length; r < rLen; r += 1) {\n        rows[r] = rows[r].split('\\t');\n        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {\n          if (!arr[a]) {\n            arr[a] = [];\n          }\n          if (multiline && c === 0) {\n            last = arr[a].length - 1;\n            arr[a][last] = arr[a][last] + '\\n' + rows[r][0];\n            if (multiline && countQuotes(rows[r][0]) & 1) {\n              //& 1 is a bitwise way of performing mod 2\n              multiline = false;\n              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/\"\"/g, '\"');\n            }\n          } else {\n            if (c === cLen - 1 && rows[r][c].indexOf('\"') === 0 && countQuotes(rows[r][c]) & 1) {\n              arr[a].push(rows[r][c].substring(1).replace(/\"\"/g, '\"'));\n              multiline = true;\n            } else {\n              arr[a].push(rows[r][c].replace(/\"\"/g, '\"'));\n              multiline = false;\n            }\n          }\n        }\n        if (!multiline) {\n          a += 1;\n        }\n      }\n      return arr;\n    },\n    /**\n     * Encode array into valid spreadsheet string\n     *\n     * @param arr\n     * @returns {String}\n     */\n    stringify: function stringify(arr) {\n      var r,\n        rLen,\n        c,\n        cLen,\n        str = '',\n        val;\n      for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n        cLen = arr[r].length;\n        for (c = 0; c < cLen; c += 1) {\n          if (c > 0) {\n            str += '\\t';\n          }\n          val = arr[r][c];\n          if (typeof val === 'string') {\n            if (val.indexOf('\\n') > -1) {\n              str += '\"' + val.replace(/\"/g, '\"\"') + '\"';\n            } else {\n              str += val;\n            }\n          } else if (val === null || val === void 0) {\n            // void 0 resolves to undefined\n            str += '';\n          } else {\n            str += val;\n          }\n        }\n        if (r !== rLen - 1) {\n          str += '\\n';\n        }\n      }\n      return str;\n    }\n  };\n  if (typeof exports !== 'undefined') {\n    exports.parse = SheetClip.parse;\n    exports.stringify = SheetClip.stringify;\n  } else {\n    global.SheetClip = SheetClip;\n  }\n})(window);","map":{"version":3,"names":["global","countQuotes","str","split","length","SheetClip","parse","r","rLen","rows","arr","a","c","cLen","multiline","last","replace","pop","substring","indexOf","push","stringify","val","exports","window"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/lib/SheetClip/SheetClip.js"],"sourcesContent":["/**\n * SheetClip - Spreadsheet Clipboard Parser\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\n/*jslint white: true*/\n(function (global) {\n  \"use strict\";\n\n  function countQuotes(str) {\n    return str.split('\"').length - 1;\n  }\n\n  var SheetClip = {\n    /**\n     * Decode spreadsheet string into array\n     *\n     * @param {String} str\n     * @returns {Array}\n     */\n    parse: function (str) {\n      var r, rLen, rows, arr = [], a = 0, c, cLen, multiline, last;\n\n      rows = str.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      if (rows.length > 1 && rows[rows.length - 1] === '') {\n        rows.pop();\n      }\n      for (r = 0, rLen = rows.length; r < rLen; r += 1) {\n        rows[r] = rows[r].split('\\t');\n\n        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {\n          if (!arr[a]) {\n            arr[a] = [];\n          }\n          if (multiline && c === 0) {\n            last = arr[a].length - 1;\n            arr[a][last] = arr[a][last] + '\\n' + rows[r][0];\n\n            if (multiline && (countQuotes(rows[r][0]) & 1)) { //& 1 is a bitwise way of performing mod 2\n              multiline = false;\n              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/\"\"/g, '\"');\n            }\n          }\n          else {\n            if (c === cLen - 1 && rows[r][c].indexOf('\"') === 0 && (countQuotes(rows[r][c]) & 1)) {\n              arr[a].push(rows[r][c].substring(1).replace(/\"\"/g, '\"'));\n              multiline = true;\n            }\n            else {\n              arr[a].push(rows[r][c].replace(/\"\"/g, '\"'));\n              multiline = false;\n            }\n          }\n        }\n        if (!multiline) {\n          a += 1;\n        }\n      }\n\n      return arr;\n    },\n\n    /**\n     * Encode array into valid spreadsheet string\n     *\n     * @param arr\n     * @returns {String}\n     */\n    stringify: function (arr) {\n      var r, rLen, c, cLen, str = '', val;\n\n      for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n        cLen = arr[r].length;\n\n        for (c = 0; c < cLen; c += 1) {\n          if (c > 0) {\n            str += '\\t';\n          }\n          val = arr[r][c];\n\n          if (typeof val === 'string') {\n            if (val.indexOf('\\n') > -1) {\n              str += '\"' + val.replace(/\"/g, '\"\"') + '\"';\n            }\n            else {\n              str += val;\n            }\n          }\n          else if (val === null || val === void 0) { // void 0 resolves to undefined\n            str += '';\n          }\n          else {\n            str += val;\n          }\n        }\n\n        if (r !== rLen - 1) {\n          str += '\\n';\n        }\n      }\n\n      return str;\n    }\n  };\n\n  if (typeof exports !== 'undefined') {\n    exports.parse = SheetClip.parse;\n    exports.stringify = SheetClip.stringify;\n  } else {\n    global.SheetClip = SheetClip;\n  }\n}(window));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}