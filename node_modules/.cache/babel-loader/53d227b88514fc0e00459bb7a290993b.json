{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport { empty, addClass } from './../helpers/dom/element';\nimport { equalsIgnoreCase } from './../helpers/string';\nimport EventManager from './../eventManager';\nimport { isKey } from './../helpers/unicode';\nimport { partial } from './../helpers/function';\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from './../helpers/dom/event';\nimport { getRenderer } from './index';\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\n/**\n * Checkbox renderer\n *\n * @private\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {\n    input.checked = false;\n  } else if (value === null) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n  input.setAttribute('data-row', row);\n  input.setAttribute('data-col', col);\n  if (!badValue && labelOptions) {\n    var labelText = '';\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n    var label = createLabel(rootDocument, labelText);\n    if (labelOptions.position === 'before') {\n      label.appendChild(input);\n    } else {\n      label.insertBefore(input, label.firstChild);\n    }\n    input = label;\n  }\n  TD.appendChild(input);\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    instance.addHook('beforeKeyDown', onBeforeKeyDown);\n  }\n  /**\n   * On before key down DOM listener.\n   *\n   * @private\n   * @param {Event} event\n   */\n\n  function onBeforeKeyDown(event) {\n    var toggleKeys = 'SPACE|ENTER';\n    var switchOffKeys = 'DELETE|BACKSPACE';\n    var isKeyCode = partial(isKey, event.keyCode);\n    if (!instance.getSettings().enterBeginsEditing && isKeyCode('ENTER')) {\n      return;\n    }\n    if (isKeyCode(\"\".concat(toggleKeys, \"|\").concat(switchOffKeys)) && !isImmediatePropagationStopped(event)) {\n      eachSelectedCheckboxCell(function () {\n        stopImmediatePropagation(event);\n        event.preventDefault();\n      });\n    }\n    if (isKeyCode(toggleKeys)) {\n      changeSelectedCheckboxesState();\n    }\n    if (isKeyCode(switchOffKeys)) {\n      changeSelectedCheckboxesState(true);\n    }\n  }\n  /**\n   * Change checkbox checked property\n   *\n   * @private\n   * @param {Boolean} [uncheckCheckbox=false]\n   */\n\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRangeLast();\n    if (!selRange) {\n      return;\n    }\n    var _selRange$getTopLeftC = selRange.getTopLeftCorner(),\n      startRow = _selRange$getTopLeftC.row,\n      startColumn = _selRange$getTopLeftC.col;\n    var _selRange$getBottomRi = selRange.getBottomRightCorner(),\n      endRow = _selRange$getBottomRi.row,\n      endColumn = _selRange$getBottomRi.col;\n    var changes = [];\n    for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n      for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n        /* eslint-disable no-continue */\n\n        if (cachedCellProperties.readOnly === true) {\n          continue;\n        }\n        if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n          cachedCellProperties.checkedTemplate = true;\n        }\n        if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n          cachedCellProperties.uncheckedTemplate = false;\n        }\n        var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n        if (uncheckCheckbox === false) {\n          if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n          }\n        } else {\n          changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n        }\n      }\n    }\n    if (changes.length > 0) {\n      instance.setDataAtCell(changes);\n    }\n  }\n  /**\n   * Call callback for each found selected cell with checkbox type.\n   *\n   * @private\n   * @param {Function} callback\n   */\n\n  function eachSelectedCheckboxCell(callback) {\n    var selRange = instance.getSelectedRangeLast();\n    if (!selRange) {\n      return;\n    }\n    var topLeft = selRange.getTopLeftCorner();\n    var bottomRight = selRange.getBottomRightCorner();\n    for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n      for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n        var cell = instance.getCell(visualRow, visualColumn);\n        if (cell === null || cell === void 0) {\n          callback(visualRow, visualColumn, cachedCellProperties);\n        } else {\n          var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n          if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n            callback(checkboxes);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Register checkbox listeners.\n *\n * @param {Handsontable} instance Handsontable instance.\n * @returns {EventManager}\n */\n\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n  return eventManager;\n}\n/**\n * Create input element.\n *\n * @param {Document} rootDocument\n * @returns {Node}\n */\n\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n/**\n * Create label element.\n *\n * @param {Document} rootDocument\n * @param {String} text\n * @returns {Node}\n */\n\nfunction createLabel(rootDocument, text) {\n  var label = rootDocument.createElement('label');\n  label.className = 'htCheckboxRendererLabel';\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Object} instance Handsontable instance.\n */\n\nfunction onMouseUp(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return;\n  }\n  setTimeout(instance.listen, 10);\n}\n/**\n * `click` callback.\n *\n * @private\n * @param {Event} event `click` event.\n * @param {Object} instance Handsontable instance.\n */\n\nfunction onClick(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Object} instance Handsontable instance.\n * @param {Object} cellProperties Reference to cell properties.\n * @returns {Boolean}\n */\n\nfunction onChange(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {Boolean}\n */\n\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}\nexport default checkboxRenderer;","map":{"version":3,"names":["empty","addClass","equalsIgnoreCase","EventManager","isKey","partial","stopImmediatePropagation","isImmediatePropagationStopped","getRenderer","isListeningKeyDownEvent","WeakMap","isCheckboxListenerAdded","BAD_VALUE_CLASS","checkboxRenderer","instance","TD","row","col","prop","value","cellProperties","rootDocument","_len","arguments","length","args","Array","_key","apply","concat","registerEvents","input","createInput","labelOptions","label","badValue","checkedTemplate","uncheckedTemplate","checked","style","display","setAttribute","labelText","call","property","labelValue","getDataAtRowProp","createLabel","position","appendChild","insertBefore","firstChild","createTextNode","has","set","addHook","onBeforeKeyDown","event","toggleKeys","switchOffKeys","isKeyCode","keyCode","getSettings","enterBeginsEditing","eachSelectedCheckboxCell","preventDefault","changeSelectedCheckboxesState","uncheckCheckbox","undefined","selRange","getSelectedRangeLast","_selRange$getTopLeftC","getTopLeftCorner","startRow","startColumn","_selRange$getBottomRi","getBottomRightCorner","endRow","endColumn","changes","visualRow","visualColumn","cachedCellProperties","getCellMeta","type","readOnly","dataAtCell","getDataAtCell","toString","includes","push","setDataAtCell","callback","topLeft","bottomRight","cell","getCell","checkboxes","querySelectorAll","eventManager","get","rootElement","addEventListener","onClick","onMouseUp","onChange","createElement","className","cloneNode","text","isCheckboxInput","target","setTimeout","listen","parseInt","getAttribute","newCheckboxValue","element","tagName"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/renderers/checkboxRenderer.js"],"sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.timers\";\nimport { empty, addClass } from './../helpers/dom/element';\nimport { equalsIgnoreCase } from './../helpers/string';\nimport EventManager from './../eventManager';\nimport { isKey } from './../helpers/unicode';\nimport { partial } from './../helpers/function';\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from './../helpers/dom/event';\nimport { getRenderer } from './index';\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\n/**\n * Checkbox renderer\n *\n * @private\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {\n    input.checked = false;\n  } else if (value === null) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n\n  input.setAttribute('data-row', row);\n  input.setAttribute('data-col', col);\n\n  if (!badValue && labelOptions) {\n    var labelText = '';\n\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n\n    var label = createLabel(rootDocument, labelText);\n\n    if (labelOptions.position === 'before') {\n      label.appendChild(input);\n    } else {\n      label.insertBefore(input, label.firstChild);\n    }\n\n    input = label;\n  }\n\n  TD.appendChild(input);\n\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    instance.addHook('beforeKeyDown', onBeforeKeyDown);\n  }\n  /**\n   * On before key down DOM listener.\n   *\n   * @private\n   * @param {Event} event\n   */\n\n\n  function onBeforeKeyDown(event) {\n    var toggleKeys = 'SPACE|ENTER';\n    var switchOffKeys = 'DELETE|BACKSPACE';\n    var isKeyCode = partial(isKey, event.keyCode);\n\n    if (!instance.getSettings().enterBeginsEditing && isKeyCode('ENTER')) {\n      return;\n    }\n\n    if (isKeyCode(\"\".concat(toggleKeys, \"|\").concat(switchOffKeys)) && !isImmediatePropagationStopped(event)) {\n      eachSelectedCheckboxCell(function () {\n        stopImmediatePropagation(event);\n        event.preventDefault();\n      });\n    }\n\n    if (isKeyCode(toggleKeys)) {\n      changeSelectedCheckboxesState();\n    }\n\n    if (isKeyCode(switchOffKeys)) {\n      changeSelectedCheckboxesState(true);\n    }\n  }\n  /**\n   * Change checkbox checked property\n   *\n   * @private\n   * @param {Boolean} [uncheckCheckbox=false]\n   */\n\n\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRangeLast();\n\n    if (!selRange) {\n      return;\n    }\n\n    var _selRange$getTopLeftC = selRange.getTopLeftCorner(),\n        startRow = _selRange$getTopLeftC.row,\n        startColumn = _selRange$getTopLeftC.col;\n\n    var _selRange$getBottomRi = selRange.getBottomRightCorner(),\n        endRow = _selRange$getBottomRi.row,\n        endColumn = _selRange$getBottomRi.col;\n\n    var changes = [];\n\n    for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n      for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n        /* eslint-disable no-continue */\n\n\n        if (cachedCellProperties.readOnly === true) {\n          continue;\n        }\n\n        if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n          cachedCellProperties.checkedTemplate = true;\n        }\n\n        if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n          cachedCellProperties.uncheckedTemplate = false;\n        }\n\n        var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n\n        if (uncheckCheckbox === false) {\n          if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n          }\n        } else {\n          changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n        }\n      }\n    }\n\n    if (changes.length > 0) {\n      instance.setDataAtCell(changes);\n    }\n  }\n  /**\n   * Call callback for each found selected cell with checkbox type.\n   *\n   * @private\n   * @param {Function} callback\n   */\n\n\n  function eachSelectedCheckboxCell(callback) {\n    var selRange = instance.getSelectedRangeLast();\n\n    if (!selRange) {\n      return;\n    }\n\n    var topLeft = selRange.getTopLeftCorner();\n    var bottomRight = selRange.getBottomRightCorner();\n\n    for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n      for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n\n        var cell = instance.getCell(visualRow, visualColumn);\n\n        if (cell === null || cell === void 0) {\n          callback(visualRow, visualColumn, cachedCellProperties);\n        } else {\n          var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n\n          if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n            callback(checkboxes);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Register checkbox listeners.\n *\n * @param {Handsontable} instance Handsontable instance.\n * @returns {EventManager}\n */\n\n\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n\n  return eventManager;\n}\n/**\n * Create input element.\n *\n * @param {Document} rootDocument\n * @returns {Node}\n */\n\n\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n/**\n * Create label element.\n *\n * @param {Document} rootDocument\n * @param {String} text\n * @returns {Node}\n */\n\n\nfunction createLabel(rootDocument, text) {\n  var label = rootDocument.createElement('label');\n  label.className = 'htCheckboxRendererLabel';\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Object} instance Handsontable instance.\n */\n\n\nfunction onMouseUp(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return;\n  }\n\n  setTimeout(instance.listen, 10);\n}\n/**\n * `click` callback.\n *\n * @private\n * @param {Event} event `click` event.\n * @param {Object} instance Handsontable instance.\n */\n\n\nfunction onClick(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Object} instance Handsontable instance.\n * @param {Object} cellProperties Reference to cell properties.\n * @returns {Boolean}\n */\n\n\nfunction onChange(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {Boolean}\n */\n\n\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}\n\nexport default checkboxRenderer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}