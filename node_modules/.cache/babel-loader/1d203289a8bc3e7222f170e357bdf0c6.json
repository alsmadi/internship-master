{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { extend } from '../../../helpers/object';\nimport { CellCoords, CellRange } from './../../../3rdparty/walkontable/src';\nimport { arrayEach } from './../../../helpers/array';\n/**\n * Class responsible for all of the Autofill-related operations on merged cells.\n *\n * @class AutofillCalculations\n * @plugin MergeCells\n * @util\n */\n\nvar AutofillCalculations = /*#__PURE__*/\nfunction () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this.currentFillData = null;\n  }\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea\n   */\n\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n    /**\n     * Get the direction of the autofill process.\n     *\n     * @param {Array} selectionArea The selection area.\n     * @param {Array} finalArea The final area (base + drag).\n     * @return {String} `up`, `down`, `left` or `right`.\n     */\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n      return direction;\n    }\n    /**\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n     *\n     * @param {Array} baseArea The base selected area.\n     * @param {Array} dragArea The drag area.\n     * @param {String} dragDirection The autofill drag direction.\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n     * @return {Array} The new drag area\n     */\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n      var _baseArea = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea[0],\n        baseAreaStartColumn = _baseArea[1],\n        baseAreaEndRow = _baseArea[2],\n        baseAreaEndColumn = _baseArea[3];\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n          var _newLimit = newDragArea[3] + _fill;\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n          var _newLimit2 = newDragArea[0] + _fill2;\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n          var _newLimit3 = newDragArea[1] + _fill3;\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n    /**\n     * Update the current fill cache with the provided object.\n     *\n     * @private\n     * @param {Object} updateObject\n     */\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n      extend(this.currentFillData, updateObject);\n    }\n    /**\n     * Get the \"length\" of the drag area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {String} direction The drag direction.\n     * @return {Number|null} The \"length\" (height or width, depending on the direction) of the drag.\n     */\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea2[0],\n        baseAreaStartColumn = _baseArea2[1],\n        baseAreaEndRow = _baseArea2[2],\n        baseAreaEndColumn = _baseArea2[3];\n      var _dragArea = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea[0],\n        dragAreaStartColumn = _dragArea[1],\n        dragAreaEndRow = _dragArea[2],\n        dragAreaEndColumn = _dragArea[3];\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Trim the default drag area (containing the selection area) to the drag-only area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The base selection area extended by the drag area.\n     * @param {String} direction Drag direction.\n     * @return {Array|null} Array representing the drag area coordinates.\n     */\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea3[0],\n        baseAreaStartColumn = _baseArea3[1],\n        baseAreaEndRow = _baseArea3[2],\n        baseAreaEndColumn = _baseArea3[3];\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea2[0],\n        dragAreaStartColumn = _dragArea2[1],\n        dragAreaEndRow = _dragArea2[2],\n        dragAreaEndColumn = _dragArea2[3];\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n        default:\n          return null;\n      }\n    }\n    /**\n     * Get the to-be-farthest merged cell in the newly filled area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {String} direction The drag direction.\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n     * @return {MergedCellCoords|null}\n     */\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea4[0],\n        baseAreaStartColumn = _baseArea4[1],\n        baseAreaEndRow = _baseArea4[2],\n        baseAreaEndColumn = _baseArea4[3];\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        default:\n      }\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n    /**\n     * Recreate the merged cells after the autofill process.\n     *\n     * @param {Array} changes Changes made.\n     */\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n          default:\n            return null;\n        }\n      };\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              default:\n            }\n          }\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n      this.currentFillData = null;\n      this.plugin.hot.render();\n    }\n    /**\n     * Get the drag range from the changes made.\n     *\n     * @private\n     * @param {Array} changes The changes made.\n     * @returns {Object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n     */\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n    /**\n     * Check if the drag area contains any merged cells.\n     *\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} fullArea The base area extended by the drag area.\n     * @param {String} direction Drag direction.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea3[0],\n        dragAreaStartColumn = _dragArea3[1],\n        dragAreaEndRow = _dragArea3[2],\n        dragAreaEndColumn = _dragArea3[3];\n      var topLeft = new CellCoords(dragAreaStartRow, dragAreaStartColumn);\n      var bottomRight = new CellCoords(dragAreaEndRow, dragAreaEndColumn);\n      var dragRange = new CellRange(topLeft, topLeft, bottomRight);\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n  return AutofillCalculations;\n}();\nexport default AutofillCalculations;","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","extend","CellCoords","CellRange","arrayEach","AutofillCalculations","plugin","mergedCellsCollection","currentFillData","correctSelectionAreaSize","selectionArea","mergedCell","get","rowspan","colspan","getDirection","finalArea","direction","snapDragArea","baseArea","dragArea","dragDirection","foundMergedCells","newDragArea","slice","fillSize","getAutofillSize","_baseArea","baseAreaStartRow","baseAreaStartColumn","baseAreaEndRow","baseAreaEndColumn","verticalDirection","indexOf","fullCycle","fulls","Math","floor","partials","farthestCollection","getFarthestCollection","fill","row","newLimit","hot","countRows","_fill","col","_newLimit","countCols","_fill2","_newLimit2","_fill3","_newLimit3","updateCurrentFillCache","cycleLength","updateObject","_baseArea2","_dragArea","dragAreaStartRow","dragAreaStartColumn","dragAreaEndRow","dragAreaEndColumn","getDragArea","_baseArea3","_dragArea2","mergedCellArray","_baseArea4","baseEnd","baseStart","inclusionFunctionName","endOfDragRecreationIndex","currentCollection","isFarther","recreateAfterDataPopulation","changes","fillRange","getRangeFromChanges","inBounds","current","offset","from","to","column","fillOffset","multiplier","j","add","render","_this","rows","min","max","columns","change","rowIndex","columnIndex","propToCol","dragAreaOverlapsCollections","fullArea","_dragArea3","topLeft","bottomRight","dragRange","getWithinRange"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/mergeCells/calculations/autofill.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { extend } from '../../../helpers/object';\nimport { CellCoords, CellRange } from './../../../3rdparty/walkontable/src';\nimport { arrayEach } from './../../../helpers/array';\n/**\n * Class responsible for all of the Autofill-related operations on merged cells.\n *\n * @class AutofillCalculations\n * @plugin MergeCells\n * @util\n */\n\nvar AutofillCalculations =\n/*#__PURE__*/\nfunction () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this.currentFillData = null;\n  }\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea\n   */\n\n\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n    /**\n     * Get the direction of the autofill process.\n     *\n     * @param {Array} selectionArea The selection area.\n     * @param {Array} finalArea The final area (base + drag).\n     * @return {String} `up`, `down`, `left` or `right`.\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n\n      return direction;\n    }\n    /**\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n     *\n     * @param {Array} baseArea The base selected area.\n     * @param {Array} dragArea The drag area.\n     * @param {String} dragDirection The autofill drag direction.\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n     * @return {Array} The new drag area\n     */\n\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n\n      var _baseArea = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea[0],\n          baseAreaStartColumn = _baseArea[1],\n          baseAreaEndRow = _baseArea[2],\n          baseAreaEndColumn = _baseArea[3];\n\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n\n          var _newLimit = newDragArea[3] + _fill;\n\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n\n          var _newLimit2 = newDragArea[0] + _fill2;\n\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n\n          var _newLimit3 = newDragArea[1] + _fill3;\n\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n    /**\n     * Update the current fill cache with the provided object.\n     *\n     * @private\n     * @param {Object} updateObject\n     */\n\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n\n      extend(this.currentFillData, updateObject);\n    }\n    /**\n     * Get the \"length\" of the drag area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {String} direction The drag direction.\n     * @return {Number|null} The \"length\" (height or width, depending on the direction) of the drag.\n     */\n\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea2[0],\n          baseAreaStartColumn = _baseArea2[1],\n          baseAreaEndRow = _baseArea2[2],\n          baseAreaEndColumn = _baseArea2[3];\n\n      var _dragArea = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea[0],\n          dragAreaStartColumn = _dragArea[1],\n          dragAreaEndRow = _dragArea[2],\n          dragAreaEndColumn = _dragArea[3];\n\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n\n        default:\n          return null;\n      }\n    }\n    /**\n     * Trim the default drag area (containing the selection area) to the drag-only area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The base selection area extended by the drag area.\n     * @param {String} direction Drag direction.\n     * @return {Array|null} Array representing the drag area coordinates.\n     */\n\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea3[0],\n          baseAreaStartColumn = _baseArea3[1],\n          baseAreaEndRow = _baseArea3[2],\n          baseAreaEndColumn = _baseArea3[3];\n\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea2[0],\n          dragAreaStartColumn = _dragArea2[1],\n          dragAreaEndRow = _dragArea2[2],\n          dragAreaEndColumn = _dragArea2[3];\n\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n\n        default:\n          return null;\n      }\n    }\n    /**\n     * Get the to-be-farthest merged cell in the newly filled area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {String} direction The drag direction.\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n     * @return {MergedCellCoords|null}\n     */\n\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea4[0],\n          baseAreaStartColumn = _baseArea4[1],\n          baseAreaEndRow = _baseArea4[2],\n          baseAreaEndColumn = _baseArea4[3];\n\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n\n        default:\n      }\n\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n    /**\n     * Recreate the merged cells after the autofill process.\n     *\n     * @param {Array} changes Changes made.\n     */\n\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n\n          default:\n            return null;\n        }\n      };\n\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n\n              default:\n            }\n          }\n\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n\n      this.currentFillData = null;\n      this.plugin.hot.render();\n    }\n    /**\n     * Get the drag range from the changes made.\n     *\n     * @private\n     * @param {Array} changes The changes made.\n     * @returns {Object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n     */\n\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n    /**\n     * Check if the drag area contains any merged cells.\n     *\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} fullArea The base area extended by the drag area.\n     * @param {String} direction Drag direction.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea3[0],\n          dragAreaStartColumn = _dragArea3[1],\n          dragAreaEndRow = _dragArea3[2],\n          dragAreaEndColumn = _dragArea3[3];\n\n      var topLeft = new CellCoords(dragAreaStartRow, dragAreaStartColumn);\n      var bottomRight = new CellCoords(dragAreaEndRow, dragAreaEndColumn);\n      var dragRange = new CellRange(topLeft, topLeft, bottomRight);\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n\n  return AutofillCalculations;\n}();\n\nexport default AutofillCalculations;"],"mappings":"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"},"metadata":{},"sourceType":"module"}