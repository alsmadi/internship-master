{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.sort\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-own-property-descriptors\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get(target, property, receiver || target);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport { addClass, removeClass } from '../../helpers/dom/element';\nimport { isUndefined, isDefined } from '../../helpers/mixed';\nimport { isObject } from '../../helpers/object';\nimport { arrayMap } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport BasePlugin from '../_base';\nimport { registerPlugin } from './../../plugins';\nimport Hooks from '../../pluginHooks';\nimport { isPressedCtrlKey } from '../../utils/keyStateObserver';\nimport { ColumnStatesManager } from './columnStatesManager';\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from './utils';\nimport { getClassedToRemove, getClassesToAdd } from './domHelpers';\nimport RowsMapper from './rowsMapper';\nimport { rootComparator } from './rootComparator';\nimport { registerRootComparator, sort } from './sortService';\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nvar PLUGIN_KEY = 'columnSorting';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://docs.handsontable.com/pro/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]```\n *\n * @dependencies ObserveChanges\n */\n\nvar ColumnSorting = /*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n  function ColumnSorting(hotInstance) {\n    var _this2;\n    _classCallCheck(this, ColumnSorting);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSorting).call(this, hotInstance));\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {ColumnStatesManager}\n     */\n\n    _this2.columnStatesManager = new ColumnStatesManager();\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this2.rowsMapper = new RowsMapper(_assertThisInitialized(_this2));\n    /**\n     * It blocks the plugin translation, this flag is checked inside `onModifyRow` callback.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this2.blockPluginTranslation = true;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {Map<number, Object>}\n     */\n\n    _this2.columnMetaCache = new Map();\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {String}\n     */\n\n    _this2.pluginKey = PLUGIN_KEY;\n    return _this2;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this3 = this;\n      if (this.enabled) {\n        return;\n      }\n      if (isUndefined(this.hot.getSettings().observeChanges)) {\n        this.enableObserveChangesPlugin();\n      }\n      this.addHook('afterTrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('afterUntrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('modifyRow', function (row, source) {\n        return _this3.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this3.onUnmodifyRow(row, source);\n      });\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this3.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, controller) {\n        return _this3.onBeforeOnCellMouseDown(event, coords, TD, controller);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this3.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this3.onAfterCreateRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function (index, amount) {\n        return _this3.onAfterRemoveRow(index, amount);\n      });\n      this.addHook('afterInit', function () {\n        return _this3.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function (initialLoad) {\n        return _this3.onAfterLoadData(initialLoad);\n      });\n      this.addHook('afterCreateCol', function () {\n        return _this3.onAfterCreateCol();\n      });\n      this.addHook('afterRemoveCol', function () {\n        return _this3.onAfterRemoveCol();\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this4 = this;\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n        _this4.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterRender', function () {\n        _this4.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.rowsMapper.clearMap();\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|Object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var _this5 = this;\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n      if (allowSort === false) {\n        return;\n      }\n      if (sortPossible) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref) {\n          var visualColumn = _ref.column,\n            restOfProperties = _objectWithoutProperties(_ref, [\"column\"]);\n          return _objectSpread({\n            column: _this5.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n        this.sortByPresetSortStates();\n        this.saveAllSortSettings();\n        this.hot.render();\n        this.hot.view.wt.draw(true); // TODO: Workaround? One test won't pass after removal. It should be refactored / described.\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, this.getSortConfig(), sortPossible);\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {Number} [column] Visual column index.\n     * @returns {undefined|Object|Array}\n     */\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      var _this6 = this;\n      var translateColumnToVisual = function translateColumnToVisual(_ref2) {\n        var physicalColumn = _ref2.column,\n          restOfProperties = _objectWithoutProperties(_ref2, [\"column\"]);\n        return _objectSpread({\n          column: _this6.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n      if (isDefined(column)) {\n        var physicalColumn = this.hot.toPhysicalColumn(column);\n        var columnSortState = this.columnStatesManager.getColumnSortState(physicalColumn);\n        if (isDefined(columnSortState)) {\n          return translateColumnToVisual(columnSortState);\n        }\n        return;\n      }\n      var sortStates = this.columnStatesManager.getSortStates();\n      return arrayMap(sortStates, function (columnState) {\n        return translateColumnToVisual(columnState);\n      });\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }```\n     *\n     * @param {undefined|Object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      var _this7 = this;\n\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref3) {\n          var visualColumn = _ref3.column,\n            restOfProperties = _objectWithoutProperties(_ref3, [\"column\"]);\n          return _objectSpread({\n            column: _this7.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {Object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n      return [sortConfig].slice(0, 1);\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      if (Array.isArray(sortConfigs) === false) {\n        return false;\n      }\n      var sortedColumns = sortConfigs.map(function (_ref4) {\n        var column = _ref4.column;\n        return column;\n      });\n      var numberOfColumns = this.hot.countCols();\n      var onlyExistingVisualIndexes = sortedColumns.every(function (visualColumn) {\n        return visualColumn <= numberOfColumns && visualColumn >= 0;\n      });\n      return areValidSortStates(sortConfigs) && onlyExistingVisualIndexes; // We don't translate visual indexes to physical indexes.\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings() {\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n      allSortSettings.initialConfig = this.columnStatesManager.getSortStates();\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {Object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this8 = this;\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n      var translateColumnToVisual = function translateColumnToVisual(_ref5) {\n        var physicalColumn = _ref5.column,\n          restOfProperties = _objectWithoutProperties(_ref5, [\"column\"]);\n        return _objectSpread({\n          column: _this8.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {undefined|Object}\n     */\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n      if (this.columnStatesManager.isColumnSorted(physicalColumn)) {\n        var columnSortConfig = this.getSortConfig(column);\n        var sortOrder = getNextSortOrder(columnSortConfig.sortOrder);\n        if (isDefined(sortOrder)) {\n          columnSortConfig.sortOrder = sortOrder;\n          return columnSortConfig;\n        }\n        return;\n      }\n      var nrOfColumns = this.hot.countCols();\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {Number} columnToChange Visual column index of column which order will be changed.\n     * @param {String} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var physicalColumn = this.hot.toPhysicalColumn(columnToChange);\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(physicalColumn);\n      var isColumnSorted = this.columnStatesManager.isColumnSorted(physicalColumn);\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n      return currentSortConfig;\n    }\n    /**\n     * Saves to cache part of plugins related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Using this function we don't count\n    // merged properties few times.\n  }, {\n    key: \"setMergedPluginSettings\",\n    value: function setMergedPluginSettings(column) {\n      var physicalColumnIndex = this.hot.toPhysicalColumn(column);\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n      var columnMetaHasPluginSettings = Object.hasOwnProperty.call(columnMeta, this.pluginKey);\n      var pluginColumnConfig = columnMetaHasPluginSettings ? columnMeta[this.pluginKey] : {};\n      this.columnMetaCache.set(physicalColumnIndex, Object.assign(storedColumnProperties, pluginMainSettings, pluginColumnConfig));\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from\n    // column meta we call this function.\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n      var actualBlockTranslationFlag = this.blockPluginTranslation;\n      this.blockPluginTranslation = true;\n      if (this.columnMetaCache.size === 0 || this.columnMetaCache.size < this.hot.countCols()) {\n        this.rebuildColumnMetaCache();\n      }\n      var cellMeta = this.hot.getCellMeta(0, column);\n      this.blockPluginTranslation = actualBlockTranslationFlag;\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.get(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Rebuild the column meta cache for all the columns.\n     *\n     * @private\n     */\n  }, {\n    key: \"rebuildColumnMetaCache\",\n    value: function rebuildColumnMetaCache() {\n      var _this9 = this;\n      var numberOfColumns = this.hot.countCols();\n      if (numberOfColumns === 0) {\n        this.columnMetaCache.clear();\n      } else {\n        rangeEach(numberOfColumns - 1, function (visualColumnIndex) {\n          return _this9.setMergedPluginSettings(visualColumnIndex);\n        });\n      }\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {Number} numberOfRows Total number of displayed rows.\n     * @returns {Number}\n     */\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @private\n     */\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates() {\n      var _this10 = this;\n      if (this.columnStatesManager.isListOfSortedColumnsEmpty()) {\n        this.rowsMapper.clearMap();\n        return;\n      }\n      var indexesWithData = [];\n      var sortedColumnsList = this.columnStatesManager.getSortedColumns();\n      var numberOfRows = this.hot.countRows(); // Function `getDataAtCell` won't call the indices translation inside `onModifyRow` callback - we check the `blockPluginTranslation`\n      // flag inside it (we just want to get data not already modified by `columnSorting` plugin translation).\n\n      this.blockPluginTranslation = true;\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortedColumnsList, function (physicalColumn) {\n          return _this10.hot.getDataAtCell(visualRowIndex, _this10.hot.toVisualColumn(physicalColumn));\n        });\n      };\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n      sort(indexesWithData, this.pluginKey, arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.columnStatesManager.getSortOrderOfColumn(physicalColumn);\n      }), arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.getFirstCellSettings(_this10.hot.toVisualColumn(physicalColumn));\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      } // The blockade of the indices translation is released.\n\n      this.blockPluginTranslation = false; // Save all indexes to arrayMapper, a completely new sequence is set by the plugin\n\n      this.rowsMapper._arrayMap = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      this.columnMetaCache.clear();\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {Object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Enables the ObserveChanges plugin.\n     *\n     * @private\n     */\n  }, {\n    key: \"enableObserveChangesPlugin\",\n    value: function enableObserveChangesPlugin() {\n      var _this = this;\n      this.hot._registerTimeout(setTimeout(function () {\n        _this.hot.updateSettings({\n          observeChanges: true\n        });\n      }, 0));\n    }\n    /**\n     * Callback for `modifyRow` hook. Translates visual row index to the sorted row index.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @returns {Number} Physical row index.\n     */\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        var rowInMapper = this.rowsMapper.getValueByIndex(row);\n        row = rowInMapper === null ? row : rowInMapper;\n      }\n      return row;\n    }\n    /**\n     * Callback for `unmodifyRow` hook. Translates sorted row index to visual row index.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @returns {Number} Visual row index.\n     */\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        row = this.rowsMapper.getIndexByValue(row);\n      }\n      return row;\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, physicalColumn, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassedToRemove(headerSpanElement));\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {Object} newSettings New settings object.\n     */\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n      this.columnMetaCache.clear();\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {Boolean} initialLoad flag that determines whether the data has been loaded during the initialization.\n     */\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      this.rowsMapper.clearMap();\n      this.columnMetaCache.clear();\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Callback for the `afterCreateRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the created row.\n     * @param {Number} amount Amount of created rows.\n     */\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      this.rowsMapper.shiftItems(index, amount);\n    }\n    /**\n     * Callback for the `afterRemoveRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the removed row.\n     * @param {Number} amount Amount of removed rows.\n     */\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow(index, amount) {\n      this.rowsMapper.unshiftItems(index, amount);\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterCreateCol` hook.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterCreateCol\",\n    value: function onAfterCreateCol() {\n      this.columnMetaCache.clear();\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterRemoveCol` hook.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterRemoveCol\",\n    value: function onAfterRemoveCol() {\n      this.columnMetaCache.clear();\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {Number} column Visual column index.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.realTarget.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD\n     * @param {Object} blockCalculations\n     */\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        blockCalculations.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n      this.columnStatesManager.destroy();\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n  return ColumnSorting;\n}(BasePlugin);\nregisterPlugin(PLUGIN_KEY, ColumnSorting);\nexport default ColumnSorting;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Object","toString","call","Array","from","isArray","i","arr2","length","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_get","property","receiver","Reflect","get","base","_superPropBase","desc","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","addClass","removeClass","isUndefined","isDefined","isObject","arrayMap","rangeEach","BasePlugin","registerPlugin","Hooks","isPressedCtrlKey","ColumnStatesManager","getNextSortOrder","areValidSortStates","getHeaderSpanElement","isFirstLevelColumnHeader","wasHeaderClickedProperly","getClassedToRemove","getClassesToAdd","RowsMapper","rootComparator","registerRootComparator","sort","APPEND_COLUMN_CONFIG_STRATEGY","REPLACE_COLUMN_CONFIG_STRATEGY","PLUGIN_KEY","getSingleton","register","ColumnSorting","_BasePlugin","hotInstance","_this2","columnStatesManager","rowsMapper","blockPluginTranslation","columnMetaCache","Map","pluginKey","isEnabled","hot","getSettings","enablePlugin","_this3","enabled","observeChanges","enableObserveChangesPlugin","addHook","sortByPresetSortStates","row","onModifyRow","onUnmodifyRow","column","TH","onAfterGetColHeader","event","coords","TD","controller","onBeforeOnCellMouseDown","onAfterOnCellMouseDown","index","amount","onAfterCreateRow","onAfterRemoveRow","loadOrSortBySettings","initialLoad","onAfterLoadData","onAfterCreateCol","onAfterRemoveCol","view","disablePlugin","_this4","clearColHeader","headerSpanElement","updateHeaderClasses","addHookOnce","removeHook","clearMap","sortConfig","_this5","currentSortConfig","getSortConfig","destinationSortConfigs","getNormalizedSortConfigs","sortPossible","areValidSortConfigs","allowSort","runHooks","translateColumnToPhysical","_ref","visualColumn","restOfProperties","toPhysicalColumn","internalSortStates","columnSortConfig","setSortStates","saveAllSortSettings","render","wt","draw","clearSort","isSorted","isListOfSortedColumnsEmpty","_this6","translateColumnToVisual","_ref2","physicalColumn","toVisualColumn","columnSortState","getColumnSortState","sortStates","getSortStates","columnState","setSortConfig","_this7","_ref3","undefined","slice","sortConfigs","sortedColumns","map","_ref4","numberOfColumns","countCols","onlyExistingVisualIndexes","every","allSortSettings","getAllColumnsProperties","initialConfig","getAllSavedSortSettings","_this8","storedAllSortSettings","_ref5","getColumnNextConfig","isColumnSorted","sortOrder","nrOfColumns","Number","isInteger","getNextSortConfig","columnToChange","strategyId","indexOfColumnToChange","getIndexOfColumnInSortQueue","nextColumnConfig","concat","setMergedPluginSettings","physicalColumnIndex","pluginMainSettings","storedColumnProperties","cellMeta","getCellMeta","columnMeta","columnMetaHasPluginSettings","pluginColumnConfig","set","assign","getFirstCellSettings","actualBlockTranslationFlag","size","rebuildColumnMetaCache","cellMetaCopy","_this9","clear","visualColumnIndex","getNumberOfRowsToSort","numberOfRows","settings","maxRows","minSpareRows","_this10","indexesWithData","sortedColumnsList","getSortedColumns","countRows","getDataForSortedColumns","visualRowIndex","getDataAtCell","getSortOrderOfColumn","_visualRowIndex","_arrayMap","indexWithData","sortBySettings","updateAllColumnsProperties","_this","_registerTimeout","setTimeout","updateSettings","pluginName","rowInMapper","getValueByIndex","getIndexByValue","pluginSettingsForColumn","showSortIndicator","indicator","headerActionEnabled","headerAction","_len","args","_key","onUpdateSettings","newSettings","shiftItems","unshiftItems","wasClickableHeaderClicked","realTarget","nodeName","blockCalculations","col","deselectCell","selectColumns","destroy"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/columnSorting/columnSorting.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.every\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.sort\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-own-property-descriptors\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.timers\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { addClass, removeClass } from '../../helpers/dom/element';\nimport { isUndefined, isDefined } from '../../helpers/mixed';\nimport { isObject } from '../../helpers/object';\nimport { arrayMap } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport BasePlugin from '../_base';\nimport { registerPlugin } from './../../plugins';\nimport Hooks from '../../pluginHooks';\nimport { isPressedCtrlKey } from '../../utils/keyStateObserver';\nimport { ColumnStatesManager } from './columnStatesManager';\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from './utils';\nimport { getClassedToRemove, getClassesToAdd } from './domHelpers';\nimport RowsMapper from './rowsMapper';\nimport { rootComparator } from './rootComparator';\nimport { registerRootComparator, sort } from './sortService';\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nvar PLUGIN_KEY = 'columnSorting';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://docs.handsontable.com/pro/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]```\n *\n * @dependencies ObserveChanges\n */\n\nvar ColumnSorting =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n\n  function ColumnSorting(hotInstance) {\n    var _this2;\n\n    _classCallCheck(this, ColumnSorting);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSorting).call(this, hotInstance));\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {ColumnStatesManager}\n     */\n\n    _this2.columnStatesManager = new ColumnStatesManager();\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this2.rowsMapper = new RowsMapper(_assertThisInitialized(_this2));\n    /**\n     * It blocks the plugin translation, this flag is checked inside `onModifyRow` callback.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this2.blockPluginTranslation = true;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {Map<number, Object>}\n     */\n\n    _this2.columnMetaCache = new Map();\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {String}\n     */\n\n    _this2.pluginKey = PLUGIN_KEY;\n    return _this2;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this3 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      if (isUndefined(this.hot.getSettings().observeChanges)) {\n        this.enableObserveChangesPlugin();\n      }\n\n      this.addHook('afterTrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('afterUntrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('modifyRow', function (row, source) {\n        return _this3.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this3.onUnmodifyRow(row, source);\n      });\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this3.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, controller) {\n        return _this3.onBeforeOnCellMouseDown(event, coords, TD, controller);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this3.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this3.onAfterCreateRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function (index, amount) {\n        return _this3.onAfterRemoveRow(index, amount);\n      });\n      this.addHook('afterInit', function () {\n        return _this3.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function (initialLoad) {\n        return _this3.onAfterLoadData(initialLoad);\n      });\n      this.addHook('afterCreateCol', function () {\n        return _this3.onAfterCreateCol();\n      });\n      this.addHook('afterRemoveCol', function () {\n        return _this3.onAfterRemoveCol();\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this4 = this;\n\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n\n        _this4.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterRender', function () {\n        _this4.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.rowsMapper.clearMap();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|Object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var _this5 = this;\n\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n\n      if (allowSort === false) {\n        return;\n      }\n\n      if (sortPossible) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref) {\n          var visualColumn = _ref.column,\n              restOfProperties = _objectWithoutProperties(_ref, [\"column\"]);\n\n          return _objectSpread({\n            column: _this5.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n        this.sortByPresetSortStates();\n        this.saveAllSortSettings();\n        this.hot.render();\n        this.hot.view.wt.draw(true); // TODO: Workaround? One test won't pass after removal. It should be refactored / described.\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, this.getSortConfig(), sortPossible);\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {Number} [column] Visual column index.\n     * @returns {undefined|Object|Array}\n     */\n\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      var _this6 = this;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref2) {\n        var physicalColumn = _ref2.column,\n            restOfProperties = _objectWithoutProperties(_ref2, [\"column\"]);\n\n        return _objectSpread({\n          column: _this6.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(column)) {\n        var physicalColumn = this.hot.toPhysicalColumn(column);\n        var columnSortState = this.columnStatesManager.getColumnSortState(physicalColumn);\n\n        if (isDefined(columnSortState)) {\n          return translateColumnToVisual(columnSortState);\n        }\n\n        return;\n      }\n\n      var sortStates = this.columnStatesManager.getSortStates();\n      return arrayMap(sortStates, function (columnState) {\n        return translateColumnToVisual(columnState);\n      });\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }```\n     *\n     * @param {undefined|Object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      var _this7 = this;\n\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref3) {\n          var visualColumn = _ref3.column,\n              restOfProperties = _objectWithoutProperties(_ref3, [\"column\"]);\n\n          return _objectSpread({\n            column: _this7.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {Object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n\n      return [sortConfig].slice(0, 1);\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      if (Array.isArray(sortConfigs) === false) {\n        return false;\n      }\n\n      var sortedColumns = sortConfigs.map(function (_ref4) {\n        var column = _ref4.column;\n        return column;\n      });\n      var numberOfColumns = this.hot.countCols();\n      var onlyExistingVisualIndexes = sortedColumns.every(function (visualColumn) {\n        return visualColumn <= numberOfColumns && visualColumn >= 0;\n      });\n      return areValidSortStates(sortConfigs) && onlyExistingVisualIndexes; // We don't translate visual indexes to physical indexes.\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings() {\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n      allSortSettings.initialConfig = this.columnStatesManager.getSortStates();\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {Object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this8 = this;\n\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref5) {\n        var physicalColumn = _ref5.column,\n            restOfProperties = _objectWithoutProperties(_ref5, [\"column\"]);\n\n        return _objectSpread({\n          column: _this8.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {undefined|Object}\n     */\n\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n\n      if (this.columnStatesManager.isColumnSorted(physicalColumn)) {\n        var columnSortConfig = this.getSortConfig(column);\n        var sortOrder = getNextSortOrder(columnSortConfig.sortOrder);\n\n        if (isDefined(sortOrder)) {\n          columnSortConfig.sortOrder = sortOrder;\n          return columnSortConfig;\n        }\n\n        return;\n      }\n\n      var nrOfColumns = this.hot.countCols();\n\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {Number} columnToChange Visual column index of column which order will be changed.\n     * @param {String} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var physicalColumn = this.hot.toPhysicalColumn(columnToChange);\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(physicalColumn);\n      var isColumnSorted = this.columnStatesManager.isColumnSorted(physicalColumn);\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n\n      return currentSortConfig;\n    }\n    /**\n     * Saves to cache part of plugins related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Using this function we don't count\n    // merged properties few times.\n\n  }, {\n    key: \"setMergedPluginSettings\",\n    value: function setMergedPluginSettings(column) {\n      var physicalColumnIndex = this.hot.toPhysicalColumn(column);\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n      var columnMetaHasPluginSettings = Object.hasOwnProperty.call(columnMeta, this.pluginKey);\n      var pluginColumnConfig = columnMetaHasPluginSettings ? columnMeta[this.pluginKey] : {};\n      this.columnMetaCache.set(physicalColumnIndex, Object.assign(storedColumnProperties, pluginMainSettings, pluginColumnConfig));\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from\n    // column meta we call this function.\n\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n      var actualBlockTranslationFlag = this.blockPluginTranslation;\n      this.blockPluginTranslation = true;\n\n      if (this.columnMetaCache.size === 0 || this.columnMetaCache.size < this.hot.countCols()) {\n        this.rebuildColumnMetaCache();\n      }\n\n      var cellMeta = this.hot.getCellMeta(0, column);\n      this.blockPluginTranslation = actualBlockTranslationFlag;\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.get(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Rebuild the column meta cache for all the columns.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"rebuildColumnMetaCache\",\n    value: function rebuildColumnMetaCache() {\n      var _this9 = this;\n\n      var numberOfColumns = this.hot.countCols();\n\n      if (numberOfColumns === 0) {\n        this.columnMetaCache.clear();\n      } else {\n        rangeEach(numberOfColumns - 1, function (visualColumnIndex) {\n          return _this9.setMergedPluginSettings(visualColumnIndex);\n        });\n      }\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {Number} numberOfRows Total number of displayed rows.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates() {\n      var _this10 = this;\n\n      if (this.columnStatesManager.isListOfSortedColumnsEmpty()) {\n        this.rowsMapper.clearMap();\n        return;\n      }\n\n      var indexesWithData = [];\n      var sortedColumnsList = this.columnStatesManager.getSortedColumns();\n      var numberOfRows = this.hot.countRows(); // Function `getDataAtCell` won't call the indices translation inside `onModifyRow` callback - we check the `blockPluginTranslation`\n      // flag inside it (we just want to get data not already modified by `columnSorting` plugin translation).\n\n      this.blockPluginTranslation = true;\n\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortedColumnsList, function (physicalColumn) {\n          return _this10.hot.getDataAtCell(visualRowIndex, _this10.hot.toVisualColumn(physicalColumn));\n        });\n      };\n\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n\n      sort(indexesWithData, this.pluginKey, arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.columnStatesManager.getSortOrderOfColumn(physicalColumn);\n      }), arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.getFirstCellSettings(_this10.hot.toVisualColumn(physicalColumn));\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      } // The blockade of the indices translation is released.\n\n\n      this.blockPluginTranslation = false; // Save all indexes to arrayMapper, a completely new sequence is set by the plugin\n\n      this.rowsMapper._arrayMap = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      this.columnMetaCache.clear();\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {Object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Enables the ObserveChanges plugin.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"enableObserveChangesPlugin\",\n    value: function enableObserveChangesPlugin() {\n      var _this = this;\n\n      this.hot._registerTimeout(setTimeout(function () {\n        _this.hot.updateSettings({\n          observeChanges: true\n        });\n      }, 0));\n    }\n    /**\n     * Callback for `modifyRow` hook. Translates visual row index to the sorted row index.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @returns {Number} Physical row index.\n     */\n\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        var rowInMapper = this.rowsMapper.getValueByIndex(row);\n        row = rowInMapper === null ? row : rowInMapper;\n      }\n\n      return row;\n    }\n    /**\n     * Callback for `unmodifyRow` hook. Translates sorted row index to visual row index.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @returns {Number} Visual row index.\n     */\n\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        row = this.rowsMapper.getIndexByValue(row);\n      }\n\n      return row;\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, physicalColumn, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassedToRemove(headerSpanElement));\n\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {Object} newSettings New settings object.\n     */\n\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n\n      this.columnMetaCache.clear();\n\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {Boolean} initialLoad flag that determines whether the data has been loaded during the initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      this.rowsMapper.clearMap();\n      this.columnMetaCache.clear();\n\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Callback for the `afterCreateRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the created row.\n     * @param {Number} amount Amount of created rows.\n     */\n\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      this.rowsMapper.shiftItems(index, amount);\n    }\n    /**\n     * Callback for the `afterRemoveRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the removed row.\n     * @param {Number} amount Amount of removed rows.\n     */\n\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow(index, amount) {\n      this.rowsMapper.unshiftItems(index, amount);\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterCreateCol` hook.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterCreateCol\",\n    value: function onAfterCreateCol() {\n      this.columnMetaCache.clear();\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterRemoveCol` hook.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterRemoveCol\",\n    value: function onAfterRemoveCol() {\n      this.columnMetaCache.clear();\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {Number} column Visual column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.realTarget.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD\n     * @param {Object} blockCalculations\n     */\n\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        blockCalculations.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n      this.columnStatesManager.destroy();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return ColumnSorting;\n}(BasePlugin);\n\nregisterPlugin(PLUGIN_KEY, ColumnSorting);\nexport default ColumnSorting;"],"mappings":"AAAA,OAAO,2BAA2B;AAClC,OAAO,uCAAuC;AAC9C,OAAO,oCAAoC;AAC3C,OAAO,iCAAiC;AAExC,OAAO,iCAAiC;AAExC,OAAO,+BAA+B;AACtC,OAAO,mCAAmC;AAC1C,OAAO,mCAAmC;AAC1C,OAAO,8BAA8B;AACrC,OAAO,gCAAgC;AACvC,OAAO,+BAA+B;AACtC,OAAO,wBAAwB;AAC/B,OAAO,uCAAuC;AAC9C,OAAO,sCAAsC;AAC7C,OAAO,kCAAkC;AACzC,OAAO,uDAAuD;AAC9D,OAAO,wDAAwD;AAC/D,OAAO,4CAA4C;AACnD,OAAO,gCAAgC;AACvC,OAAO,4CAA4C;AACnD,OAAO,qCAAqC;AAC5C,OAAO,gCAAgC;AACvC,OAAO,qCAAqC;AAC5C,OAAO,oCAAoC;AAC3C,OAAO,8CAA8C;AACrD,OAAO,8CAA8C;AAGrD,SAASA,OAAO,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAEH,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;MAAE,OAAO,OAAOA,GAAG;IAAE,CAAC;EAAE,CAAC,MAAM;IAAED,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;IAAE,CAAC;EAAE;EAAE,OAAOD,OAAO,CAACC,GAAG,CAAC;AAAE;AAEzX,SAASK,kBAAkB,CAACC,GAAG,EAAE;EAAE,OAAOC,kBAAkB,CAACD,GAAG,CAAC,IAAIE,gBAAgB,CAACF,GAAG,CAAC,IAAIG,kBAAkB,EAAE;AAAE;AAEpH,SAASA,kBAAkB,GAAG;EAAE,MAAM,IAAIC,SAAS,CAAC,iDAAiD,CAAC;AAAE;AAExG,SAASF,gBAAgB,CAACG,IAAI,EAAE;EAAE,IAAIV,MAAM,CAACC,QAAQ,IAAIU,MAAM,CAACD,IAAI,CAAC,IAAIC,MAAM,CAACR,SAAS,CAACS,QAAQ,CAACC,IAAI,CAACH,IAAI,CAAC,KAAK,oBAAoB,EAAE,OAAOI,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC;AAAE;AAEjK,SAASJ,kBAAkB,CAACD,GAAG,EAAE;EAAE,IAAIS,KAAK,CAACE,OAAO,CAACX,GAAG,CAAC,EAAE;IAAE,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAG,IAAIJ,KAAK,CAACT,GAAG,CAACc,MAAM,CAAC,EAAEF,CAAC,GAAGZ,GAAG,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MAAEC,IAAI,CAACD,CAAC,CAAC,GAAGZ,GAAG,CAACY,CAAC,CAAC;IAAE;IAAE,OAAOC,IAAI;EAAE;AAAE;AAErK,SAASE,OAAO,CAACC,MAAM,EAAEC,cAAc,EAAE;EAAE,IAAIC,IAAI,GAAGZ,MAAM,CAACY,IAAI,CAACF,MAAM,CAAC;EAAE,IAAIV,MAAM,CAACa,qBAAqB,EAAE;IAAE,IAAIC,OAAO,GAAGd,MAAM,CAACa,qBAAqB,CAACH,MAAM,CAAC;IAAE,IAAIC,cAAc,EAAEG,OAAO,GAAGA,OAAO,CAACC,MAAM,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAOhB,MAAM,CAACiB,wBAAwB,CAACP,MAAM,EAAEM,GAAG,CAAC,CAACE,UAAU;IAAE,CAAC,CAAC;IAAEN,IAAI,CAACO,IAAI,CAACC,KAAK,CAACR,IAAI,EAAEE,OAAO,CAAC;EAAE;EAAE,OAAOF,IAAI;AAAE;AAEpV,SAASS,aAAa,CAACC,MAAM,EAAE;EAAE,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,SAAS,CAACf,MAAM,EAAEF,CAAC,EAAE,EAAE;IAAE,IAAIkB,MAAM,GAAGD,SAAS,CAACjB,CAAC,CAAC,IAAI,IAAI,GAAGiB,SAAS,CAACjB,CAAC,CAAC,GAAG,CAAC,CAAC;IAAE,IAAIA,CAAC,GAAG,CAAC,EAAE;MAAEG,OAAO,CAACT,MAAM,CAACwB,MAAM,CAAC,EAAE,IAAI,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;QAAEC,eAAe,CAACL,MAAM,EAAEI,GAAG,EAAEF,MAAM,CAACE,GAAG,CAAC,CAAC;MAAE,CAAC,CAAC;IAAE,CAAC,MAAM,IAAI1B,MAAM,CAAC4B,yBAAyB,EAAE;MAAE5B,MAAM,CAAC6B,gBAAgB,CAACP,MAAM,EAAEtB,MAAM,CAAC4B,yBAAyB,CAACJ,MAAM,CAAC,CAAC;IAAE,CAAC,MAAM;MAAEf,OAAO,CAACT,MAAM,CAACwB,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;QAAE1B,MAAM,CAAC8B,cAAc,CAACR,MAAM,EAAEI,GAAG,EAAE1B,MAAM,CAACiB,wBAAwB,CAACO,MAAM,EAAEE,GAAG,CAAC,CAAC;MAAE,CAAC,CAAC;IAAE;EAAE;EAAE,OAAOJ,MAAM;AAAE;AAErhB,SAASK,eAAe,CAACvC,GAAG,EAAEsC,GAAG,EAAEK,KAAK,EAAE;EAAE,IAAIL,GAAG,IAAItC,GAAG,EAAE;IAAEY,MAAM,CAAC8B,cAAc,CAAC1C,GAAG,EAAEsC,GAAG,EAAE;MAAEK,KAAK,EAAEA,KAAK;MAAEb,UAAU,EAAE,IAAI;MAAEc,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAE7C,GAAG,CAACsC,GAAG,CAAC,GAAGK,KAAK;EAAE;EAAE,OAAO3C,GAAG;AAAE;AAEhN,SAAS8C,wBAAwB,CAACV,MAAM,EAAEW,QAAQ,EAAE;EAAE,IAAIX,MAAM,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC;EAAE,IAAIF,MAAM,GAAGc,6BAA6B,CAACZ,MAAM,EAAEW,QAAQ,CAAC;EAAE,IAAIT,GAAG,EAAEpB,CAAC;EAAE,IAAIN,MAAM,CAACa,qBAAqB,EAAE;IAAE,IAAIwB,gBAAgB,GAAGrC,MAAM,CAACa,qBAAqB,CAACW,MAAM,CAAC;IAAE,KAAKlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,gBAAgB,CAAC7B,MAAM,EAAEF,CAAC,EAAE,EAAE;MAAEoB,GAAG,GAAGW,gBAAgB,CAAC/B,CAAC,CAAC;MAAE,IAAI6B,QAAQ,CAACG,OAAO,CAACZ,GAAG,CAAC,IAAI,CAAC,EAAE;MAAU,IAAI,CAAC1B,MAAM,CAACR,SAAS,CAAC+C,oBAAoB,CAACrC,IAAI,CAACsB,MAAM,EAAEE,GAAG,CAAC,EAAE;MAAUJ,MAAM,CAACI,GAAG,CAAC,GAAGF,MAAM,CAACE,GAAG,CAAC;IAAE;EAAE;EAAE,OAAOJ,MAAM;AAAE;AAE3e,SAASc,6BAA6B,CAACZ,MAAM,EAAEW,QAAQ,EAAE;EAAE,IAAIX,MAAM,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC;EAAE,IAAIF,MAAM,GAAG,CAAC,CAAC;EAAE,IAAIkB,UAAU,GAAGxC,MAAM,CAACY,IAAI,CAACY,MAAM,CAAC;EAAE,IAAIE,GAAG,EAAEpB,CAAC;EAAE,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,UAAU,CAAChC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAAEoB,GAAG,GAAGc,UAAU,CAAClC,CAAC,CAAC;IAAE,IAAI6B,QAAQ,CAACG,OAAO,CAACZ,GAAG,CAAC,IAAI,CAAC,EAAE;IAAUJ,MAAM,CAACI,GAAG,CAAC,GAAGF,MAAM,CAACE,GAAG,CAAC;EAAE;EAAE,OAAOJ,MAAM;AAAE;AAElT,SAASmB,eAAe,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAI7C,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAAS8C,iBAAiB,CAACtB,MAAM,EAAEuB,KAAK,EAAE;EAAE,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuC,KAAK,CAACrC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAAE,IAAIwC,UAAU,GAAGD,KAAK,CAACvC,CAAC,CAAC;IAAEwC,UAAU,CAAC5B,UAAU,GAAG4B,UAAU,CAAC5B,UAAU,IAAI,KAAK;IAAE4B,UAAU,CAACd,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIc,UAAU,EAAEA,UAAU,CAACb,QAAQ,GAAG,IAAI;IAAEjC,MAAM,CAAC8B,cAAc,CAACR,MAAM,EAAEwB,UAAU,CAACpB,GAAG,EAAEoB,UAAU,CAAC;EAAE;AAAE;AAE5T,SAASC,YAAY,CAACJ,WAAW,EAAEK,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEJ,iBAAiB,CAACD,WAAW,CAACnD,SAAS,EAAEwD,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEL,iBAAiB,CAACD,WAAW,EAAEM,WAAW,CAAC;EAAE,OAAON,WAAW;AAAE;AAEtN,SAASO,0BAA0B,CAACC,IAAI,EAAEjD,IAAI,EAAE;EAAE,IAAIA,IAAI,KAAKf,OAAO,CAACe,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,UAAU,CAAC,EAAE;IAAE,OAAOA,IAAI;EAAE;EAAE,OAAOkD,sBAAsB,CAACD,IAAI,CAAC;AAAE;AAEhL,SAASC,sBAAsB,CAACD,IAAI,EAAE;EAAE,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAE,MAAM,IAAIE,cAAc,CAAC,2DAA2D,CAAC;EAAE;EAAE,OAAOF,IAAI;AAAE;AAErK,SAASG,IAAI,CAAChC,MAAM,EAAEiC,QAAQ,EAAEC,QAAQ,EAAE;EAAE,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,CAACC,GAAG,EAAE;IAAEJ,IAAI,GAAGG,OAAO,CAACC,GAAG;EAAE,CAAC,MAAM;IAAEJ,IAAI,GAAG,SAASA,IAAI,CAAChC,MAAM,EAAEiC,QAAQ,EAAEC,QAAQ,EAAE;MAAE,IAAIG,IAAI,GAAGC,cAAc,CAACtC,MAAM,EAAEiC,QAAQ,CAAC;MAAE,IAAI,CAACI,IAAI,EAAE;MAAQ,IAAIE,IAAI,GAAG7D,MAAM,CAACiB,wBAAwB,CAAC0C,IAAI,EAAEJ,QAAQ,CAAC;MAAE,IAAIM,IAAI,CAACH,GAAG,EAAE;QAAE,OAAOG,IAAI,CAACH,GAAG,CAACxD,IAAI,CAACsD,QAAQ,CAAC;MAAE;MAAE,OAAOK,IAAI,CAAC9B,KAAK;IAAE,CAAC;EAAE;EAAE,OAAOuB,IAAI,CAAChC,MAAM,EAAEiC,QAAQ,EAAEC,QAAQ,IAAIlC,MAAM,CAAC;AAAE;AAE1a,SAASsC,cAAc,CAAClD,MAAM,EAAE6C,QAAQ,EAAE;EAAE,OAAO,CAACvD,MAAM,CAACR,SAAS,CAACsE,cAAc,CAAC5D,IAAI,CAACQ,MAAM,EAAE6C,QAAQ,CAAC,EAAE;IAAE7C,MAAM,GAAGqD,eAAe,CAACrD,MAAM,CAAC;IAAE,IAAIA,MAAM,KAAK,IAAI,EAAE;EAAO;EAAE,OAAOA,MAAM;AAAE;AAE7L,SAASqD,eAAe,CAACC,CAAC,EAAE;EAAED,eAAe,GAAG/D,MAAM,CAACiE,cAAc,GAAGjE,MAAM,CAACkE,cAAc,GAAG,SAASH,eAAe,CAACC,CAAC,EAAE;IAAE,OAAOA,CAAC,CAACG,SAAS,IAAInE,MAAM,CAACkE,cAAc,CAACF,CAAC,CAAC;EAAE,CAAC;EAAE,OAAOD,eAAe,CAACC,CAAC,CAAC;AAAE;AAE5M,SAASI,SAAS,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAAE,IAAI,OAAOA,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,IAAI,EAAE;IAAE,MAAM,IAAIxE,SAAS,CAAC,oDAAoD,CAAC;EAAE;EAAEuE,QAAQ,CAAC7E,SAAS,GAAGQ,MAAM,CAACuE,MAAM,CAACD,UAAU,IAAIA,UAAU,CAAC9E,SAAS,EAAE;IAAED,WAAW,EAAE;MAAEwC,KAAK,EAAEsC,QAAQ;MAAEpC,QAAQ,EAAE,IAAI;MAAED,YAAY,EAAE;IAAK;EAAE,CAAC,CAAC;EAAE,IAAIsC,UAAU,EAAEE,eAAe,CAACH,QAAQ,EAAEC,UAAU,CAAC;AAAE;AAEhY,SAASE,eAAe,CAACR,CAAC,EAAES,CAAC,EAAE;EAAED,eAAe,GAAGxE,MAAM,CAACiE,cAAc,IAAI,SAASO,eAAe,CAACR,CAAC,EAAES,CAAC,EAAE;IAAET,CAAC,CAACG,SAAS,GAAGM,CAAC;IAAE,OAAOT,CAAC;EAAE,CAAC;EAAE,OAAOQ,eAAe,CAACR,CAAC,EAAES,CAAC,CAAC;AAAE;AAEzK,SAASC,QAAQ,EAAEC,WAAW,QAAQ,2BAA2B;AACjE,SAASC,WAAW,EAAEC,SAAS,QAAQ,qBAAqB;AAC5D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,SAAS,QAAQ,sBAAsB;AAChD,OAAOC,UAAU,MAAM,UAAU;AACjC,SAASC,cAAc,QAAQ,iBAAiB;AAChD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,gBAAgB,EAAEC,kBAAkB,EAAEC,oBAAoB,EAAEC,wBAAwB,EAAEC,wBAAwB,QAAQ,SAAS;AACxI,SAASC,kBAAkB,EAAEC,eAAe,QAAQ,cAAc;AAClE,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,sBAAsB,EAAEC,IAAI,QAAQ,eAAe;AAC5D,IAAIC,6BAA6B,GAAG,QAAQ;AAC5C,IAAIC,8BAA8B,GAAG,SAAS;AAC9C,IAAIC,UAAU,GAAG,eAAe;AAChCJ,sBAAsB,CAACI,UAAU,EAAEL,cAAc,CAAC;AAClDX,KAAK,CAACiB,YAAY,EAAE,CAACC,QAAQ,CAAC,kBAAkB,CAAC;AACjDlB,KAAK,CAACiB,YAAY,EAAE,CAACC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GACjB;AACA,UAAUC,WAAW,EAAE;EACrBnC,SAAS,CAACkC,aAAa,EAAEC,WAAW,CAAC;EAErC,SAASD,aAAa,CAACE,WAAW,EAAE;IAClC,IAAIC,MAAM;IAEVhE,eAAe,CAAC,IAAI,EAAE6D,aAAa,CAAC;IAEpCG,MAAM,GAAGvD,0BAA0B,CAAC,IAAI,EAAEa,eAAe,CAACuC,aAAa,CAAC,CAACpG,IAAI,CAAC,IAAI,EAAEsG,WAAW,CAAC,CAAC;IACjG;AACJ;AACA;AACA;AACA;AACA;;IAEIC,MAAM,CAACC,mBAAmB,GAAG,IAAIrB,mBAAmB,EAAE;IACtD;AACJ;AACA;AACA;AACA;AACA;;IAEIoB,MAAM,CAACE,UAAU,GAAG,IAAId,UAAU,CAACzC,sBAAsB,CAACqD,MAAM,CAAC,CAAC;IAClE;AACJ;AACA;AACA;AACA;AACA;;IAEIA,MAAM,CAACG,sBAAsB,GAAG,IAAI;IACpC;AACJ;AACA;AACA;AACA;AACA;;IAEIH,MAAM,CAACI,eAAe,GAAG,IAAIC,GAAG,EAAE;IAClC;AACJ;AACA;AACA;AACA;AACA;;IAEIL,MAAM,CAACM,SAAS,GAAGZ,UAAU;IAC7B,OAAOM,MAAM;EACf;EACA;AACF;AACA;AACA;AACA;AACA;;EAGE1D,YAAY,CAACuD,aAAa,EAAE,CAAC;IAC3B5E,GAAG,EAAE,WAAW;IAChBK,KAAK,EAAE,SAASiF,SAAS,GAAG;MAC1B,OAAO,CAAC,CAAC,IAAI,CAACC,GAAG,CAACC,WAAW,EAAE,CAAC,IAAI,CAACH,SAAS,CAAC;IACjD;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDrF,GAAG,EAAE,cAAc;IACnBK,KAAK,EAAE,SAASoF,YAAY,GAAG;MAC7B,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAI,IAAI,CAACC,OAAO,EAAE;QAChB;MACF;MAEA,IAAIzC,WAAW,CAAC,IAAI,CAACqC,GAAG,CAACC,WAAW,EAAE,CAACI,cAAc,CAAC,EAAE;QACtD,IAAI,CAACC,0BAA0B,EAAE;MACnC;MAEA,IAAI,CAACC,OAAO,CAAC,cAAc,EAAE,YAAY;QACvC,OAAOJ,MAAM,CAACK,sBAAsB,EAAE;MACxC,CAAC,CAAC;MACF,IAAI,CAACD,OAAO,CAAC,gBAAgB,EAAE,YAAY;QACzC,OAAOJ,MAAM,CAACK,sBAAsB,EAAE;MACxC,CAAC,CAAC;MACF,IAAI,CAACD,OAAO,CAAC,WAAW,EAAE,UAAUE,GAAG,EAAElG,MAAM,EAAE;QAC/C,OAAO4F,MAAM,CAACO,WAAW,CAACD,GAAG,EAAElG,MAAM,CAAC;MACxC,CAAC,CAAC;MACF,IAAI,CAACgG,OAAO,CAAC,aAAa,EAAE,UAAUE,GAAG,EAAElG,MAAM,EAAE;QACjD,OAAO4F,MAAM,CAACQ,aAAa,CAACF,GAAG,EAAElG,MAAM,CAAC;MAC1C,CAAC,CAAC;MACF,IAAI,CAACgG,OAAO,CAAC,mBAAmB,EAAE,UAAUK,MAAM,EAAEC,EAAE,EAAE;QACtD,OAAOV,MAAM,CAACW,mBAAmB,CAACF,MAAM,EAAEC,EAAE,CAAC;MAC/C,CAAC,CAAC;MACF,IAAI,CAACN,OAAO,CAAC,uBAAuB,EAAE,UAAUQ,KAAK,EAAEC,MAAM,EAAEC,EAAE,EAAEC,UAAU,EAAE;QAC7E,OAAOf,MAAM,CAACgB,uBAAuB,CAACJ,KAAK,EAAEC,MAAM,EAAEC,EAAE,EAAEC,UAAU,CAAC;MACtE,CAAC,CAAC;MACF,IAAI,CAACX,OAAO,CAAC,sBAAsB,EAAE,UAAUQ,KAAK,EAAE1G,MAAM,EAAE;QAC5D,OAAO8F,MAAM,CAACiB,sBAAsB,CAACL,KAAK,EAAE1G,MAAM,CAAC;MACrD,CAAC,CAAC;MACF,IAAI,CAACkG,OAAO,CAAC,gBAAgB,EAAE,UAAUc,KAAK,EAAEC,MAAM,EAAE;QACtD,OAAOnB,MAAM,CAACoB,gBAAgB,CAACF,KAAK,EAAEC,MAAM,CAAC;MAC/C,CAAC,CAAC;MACF,IAAI,CAACf,OAAO,CAAC,gBAAgB,EAAE,UAAUc,KAAK,EAAEC,MAAM,EAAE;QACtD,OAAOnB,MAAM,CAACqB,gBAAgB,CAACH,KAAK,EAAEC,MAAM,CAAC;MAC/C,CAAC,CAAC;MACF,IAAI,CAACf,OAAO,CAAC,WAAW,EAAE,YAAY;QACpC,OAAOJ,MAAM,CAACsB,oBAAoB,EAAE;MACtC,CAAC,CAAC;MACF,IAAI,CAAClB,OAAO,CAAC,eAAe,EAAE,UAAUmB,WAAW,EAAE;QACnD,OAAOvB,MAAM,CAACwB,eAAe,CAACD,WAAW,CAAC;MAC5C,CAAC,CAAC;MACF,IAAI,CAACnB,OAAO,CAAC,gBAAgB,EAAE,YAAY;QACzC,OAAOJ,MAAM,CAACyB,gBAAgB,EAAE;MAClC,CAAC,CAAC;MACF,IAAI,CAACrB,OAAO,CAAC,gBAAgB,EAAE,YAAY;QACzC,OAAOJ,MAAM,CAAC0B,gBAAgB,EAAE;MAClC,CAAC,CAAC,CAAC,CAAC;;MAEJ,IAAI,IAAI,CAAC7B,GAAG,CAAC8B,IAAI,EAAE;QACjB,IAAI,CAACL,oBAAoB,EAAE;MAC7B;MAEApF,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAS,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,CAACU,IAAI,CAAC,IAAI,CAAC;IACjF;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDwB,GAAG,EAAE,eAAe;IACpBK,KAAK,EAAE,SAASiH,aAAa,GAAG;MAC9B,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAIC,cAAc,GAAG,SAASA,cAAc,CAACrB,MAAM,EAAEC,EAAE,EAAE;QACvD,IAAIqB,iBAAiB,GAAG3D,oBAAoB,CAACsC,EAAE,CAAC;QAEhD,IAAIrC,wBAAwB,CAACoC,MAAM,EAAEC,EAAE,CAAC,KAAK,KAAK,IAAIqB,iBAAiB,KAAK,IAAI,EAAE;UAChF;QACF;QAEAF,MAAM,CAACG,mBAAmB,CAACD,iBAAiB,CAAC;MAC/C,CAAC,CAAC,CAAC;;MAGH,IAAI,CAAClC,GAAG,CAACO,OAAO,CAAC,mBAAmB,EAAE0B,cAAc,CAAC;MACrD,IAAI,CAACjC,GAAG,CAACoC,WAAW,CAAC,aAAa,EAAE,YAAY;QAC9CJ,MAAM,CAAChC,GAAG,CAACqC,UAAU,CAAC,mBAAmB,EAAEJ,cAAc,CAAC;MAC5D,CAAC,CAAC;MACF,IAAI,CAACvC,UAAU,CAAC4C,QAAQ,EAAE;MAE1BjG,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAS,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,CAACU,IAAI,CAAC,IAAI,CAAC;IAClF,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDwB,GAAG,EAAE,MAAM;IACXK,KAAK,EAAE,SAASiE,IAAI,CAACwD,UAAU,EAAE;MAC/B,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAIC,iBAAiB,GAAG,IAAI,CAACC,aAAa,EAAE,CAAC,CAAC;;MAE9C,IAAIC,sBAAsB,GAAG,IAAI,CAACC,wBAAwB,CAACL,UAAU,CAAC;MACtE,IAAIM,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAACH,sBAAsB,CAAC;MACnE,IAAII,SAAS,GAAG,IAAI,CAAC/C,GAAG,CAACgD,QAAQ,CAAC,kBAAkB,EAAEP,iBAAiB,EAAEE,sBAAsB,EAAEE,YAAY,CAAC;MAE9G,IAAIE,SAAS,KAAK,KAAK,EAAE;QACvB;MACF;MAEA,IAAIF,YAAY,EAAE;QAChB,IAAII,yBAAyB,GAAG,SAASA,yBAAyB,CAACC,IAAI,EAAE;UACvE,IAAIC,YAAY,GAAGD,IAAI,CAACtC,MAAM;YAC1BwC,gBAAgB,GAAGnI,wBAAwB,CAACiI,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;UAEjE,OAAO9I,aAAa,CAAC;YACnBwG,MAAM,EAAE4B,MAAM,CAACxC,GAAG,CAACqD,gBAAgB,CAACF,YAAY;UAClD,CAAC,EAAEC,gBAAgB,CAAC;QACtB,CAAC;QAED,IAAIE,kBAAkB,GAAGxF,QAAQ,CAAC6E,sBAAsB,EAAE,UAAUY,gBAAgB,EAAE;UACpF,OAAON,yBAAyB,CAACM,gBAAgB,CAAC;QACpD,CAAC,CAAC;QACF,IAAI,CAAC9D,mBAAmB,CAAC+D,aAAa,CAACF,kBAAkB,CAAC;QAC1D,IAAI,CAAC9C,sBAAsB,EAAE;QAC7B,IAAI,CAACiD,mBAAmB,EAAE;QAC1B,IAAI,CAACzD,GAAG,CAAC0D,MAAM,EAAE;QACjB,IAAI,CAAC1D,GAAG,CAAC8B,IAAI,CAAC6B,EAAE,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MAC/B;;MAEA,IAAI,CAAC5D,GAAG,CAACgD,QAAQ,CAAC,iBAAiB,EAAEP,iBAAiB,EAAE,IAAI,CAACC,aAAa,EAAE,EAAEG,YAAY,CAAC;IAC7F;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDpI,GAAG,EAAE,WAAW;IAChBK,KAAK,EAAE,SAAS+I,SAAS,GAAG;MAC1B,IAAI,CAAC9E,IAAI,CAAC,EAAE,CAAC;IACf;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDtE,GAAG,EAAE,UAAU;IACfK,KAAK,EAAE,SAASgJ,QAAQ,GAAG;MACzB,OAAO,IAAI,CAAC1D,OAAO,IAAI,CAAC,IAAI,CAACX,mBAAmB,CAACsE,0BAA0B,EAAE;IAC/E;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDtJ,GAAG,EAAE,eAAe;IACpBK,KAAK,EAAE,SAAS4H,aAAa,CAAC9B,MAAM,EAAE;MACpC,IAAIoD,MAAM,GAAG,IAAI;MAEjB,IAAIC,uBAAuB,GAAG,SAASA,uBAAuB,CAACC,KAAK,EAAE;QACpE,IAAIC,cAAc,GAAGD,KAAK,CAACtD,MAAM;UAC7BwC,gBAAgB,GAAGnI,wBAAwB,CAACiJ,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC;QAElE,OAAO9J,aAAa,CAAC;UACnBwG,MAAM,EAAEoD,MAAM,CAAChE,GAAG,CAACoE,cAAc,CAACD,cAAc;QAClD,CAAC,EAAEf,gBAAgB,CAAC;MACtB,CAAC;MAED,IAAIxF,SAAS,CAACgD,MAAM,CAAC,EAAE;QACrB,IAAIuD,cAAc,GAAG,IAAI,CAACnE,GAAG,CAACqD,gBAAgB,CAACzC,MAAM,CAAC;QACtD,IAAIyD,eAAe,GAAG,IAAI,CAAC5E,mBAAmB,CAAC6E,kBAAkB,CAACH,cAAc,CAAC;QAEjF,IAAIvG,SAAS,CAACyG,eAAe,CAAC,EAAE;UAC9B,OAAOJ,uBAAuB,CAACI,eAAe,CAAC;QACjD;QAEA;MACF;MAEA,IAAIE,UAAU,GAAG,IAAI,CAAC9E,mBAAmB,CAAC+E,aAAa,EAAE;MACzD,OAAO1G,QAAQ,CAACyG,UAAU,EAAE,UAAUE,WAAW,EAAE;QACjD,OAAOR,uBAAuB,CAACQ,WAAW,CAAC;MAC7C,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDhK,GAAG,EAAE,eAAe;IACpBK,KAAK,EAAE,SAAS4J,aAAa,CAACnC,UAAU,EAAE;MACxC,IAAIoC,MAAM,GAAG,IAAI;;MAEjB;MACA,IAAIhC,sBAAsB,GAAG,IAAI,CAACC,wBAAwB,CAACL,UAAU,CAAC;MAEtE,IAAI,IAAI,CAACO,mBAAmB,CAACH,sBAAsB,CAAC,EAAE;QACpD,IAAIM,yBAAyB,GAAG,SAASA,yBAAyB,CAAC2B,KAAK,EAAE;UACxE,IAAIzB,YAAY,GAAGyB,KAAK,CAAChE,MAAM;YAC3BwC,gBAAgB,GAAGnI,wBAAwB,CAAC2J,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC;UAElE,OAAOxK,aAAa,CAAC;YACnBwG,MAAM,EAAE+D,MAAM,CAAC3E,GAAG,CAACqD,gBAAgB,CAACF,YAAY;UAClD,CAAC,EAAEC,gBAAgB,CAAC;QACtB,CAAC;QAED,IAAIE,kBAAkB,GAAGxF,QAAQ,CAAC6E,sBAAsB,EAAE,UAAUY,gBAAgB,EAAE;UACpF,OAAON,yBAAyB,CAACM,gBAAgB,CAAC;QACpD,CAAC,CAAC;QACF,IAAI,CAAC9D,mBAAmB,CAAC+D,aAAa,CAACF,kBAAkB,CAAC;MAC5D;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD7I,GAAG,EAAE,0BAA0B;IAC/BK,KAAK,EAAE,SAAS8H,wBAAwB,GAAG;MACzC,IAAIL,UAAU,GAAGjI,SAAS,CAACf,MAAM,GAAG,CAAC,IAAIe,SAAS,CAAC,CAAC,CAAC,KAAKuK,SAAS,GAAGvK,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;MAEvF,IAAIpB,KAAK,CAACE,OAAO,CAACmJ,UAAU,CAAC,EAAE;QAC7B,OAAOA,UAAU,CAACuC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAC/B;MAEA,OAAO,CAACvC,UAAU,CAAC,CAACuC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACjC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDrK,GAAG,EAAE,qBAAqB;IAC1BK,KAAK,EAAE,SAASgI,mBAAmB,CAACiC,WAAW,EAAE;MAC/C,IAAI7L,KAAK,CAACE,OAAO,CAAC2L,WAAW,CAAC,KAAK,KAAK,EAAE;QACxC,OAAO,KAAK;MACd;MAEA,IAAIC,aAAa,GAAGD,WAAW,CAACE,GAAG,CAAC,UAAUC,KAAK,EAAE;QACnD,IAAItE,MAAM,GAAGsE,KAAK,CAACtE,MAAM;QACzB,OAAOA,MAAM;MACf,CAAC,CAAC;MACF,IAAIuE,eAAe,GAAG,IAAI,CAACnF,GAAG,CAACoF,SAAS,EAAE;MAC1C,IAAIC,yBAAyB,GAAGL,aAAa,CAACM,KAAK,CAAC,UAAUnC,YAAY,EAAE;QAC1E,OAAOA,YAAY,IAAIgC,eAAe,IAAIhC,YAAY,IAAI,CAAC;MAC7D,CAAC,CAAC;MACF,OAAO7E,kBAAkB,CAACyG,WAAW,CAAC,IAAIM,yBAAyB,CAAC,CAAC;IACvE;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD5K,GAAG,EAAE,qBAAqB;IAC1BK,KAAK,EAAE,SAAS2I,mBAAmB,GAAG;MACpC,IAAI8B,eAAe,GAAG,IAAI,CAAC9F,mBAAmB,CAAC+F,uBAAuB,EAAE;MACxED,eAAe,CAACE,aAAa,GAAG,IAAI,CAAChG,mBAAmB,CAAC+E,aAAa,EAAE;MACxE,IAAI,CAACxE,GAAG,CAACgD,QAAQ,CAAC,qBAAqB,EAAE,eAAe,EAAEuC,eAAe,CAAC;IAC5E;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD9K,GAAG,EAAE,yBAAyB;IAC9BK,KAAK,EAAE,SAAS4K,uBAAuB,GAAG;MACxC,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAIC,qBAAqB,GAAG,CAAC,CAAC;MAC9B,IAAI,CAAC5F,GAAG,CAACgD,QAAQ,CAAC,qBAAqB,EAAE,eAAe,EAAE4C,qBAAqB,CAAC;MAChF,IAAIL,eAAe,GAAGK,qBAAqB,CAAC9K,KAAK;MAEjD,IAAImJ,uBAAuB,GAAG,SAASA,uBAAuB,CAAC4B,KAAK,EAAE;QACpE,IAAI1B,cAAc,GAAG0B,KAAK,CAACjF,MAAM;UAC7BwC,gBAAgB,GAAGnI,wBAAwB,CAAC4K,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC;QAElE,OAAOzL,aAAa,CAAC;UACnBwG,MAAM,EAAE+E,MAAM,CAAC3F,GAAG,CAACoE,cAAc,CAACD,cAAc;QAClD,CAAC,EAAEf,gBAAgB,CAAC;MACtB,CAAC;MAED,IAAIxF,SAAS,CAAC2H,eAAe,CAAC,IAAIrM,KAAK,CAACE,OAAO,CAACmM,eAAe,CAACE,aAAa,CAAC,EAAE;QAC9EF,eAAe,CAACE,aAAa,GAAG3H,QAAQ,CAACyH,eAAe,CAACE,aAAa,EAAExB,uBAAuB,CAAC;MAClG;MAEA,OAAOsB,eAAe;IACxB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD9K,GAAG,EAAE,qBAAqB;IAC1BK,KAAK,EAAE,SAASgL,mBAAmB,CAAClF,MAAM,EAAE;MAC1C,IAAIuD,cAAc,GAAG,IAAI,CAACnE,GAAG,CAACqD,gBAAgB,CAACzC,MAAM,CAAC;MAEtD,IAAI,IAAI,CAACnB,mBAAmB,CAACsG,cAAc,CAAC5B,cAAc,CAAC,EAAE;QAC3D,IAAIZ,gBAAgB,GAAG,IAAI,CAACb,aAAa,CAAC9B,MAAM,CAAC;QACjD,IAAIoF,SAAS,GAAG3H,gBAAgB,CAACkF,gBAAgB,CAACyC,SAAS,CAAC;QAE5D,IAAIpI,SAAS,CAACoI,SAAS,CAAC,EAAE;UACxBzC,gBAAgB,CAACyC,SAAS,GAAGA,SAAS;UACtC,OAAOzC,gBAAgB;QACzB;QAEA;MACF;MAEA,IAAI0C,WAAW,GAAG,IAAI,CAACjG,GAAG,CAACoF,SAAS,EAAE;MAEtC,IAAIc,MAAM,CAACC,SAAS,CAACvF,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGqF,WAAW,EAAE;QACnE,OAAO;UACLrF,MAAM,EAAEA,MAAM;UACdoF,SAAS,EAAE3H,gBAAgB;QAC7B,CAAC;MACH;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD5D,GAAG,EAAE,mBAAmB;IACxBK,KAAK,EAAE,SAASsL,iBAAiB,CAACC,cAAc,EAAE;MAChD,IAAIC,UAAU,GAAGhM,SAAS,CAACf,MAAM,GAAG,CAAC,IAAIe,SAAS,CAAC,CAAC,CAAC,KAAKuK,SAAS,GAAGvK,SAAS,CAAC,CAAC,CAAC,GAAG0E,6BAA6B;MAClH,IAAImF,cAAc,GAAG,IAAI,CAACnE,GAAG,CAACqD,gBAAgB,CAACgD,cAAc,CAAC;MAC9D,IAAIE,qBAAqB,GAAG,IAAI,CAAC9G,mBAAmB,CAAC+G,2BAA2B,CAACrC,cAAc,CAAC;MAChG,IAAI4B,cAAc,GAAG,IAAI,CAACtG,mBAAmB,CAACsG,cAAc,CAAC5B,cAAc,CAAC;MAC5E,IAAI1B,iBAAiB,GAAG,IAAI,CAACC,aAAa,EAAE;MAC5C,IAAI+D,gBAAgB,GAAG,IAAI,CAACX,mBAAmB,CAACO,cAAc,CAAC;MAE/D,IAAIN,cAAc,EAAE;QAClB,IAAIpI,WAAW,CAAC8I,gBAAgB,CAAC,EAAE;UACjC,OAAO,EAAE,CAACC,MAAM,CAAClO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAK,CAAC,CAAC,EAAEyB,qBAAqB,CAAC,CAAC,EAAE/N,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAK,CAACyB,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;QACjK;QAEA,IAAID,UAAU,KAAKtH,6BAA6B,EAAE;UAChD,OAAO,EAAE,CAAC0H,MAAM,CAAClO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAK,CAAC,CAAC,EAAEyB,qBAAqB,CAAC,CAAC,EAAE/N,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAK,CAACyB,qBAAqB,GAAG,CAAC,CAAC,CAAC,EAAE,CAACE,gBAAgB,CAAC,CAAC;QACrL,CAAC,MAAM,IAAIH,UAAU,KAAKrH,8BAA8B,EAAE;UACxD,OAAO,EAAE,CAACyH,MAAM,CAAClO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAK,CAAC,CAAC,EAAEyB,qBAAqB,CAAC,CAAC,EAAE,CAACE,gBAAgB,CAAC,EAAEjO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAK,CAACyB,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;QACrL;MACF;MAEA,IAAI3I,SAAS,CAAC6I,gBAAgB,CAAC,EAAE;QAC/B,OAAOhE,iBAAiB,CAACiE,MAAM,CAACD,gBAAgB,CAAC;MACnD;MAEA,OAAOhE,iBAAiB;IAC1B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI;IACA;EAEF,CAAC,EAAE;IACDhI,GAAG,EAAE,yBAAyB;IAC9BK,KAAK,EAAE,SAAS6L,uBAAuB,CAAC/F,MAAM,EAAE;MAC9C,IAAIgG,mBAAmB,GAAG,IAAI,CAAC5G,GAAG,CAACqD,gBAAgB,CAACzC,MAAM,CAAC;MAC3D,IAAIiG,kBAAkB,GAAG,IAAI,CAAC7G,GAAG,CAACC,WAAW,EAAE,CAAC,IAAI,CAACH,SAAS,CAAC;MAC/D,IAAIgH,sBAAsB,GAAG,IAAI,CAACrH,mBAAmB,CAAC+F,uBAAuB,EAAE;MAC/E,IAAIuB,QAAQ,GAAG,IAAI,CAAC/G,GAAG,CAACgH,WAAW,CAAC,CAAC,EAAEpG,MAAM,CAAC;MAC9C,IAAIqG,UAAU,GAAGlO,MAAM,CAACkE,cAAc,CAAC8J,QAAQ,CAAC;MAChD,IAAIG,2BAA2B,GAAGnO,MAAM,CAAC8D,cAAc,CAAC5D,IAAI,CAACgO,UAAU,EAAE,IAAI,CAACnH,SAAS,CAAC;MACxF,IAAIqH,kBAAkB,GAAGD,2BAA2B,GAAGD,UAAU,CAAC,IAAI,CAACnH,SAAS,CAAC,GAAG,CAAC,CAAC;MACtF,IAAI,CAACF,eAAe,CAACwH,GAAG,CAACR,mBAAmB,EAAE7N,MAAM,CAACsO,MAAM,CAACP,sBAAsB,EAAED,kBAAkB,EAAEM,kBAAkB,CAAC,CAAC;IAC9H;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI;IACA;EAEF,CAAC,EAAE;IACD1M,GAAG,EAAE,sBAAsB;IAC3BK,KAAK,EAAE,SAASwM,oBAAoB,CAAC1G,MAAM,EAAE;MAC3C;MACA,IAAI2G,0BAA0B,GAAG,IAAI,CAAC5H,sBAAsB;MAC5D,IAAI,CAACA,sBAAsB,GAAG,IAAI;MAElC,IAAI,IAAI,CAACC,eAAe,CAAC4H,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC5H,eAAe,CAAC4H,IAAI,GAAG,IAAI,CAACxH,GAAG,CAACoF,SAAS,EAAE,EAAE;QACvF,IAAI,CAACqC,sBAAsB,EAAE;MAC/B;MAEA,IAAIV,QAAQ,GAAG,IAAI,CAAC/G,GAAG,CAACgH,WAAW,CAAC,CAAC,EAAEpG,MAAM,CAAC;MAC9C,IAAI,CAACjB,sBAAsB,GAAG4H,0BAA0B;MACxD,IAAIG,YAAY,GAAG3O,MAAM,CAACuE,MAAM,CAACyJ,QAAQ,CAAC;MAC1CW,YAAY,CAAC,IAAI,CAAC5H,SAAS,CAAC,GAAG,IAAI,CAACF,eAAe,CAACnD,GAAG,CAAC,IAAI,CAACuD,GAAG,CAACqD,gBAAgB,CAACzC,MAAM,CAAC,CAAC;MAC1F,OAAO8G,YAAY;IACrB;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDjN,GAAG,EAAE,wBAAwB;IAC7BK,KAAK,EAAE,SAAS2M,sBAAsB,GAAG;MACvC,IAAIE,MAAM,GAAG,IAAI;MAEjB,IAAIxC,eAAe,GAAG,IAAI,CAACnF,GAAG,CAACoF,SAAS,EAAE;MAE1C,IAAID,eAAe,KAAK,CAAC,EAAE;QACzB,IAAI,CAACvF,eAAe,CAACgI,KAAK,EAAE;MAC9B,CAAC,MAAM;QACL7J,SAAS,CAACoH,eAAe,GAAG,CAAC,EAAE,UAAU0C,iBAAiB,EAAE;UAC1D,OAAOF,MAAM,CAAChB,uBAAuB,CAACkB,iBAAiB,CAAC;QAC1D,CAAC,CAAC;MACJ;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDpN,GAAG,EAAE,uBAAuB;IAC5BK,KAAK,EAAE,SAASgN,qBAAqB,CAACC,YAAY,EAAE;MAClD,IAAIC,QAAQ,GAAG,IAAI,CAAChI,GAAG,CAACC,WAAW,EAAE,CAAC,CAAC;;MAEvC,IAAI+H,QAAQ,CAACC,OAAO,IAAIF,YAAY,EAAE;QACpC,OAAOC,QAAQ,CAACC,OAAO;MACzB;MAEA,OAAOF,YAAY,GAAGC,QAAQ,CAACE,YAAY;IAC7C;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDzN,GAAG,EAAE,wBAAwB;IAC7BK,KAAK,EAAE,SAAS0F,sBAAsB,GAAG;MACvC,IAAI2H,OAAO,GAAG,IAAI;MAElB,IAAI,IAAI,CAAC1I,mBAAmB,CAACsE,0BAA0B,EAAE,EAAE;QACzD,IAAI,CAACrE,UAAU,CAAC4C,QAAQ,EAAE;QAC1B;MACF;MAEA,IAAI8F,eAAe,GAAG,EAAE;MACxB,IAAIC,iBAAiB,GAAG,IAAI,CAAC5I,mBAAmB,CAAC6I,gBAAgB,EAAE;MACnE,IAAIP,YAAY,GAAG,IAAI,CAAC/H,GAAG,CAACuI,SAAS,EAAE,CAAC,CAAC;MACzC;;MAEA,IAAI,CAAC5I,sBAAsB,GAAG,IAAI;MAElC,IAAI6I,uBAAuB,GAAG,SAASA,uBAAuB,CAACC,cAAc,EAAE;QAC7E,OAAO3K,QAAQ,CAACuK,iBAAiB,EAAE,UAAUlE,cAAc,EAAE;UAC3D,OAAOgE,OAAO,CAACnI,GAAG,CAAC0I,aAAa,CAACD,cAAc,EAAEN,OAAO,CAACnI,GAAG,CAACoE,cAAc,CAACD,cAAc,CAAC,CAAC;QAC9F,CAAC,CAAC;MACJ,CAAC;MAED,KAAK,IAAIsE,cAAc,GAAG,CAAC,EAAEA,cAAc,GAAG,IAAI,CAACX,qBAAqB,CAACC,YAAY,CAAC,EAAEU,cAAc,IAAI,CAAC,EAAE;QAC3GL,eAAe,CAAClO,IAAI,CAAC,CAACuO,cAAc,CAAC,CAAC/B,MAAM,CAAC8B,uBAAuB,CAACC,cAAc,CAAC,CAAC,CAAC;MACxF;MAEA1J,IAAI,CAACqJ,eAAe,EAAE,IAAI,CAACtI,SAAS,EAAEhC,QAAQ,CAACuK,iBAAiB,EAAE,UAAUlE,cAAc,EAAE;QAC1F,OAAOgE,OAAO,CAAC1I,mBAAmB,CAACkJ,oBAAoB,CAACxE,cAAc,CAAC;MACzE,CAAC,CAAC,EAAErG,QAAQ,CAACuK,iBAAiB,EAAE,UAAUlE,cAAc,EAAE;QACxD,OAAOgE,OAAO,CAACb,oBAAoB,CAACa,OAAO,CAACnI,GAAG,CAACoE,cAAc,CAACD,cAAc,CAAC,CAAC;MACjF,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEL,KAAK,IAAIyE,eAAe,GAAGR,eAAe,CAAC7O,MAAM,EAAEqP,eAAe,GAAGb,YAAY,EAAEa,eAAe,IAAI,CAAC,EAAE;QACvGR,eAAe,CAAClO,IAAI,CAAC,CAAC0O,eAAe,CAAC,CAAClC,MAAM,CAAC8B,uBAAuB,CAACI,eAAe,CAAC,CAAC,CAAC;MAC1F,CAAC,CAAC;;MAGF,IAAI,CAACjJ,sBAAsB,GAAG,KAAK,CAAC,CAAC;;MAErC,IAAI,CAACD,UAAU,CAACmJ,SAAS,GAAG/K,QAAQ,CAACsK,eAAe,EAAE,UAAUU,aAAa,EAAE;QAC7E,OAAOA,aAAa,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDrO,GAAG,EAAE,sBAAsB;IAC3BK,KAAK,EAAE,SAAS2G,oBAAoB,GAAG;MACrC,IAAI,CAAC7B,eAAe,CAACgI,KAAK,EAAE;MAC5B,IAAIhC,qBAAqB,GAAG,IAAI,CAACF,uBAAuB,EAAE;MAE1D,IAAI7H,QAAQ,CAAC+H,qBAAqB,CAAC,EAAE;QACnC,IAAI,CAACmD,cAAc,CAACnD,qBAAqB,CAAC;MAC5C,CAAC,MAAM;QACL,IAAIL,eAAe,GAAG,IAAI,CAACvF,GAAG,CAACC,WAAW,EAAE,CAAC,IAAI,CAACH,SAAS,CAAC;QAC5D,IAAI,CAACiJ,cAAc,CAACxD,eAAe,CAAC;MACtC;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD9K,GAAG,EAAE,gBAAgB;IACrBK,KAAK,EAAE,SAASiO,cAAc,CAACxD,eAAe,EAAE;MAC9C,IAAI1H,QAAQ,CAAC0H,eAAe,CAAC,EAAE;QAC7B,IAAI,CAAC9F,mBAAmB,CAACuJ,0BAA0B,CAACzD,eAAe,CAAC;QACpE,IAAIE,aAAa,GAAGF,eAAe,CAACE,aAAa;QAEjD,IAAIvM,KAAK,CAACE,OAAO,CAACqM,aAAa,CAAC,IAAI5H,QAAQ,CAAC4H,aAAa,CAAC,EAAE;UAC3D,IAAI,CAAC1G,IAAI,CAAC0G,aAAa,CAAC;QAC1B;MACF,CAAC,MAAM;QACL;QACA,IAAI,CAACzF,GAAG,CAAC0D,MAAM,EAAE;MACnB;IACF;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDjJ,GAAG,EAAE,4BAA4B;IACjCK,KAAK,EAAE,SAASwF,0BAA0B,GAAG;MAC3C,IAAI2I,KAAK,GAAG,IAAI;MAEhB,IAAI,CAACjJ,GAAG,CAACkJ,gBAAgB,CAACC,UAAU,CAAC,YAAY;QAC/CF,KAAK,CAACjJ,GAAG,CAACoJ,cAAc,CAAC;UACvB/I,cAAc,EAAE;QAClB,CAAC,CAAC;MACJ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD5F,GAAG,EAAE,aAAa;IAClBK,KAAK,EAAE,SAAS4F,WAAW,CAACD,GAAG,EAAElG,MAAM,EAAE;MACvC,IAAI,IAAI,CAACoF,sBAAsB,KAAK,KAAK,IAAIpF,MAAM,KAAK,IAAI,CAAC8O,UAAU,IAAI,IAAI,CAACvF,QAAQ,EAAE,EAAE;QAC1F,IAAIwF,WAAW,GAAG,IAAI,CAAC5J,UAAU,CAAC6J,eAAe,CAAC9I,GAAG,CAAC;QACtDA,GAAG,GAAG6I,WAAW,KAAK,IAAI,GAAG7I,GAAG,GAAG6I,WAAW;MAChD;MAEA,OAAO7I,GAAG;IACZ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDhG,GAAG,EAAE,eAAe;IACpBK,KAAK,EAAE,SAAS6F,aAAa,CAACF,GAAG,EAAElG,MAAM,EAAE;MACzC,IAAI,IAAI,CAACoF,sBAAsB,KAAK,KAAK,IAAIpF,MAAM,KAAK,IAAI,CAAC8O,UAAU,IAAI,IAAI,CAACvF,QAAQ,EAAE,EAAE;QAC1FrD,GAAG,GAAG,IAAI,CAACf,UAAU,CAAC8J,eAAe,CAAC/I,GAAG,CAAC;MAC5C;MAEA,OAAOA,GAAG;IACZ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDhG,GAAG,EAAE,qBAAqB;IAC1BK,KAAK,EAAE,SAASgG,mBAAmB,CAACF,MAAM,EAAEC,EAAE,EAAE;MAC9C,IAAIqB,iBAAiB,GAAG3D,oBAAoB,CAACsC,EAAE,CAAC;MAEhD,IAAIrC,wBAAwB,CAACoC,MAAM,EAAEC,EAAE,CAAC,KAAK,KAAK,IAAIqB,iBAAiB,KAAK,IAAI,EAAE;QAChF;MACF;MAEA,IAAIiC,cAAc,GAAG,IAAI,CAACnE,GAAG,CAACqD,gBAAgB,CAACzC,MAAM,CAAC;MACtD,IAAI6I,uBAAuB,GAAG,IAAI,CAACnC,oBAAoB,CAAC1G,MAAM,CAAC,CAAC,IAAI,CAACd,SAAS,CAAC;MAC/E,IAAI4J,iBAAiB,GAAGD,uBAAuB,CAACE,SAAS;MACzD,IAAIC,mBAAmB,GAAGH,uBAAuB,CAACI,YAAY;MAC9D,IAAI,CAAC1H,mBAAmB,CAACD,iBAAiB,EAAE,IAAI,CAACzC,mBAAmB,EAAE0E,cAAc,EAAEuF,iBAAiB,EAAEE,mBAAmB,CAAC;IAC/H;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDnP,GAAG,EAAE,qBAAqB;IAC1BK,KAAK,EAAE,SAASqH,mBAAmB,CAACD,iBAAiB,EAAE;MACrDxE,WAAW,CAACwE,iBAAiB,EAAExD,kBAAkB,CAACwD,iBAAiB,CAAC,CAAC;MAErE,IAAI,IAAI,CAAC9B,OAAO,KAAK,KAAK,EAAE;QAC1B,KAAK,IAAI0J,IAAI,GAAGxP,SAAS,CAACf,MAAM,EAAEwQ,IAAI,GAAG,IAAI7Q,KAAK,CAAC4Q,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEE,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGF,IAAI,EAAEE,IAAI,EAAE,EAAE;UAC1GD,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC,GAAG1P,SAAS,CAAC0P,IAAI,CAAC;QAClC;QAEAvM,QAAQ,CAACyE,iBAAiB,EAAEvD,eAAe,CAACxE,KAAK,CAAC,KAAK,CAAC,EAAE4P,IAAI,CAAC,CAAC;MAClE;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDtP,GAAG,EAAE,kBAAkB;IACvBK,KAAK,EAAE,SAASmP,gBAAgB,CAACC,WAAW,EAAE;MAC5C7N,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAS,CAAC,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAACU,IAAI,CAAC,IAAI,CAAC;MAEnF,IAAI,CAAC2G,eAAe,CAACgI,KAAK,EAAE;MAE5B,IAAIhK,SAAS,CAACsM,WAAW,CAAC,IAAI,CAACpK,SAAS,CAAC,CAAC,EAAE;QAC1C,IAAI,CAACiJ,cAAc,CAACmB,WAAW,CAAC,IAAI,CAACpK,SAAS,CAAC,CAAC;MAClD;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDrF,GAAG,EAAE,iBAAiB;IACtBK,KAAK,EAAE,SAAS6G,eAAe,CAACD,WAAW,EAAE;MAC3C,IAAI,CAAChC,UAAU,CAAC4C,QAAQ,EAAE;MAC1B,IAAI,CAAC1C,eAAe,CAACgI,KAAK,EAAE;MAE5B,IAAIlG,WAAW,KAAK,IAAI,EAAE;QACxB;QACA,IAAI,IAAI,CAAC1B,GAAG,CAAC8B,IAAI,EAAE;UACjB,IAAI,CAACL,oBAAoB,EAAE;QAC7B;MACF;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDhH,GAAG,EAAE,kBAAkB;IACvBK,KAAK,EAAE,SAASyG,gBAAgB,CAACF,KAAK,EAAEC,MAAM,EAAE;MAC9C,IAAI,CAAC5B,UAAU,CAACyK,UAAU,CAAC9I,KAAK,EAAEC,MAAM,CAAC;IAC3C;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD7G,GAAG,EAAE,kBAAkB;IACvBK,KAAK,EAAE,SAAS0G,gBAAgB,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC9C,IAAI,CAAC5B,UAAU,CAAC0K,YAAY,CAAC/I,KAAK,EAAEC,MAAM,CAAC;IAC7C,CAAC,CAAC;IACF;;IAEA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD7G,GAAG,EAAE,kBAAkB;IACvBK,KAAK,EAAE,SAAS8G,gBAAgB,GAAG;MACjC,IAAI,CAAChC,eAAe,CAACgI,KAAK,EAAE;IAC9B,CAAC,CAAC;IACF;;IAEA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDnN,GAAG,EAAE,kBAAkB;IACvBK,KAAK,EAAE,SAAS+G,gBAAgB,GAAG;MACjC,IAAI,CAACjC,eAAe,CAACgI,KAAK,EAAE;IAC9B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDnN,GAAG,EAAE,2BAA2B;IAChCK,KAAK,EAAE,SAASuP,yBAAyB,CAACtJ,KAAK,EAAEH,MAAM,EAAE;MACvD,IAAI6I,uBAAuB,GAAG,IAAI,CAACnC,oBAAoB,CAAC1G,MAAM,CAAC,CAAC,IAAI,CAACd,SAAS,CAAC;MAC/E,IAAI8J,mBAAmB,GAAGH,uBAAuB,CAACI,YAAY;MAC9D,OAAOD,mBAAmB,IAAI7I,KAAK,CAACuJ,UAAU,CAACC,QAAQ,KAAK,MAAM;IACpE;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD9P,GAAG,EAAE,yBAAyB;IAC9BK,KAAK,EAAE,SAASqG,uBAAuB,CAACJ,KAAK,EAAEC,MAAM,EAAEC,EAAE,EAAEuJ,iBAAiB,EAAE;MAC5E,IAAI/L,wBAAwB,CAACuC,MAAM,CAACP,GAAG,EAAEO,MAAM,CAACyJ,GAAG,EAAE1J,KAAK,CAAC,KAAK,KAAK,EAAE;QACrE;MACF;MAEA,IAAI,IAAI,CAACsJ,yBAAyB,CAACtJ,KAAK,EAAEC,MAAM,CAACyJ,GAAG,CAAC,IAAItM,gBAAgB,EAAE,EAAE;QAC3EqM,iBAAiB,CAAC5J,MAAM,GAAG,IAAI;MACjC;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDnG,GAAG,EAAE,wBAAwB;IAC7BK,KAAK,EAAE,SAASsG,sBAAsB,CAACL,KAAK,EAAEC,MAAM,EAAE;MACpD,IAAIvC,wBAAwB,CAACuC,MAAM,CAACP,GAAG,EAAEO,MAAM,CAACyJ,GAAG,EAAE1J,KAAK,CAAC,KAAK,KAAK,EAAE;QACrE;MACF;MAEA,IAAI,IAAI,CAACsJ,yBAAyB,CAACtJ,KAAK,EAAEC,MAAM,CAACyJ,GAAG,CAAC,EAAE;QACrD,IAAItM,gBAAgB,EAAE,EAAE;UACtB,IAAI,CAAC6B,GAAG,CAAC0K,YAAY,EAAE;UACvB,IAAI,CAAC1K,GAAG,CAAC2K,aAAa,CAAC3J,MAAM,CAACyJ,GAAG,CAAC;QACpC;QAEA,IAAI,CAAC1L,IAAI,CAAC,IAAI,CAAC+G,mBAAmB,CAAC9E,MAAM,CAACyJ,GAAG,CAAC,CAAC;MACjD;IACF;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDhQ,GAAG,EAAE,SAAS;IACdK,KAAK,EAAE,SAAS8P,OAAO,GAAG;MACxB,IAAI,CAAClL,UAAU,CAACkL,OAAO,EAAE;MACzB,IAAI,CAACnL,mBAAmB,CAACmL,OAAO,EAAE;MAElCvO,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAACU,IAAI,CAAC,IAAI,CAAC;IAC5E;EACF,CAAC,CAAC,CAAC;EAEH,OAAOoG,aAAa;AACtB,CAAC,CAACrB,UAAU,CAAC;AAEbC,cAAc,CAACiB,UAAU,EAAEG,aAAa,CAAC;AACzC,eAAeA,aAAa"},"metadata":{},"sourceType":"module"}