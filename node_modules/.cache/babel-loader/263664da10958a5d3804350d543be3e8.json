{"ast":null,"code":"import moment from 'moment';\nimport { getNormalizedDate } from '../helpers/date';\nimport { getEditorInstance } from '../editors';\n/**\n * Date cell validator\n *\n * @private\n * @validator DateValidator\n * @param {*} value - Value of edited cell\n * @param {Function} callback - Callback called with validation result\n */\n\nexport default function dateValidator(value, callback) {\n  var dateEditor = getEditorInstance('date', this.instance);\n  var valueToValidate = value;\n  var valid = true;\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n  var isValidFormat = moment(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();\n  var isValidDate = moment(new Date(valueToValidate)).isValid() || isValidFormat;\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidDate = true;\n    isValidFormat = true;\n  }\n  if (!isValidDate) {\n    valid = false;\n  }\n  if (!isValidDate && isValidFormat) {\n    valid = true;\n  }\n  if (isValidDate && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      var correctedValue = correctFormat(valueToValidate, this.dateFormat);\n      var row = this.instance.runHooks('unmodifyRow', this.row);\n      var column = this.instance.runHooks('unmodifyCol', this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'dateValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n  callback(valid);\n}\n/**\n * Format the given string using moment.js' format feature\n *\n * @param {String} value\n * @param {String} dateFormat\n * @returns {String}\n */\n\nexport function correctFormat(value, dateFormat) {\n  var dateFromDate = moment(getNormalizedDate(value));\n  var dateFromMoment = moment(value, dateFormat);\n  var isAlphanumeric = value.search(/[A-z]/g) > -1;\n  var date;\n  if (dateFromDate.isValid() && dateFromDate.format('x') === dateFromMoment.format('x') || !dateFromMoment.isValid() || isAlphanumeric) {\n    date = dateFromDate;\n  } else {\n    date = dateFromMoment;\n  }\n  return date.format(dateFormat);\n}","map":{"version":3,"names":["moment","getNormalizedDate","getEditorInstance","dateValidator","value","callback","dateEditor","instance","valueToValidate","valid","isValidFormat","dateFormat","defaultDateFormat","isValid","isValidDate","Date","allowEmpty","correctFormat","correctedValue","row","runHooks","column","col","setDataAtCell","dateFromDate","dateFromMoment","isAlphanumeric","search","date","format"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/validators/dateValidator.js"],"sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.search\";\nimport moment from 'moment';\nimport { getNormalizedDate } from '../helpers/date';\nimport { getEditorInstance } from '../editors';\n/**\n * Date cell validator\n *\n * @private\n * @validator DateValidator\n * @param {*} value - Value of edited cell\n * @param {Function} callback - Callback called with validation result\n */\n\nexport default function dateValidator(value, callback) {\n  var dateEditor = getEditorInstance('date', this.instance);\n  var valueToValidate = value;\n  var valid = true;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  var isValidFormat = moment(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();\n  var isValidDate = moment(new Date(valueToValidate)).isValid() || isValidFormat;\n\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidDate = true;\n    isValidFormat = true;\n  }\n\n  if (!isValidDate) {\n    valid = false;\n  }\n\n  if (!isValidDate && isValidFormat) {\n    valid = true;\n  }\n\n  if (isValidDate && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      var correctedValue = correctFormat(valueToValidate, this.dateFormat);\n      var row = this.instance.runHooks('unmodifyRow', this.row);\n      var column = this.instance.runHooks('unmodifyCol', this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'dateValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n\n  callback(valid);\n}\n/**\n * Format the given string using moment.js' format feature\n *\n * @param {String} value\n * @param {String} dateFormat\n * @returns {String}\n */\n\nexport function correctFormat(value, dateFormat) {\n  var dateFromDate = moment(getNormalizedDate(value));\n  var dateFromMoment = moment(value, dateFormat);\n  var isAlphanumeric = value.search(/[A-z]/g) > -1;\n  var date;\n\n  if (dateFromDate.isValid() && dateFromDate.format('x') === dateFromMoment.format('x') || !dateFromMoment.isValid() || isAlphanumeric) {\n    date = dateFromDate;\n  } else {\n    date = dateFromMoment;\n  }\n\n  return date.format(dateFormat);\n}"],"mappings":"AAEA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,iBAAiB,QAAQ,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,aAAa,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACrD,IAAIC,UAAU,GAAGJ,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAACK,QAAQ,CAAC;EACzD,IAAIC,eAAe,GAAGJ,KAAK;EAC3B,IAAIK,KAAK,GAAG,IAAI;EAEhB,IAAID,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,EAAE;IAC1DA,eAAe,GAAG,EAAE;EACtB;EAEA,IAAIE,aAAa,GAAGV,MAAM,CAACQ,eAAe,EAAE,IAAI,CAACG,UAAU,IAAIL,UAAU,CAACM,iBAAiB,EAAE,IAAI,CAAC,CAACC,OAAO,EAAE;EAC5G,IAAIC,WAAW,GAAGd,MAAM,CAAC,IAAIe,IAAI,CAACP,eAAe,CAAC,CAAC,CAACK,OAAO,EAAE,IAAIH,aAAa;EAE9E,IAAI,IAAI,CAACM,UAAU,IAAIR,eAAe,KAAK,EAAE,EAAE;IAC7CM,WAAW,GAAG,IAAI;IAClBJ,aAAa,GAAG,IAAI;EACtB;EAEA,IAAI,CAACI,WAAW,EAAE;IAChBL,KAAK,GAAG,KAAK;EACf;EAEA,IAAI,CAACK,WAAW,IAAIJ,aAAa,EAAE;IACjCD,KAAK,GAAG,IAAI;EACd;EAEA,IAAIK,WAAW,IAAI,CAACJ,aAAa,EAAE;IACjC,IAAI,IAAI,CAACO,aAAa,KAAK,IAAI,EAAE;MAC/B;MACA,IAAIC,cAAc,GAAGD,aAAa,CAACT,eAAe,EAAE,IAAI,CAACG,UAAU,CAAC;MACpE,IAAIQ,GAAG,GAAG,IAAI,CAACZ,QAAQ,CAACa,QAAQ,CAAC,aAAa,EAAE,IAAI,CAACD,GAAG,CAAC;MACzD,IAAIE,MAAM,GAAG,IAAI,CAACd,QAAQ,CAACa,QAAQ,CAAC,aAAa,EAAE,IAAI,CAACE,GAAG,CAAC;MAC5D,IAAI,CAACf,QAAQ,CAACgB,aAAa,CAACJ,GAAG,EAAEE,MAAM,EAAEH,cAAc,EAAE,eAAe,CAAC;MACzET,KAAK,GAAG,IAAI;IACd,CAAC,MAAM;MACLA,KAAK,GAAG,KAAK;IACf;EACF;EAEAJ,QAAQ,CAACI,KAAK,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,aAAa,CAACb,KAAK,EAAEO,UAAU,EAAE;EAC/C,IAAIa,YAAY,GAAGxB,MAAM,CAACC,iBAAiB,CAACG,KAAK,CAAC,CAAC;EACnD,IAAIqB,cAAc,GAAGzB,MAAM,CAACI,KAAK,EAAEO,UAAU,CAAC;EAC9C,IAAIe,cAAc,GAAGtB,KAAK,CAACuB,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;EAChD,IAAIC,IAAI;EAER,IAAIJ,YAAY,CAACX,OAAO,EAAE,IAAIW,YAAY,CAACK,MAAM,CAAC,GAAG,CAAC,KAAKJ,cAAc,CAACI,MAAM,CAAC,GAAG,CAAC,IAAI,CAACJ,cAAc,CAACZ,OAAO,EAAE,IAAIa,cAAc,EAAE;IACpIE,IAAI,GAAGJ,YAAY;EACrB,CAAC,MAAM;IACLI,IAAI,GAAGH,cAAc;EACvB;EAEA,OAAOG,IAAI,CAACC,MAAM,CAAClB,UAAU,CAAC;AAChC"},"metadata":{},"sourceType":"module"}