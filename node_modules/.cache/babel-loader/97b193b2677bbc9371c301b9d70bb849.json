{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from './utils';\nvar HEADER_CLASS_ASC_SORT = 'ascending';\nvar HEADER_CLASS_DESC_SORT = 'descending';\nvar HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nvar HEADER_SORT_CLASS = 'columnSorting';\nvar HEADER_ACTION_CLASS = 'sortAction';\nvar orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n/**\n * Get CSS classes which should be added to particular column header.\n * @param {Object} columnStatesManager Instance of column state manager.\n * @param {Number} column Physical column index.\n * @param {Boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {Boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  var cssClasses = [HEADER_SORT_CLASS];\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n  } else if (columnStatesManager.isColumnSorted(column)) {\n    var columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n  return cssClasses;\n}\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassedToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}","map":{"version":3,"names":["ASC_SORT_STATE","DESC_SORT_STATE","HEADER_CLASS_ASC_SORT","HEADER_CLASS_DESC_SORT","HEADER_CLASS_INDICATOR_DISABLED","HEADER_SORT_CLASS","HEADER_ACTION_CLASS","orderToCssClass","Map","getClassesToAdd","columnStatesManager","column","showSortIndicator","headerAction","cssClasses","push","isColumnSorted","columnOrder","getSortOrderOfColumn","get","getClassedToRemove","Array","from","values","concat"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/columnSorting/domHelpers.js"],"sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\n/* eslint-disable import/prefer-default-export */\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from './utils';\nvar HEADER_CLASS_ASC_SORT = 'ascending';\nvar HEADER_CLASS_DESC_SORT = 'descending';\nvar HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nvar HEADER_SORT_CLASS = 'columnSorting';\nvar HEADER_ACTION_CLASS = 'sortAction';\nvar orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n/**\n * Get CSS classes which should be added to particular column header.\n * @param {Object} columnStatesManager Instance of column state manager.\n * @param {Number} column Physical column index.\n * @param {Boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {Boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  var cssClasses = [HEADER_SORT_CLASS];\n\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n  } else if (columnStatesManager.isColumnSorted(column)) {\n    var columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n\n  return cssClasses;\n}\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassedToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}"],"mappings":"AAQA;AACA,SAASA,cAAc,EAAEC,eAAe,QAAQ,SAAS;AACzD,IAAIC,qBAAqB,GAAG,WAAW;AACvC,IAAIC,sBAAsB,GAAG,YAAY;AACzC,IAAIC,+BAA+B,GAAG,mBAAmB;AACzD,IAAIC,iBAAiB,GAAG,eAAe;AACvC,IAAIC,mBAAmB,GAAG,YAAY;AACtC,IAAIC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC,CAACR,cAAc,EAAEE,qBAAqB,CAAC,EAAE,CAACD,eAAe,EAAEE,sBAAsB,CAAC,CAAC,CAAC;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,eAAe,CAACC,mBAAmB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,YAAY,EAAE;EAC5F,IAAIC,UAAU,GAAG,CAACT,iBAAiB,CAAC;EAEpC,IAAIQ,YAAY,EAAE;IAChBC,UAAU,CAACC,IAAI,CAACT,mBAAmB,CAAC;EACtC;EAEA,IAAIM,iBAAiB,KAAK,KAAK,EAAE;IAC/BE,UAAU,CAACC,IAAI,CAACX,+BAA+B,CAAC;EAClD,CAAC,MAAM,IAAIM,mBAAmB,CAACM,cAAc,CAACL,MAAM,CAAC,EAAE;IACrD,IAAIM,WAAW,GAAGP,mBAAmB,CAACQ,oBAAoB,CAACP,MAAM,CAAC;IAClEG,UAAU,CAACC,IAAI,CAACR,eAAe,CAACY,GAAG,CAACF,WAAW,CAAC,CAAC;EACnD;EAEA,OAAOH,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,kBAAkB,GAAG;EACnC,OAAOC,KAAK,CAACC,IAAI,CAACf,eAAe,CAACgB,MAAM,EAAE,CAAC,CAACC,MAAM,CAAClB,mBAAmB,EAAEF,+BAA+B,EAAEC,iBAAiB,CAAC;AAC7H"},"metadata":{},"sourceType":"module"}