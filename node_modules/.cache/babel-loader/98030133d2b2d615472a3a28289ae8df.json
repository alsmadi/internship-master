{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n/* eslint-disable import/prefer-default-export */\nimport { getCompareFunctionFactory, DO_NOT_SWAP } from '../columnSorting/sortService';\n/**\n * Sort comparator handled by conventional sort algorithm.\n *\n * @param {Array} sortOrders Sort orders (`asc` for ascending, `desc` for descending).\n * @param {Array} columnMetas Column meta objects.\n * @returns {Function}\n */\n\nexport function rootComparator(sortingOrders, columnMetas) {\n  return function (rowIndexWithValues, nextRowIndexWithValues) {\n    // We sort array of arrays. Single array is in form [rowIndex, ...values].\n    // We compare just values, stored at second index of array.\n    var _rowIndexWithValues = _toArray(rowIndexWithValues),\n      values = _rowIndexWithValues.slice(1);\n    var _nextRowIndexWithValu = _toArray(nextRowIndexWithValues),\n      nextValues = _nextRowIndexWithValu.slice(1);\n    return function getCompareResult(column) {\n      var sortingOrder = sortingOrders[column];\n      var columnMeta = columnMetas[column];\n      var value = values[column];\n      var nextValue = nextValues[column];\n      var pluginSettings = columnMeta.multiColumnSorting;\n      var compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);\n      var compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue);\n      if (compareResult === DO_NOT_SWAP) {\n        var nextSortedColumn = column + 1;\n        if (typeof columnMetas[nextSortedColumn] !== 'undefined') {\n          return getCompareResult(nextSortedColumn);\n        }\n      }\n      return compareResult;\n    }(0);\n  };\n}","map":{"version":3,"names":["_toArray","arr","_arrayWithHoles","_iterableToArray","_nonIterableRest","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","getCompareFunctionFactory","DO_NOT_SWAP","rootComparator","sortingOrders","columnMetas","rowIndexWithValues","nextRowIndexWithValues","_rowIndexWithValues","values","slice","_nextRowIndexWithValu","nextValues","getCompareResult","column","sortingOrder","columnMeta","value","nextValue","pluginSettings","multiColumnSorting","compareFunctionFactory","type","compareResult","nextSortedColumn"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/multiColumnSorting/rootComparator.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable import/prefer-default-export */\nimport { getCompareFunctionFactory, DO_NOT_SWAP } from '../columnSorting/sortService';\n/**\n * Sort comparator handled by conventional sort algorithm.\n *\n * @param {Array} sortOrders Sort orders (`asc` for ascending, `desc` for descending).\n * @param {Array} columnMetas Column meta objects.\n * @returns {Function}\n */\n\nexport function rootComparator(sortingOrders, columnMetas) {\n  return function (rowIndexWithValues, nextRowIndexWithValues) {\n    // We sort array of arrays. Single array is in form [rowIndex, ...values].\n    // We compare just values, stored at second index of array.\n    var _rowIndexWithValues = _toArray(rowIndexWithValues),\n        values = _rowIndexWithValues.slice(1);\n\n    var _nextRowIndexWithValu = _toArray(nextRowIndexWithValues),\n        nextValues = _nextRowIndexWithValu.slice(1);\n\n    return function getCompareResult(column) {\n      var sortingOrder = sortingOrders[column];\n      var columnMeta = columnMetas[column];\n      var value = values[column];\n      var nextValue = nextValues[column];\n      var pluginSettings = columnMeta.multiColumnSorting;\n      var compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);\n      var compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue);\n\n      if (compareResult === DO_NOT_SWAP) {\n        var nextSortedColumn = column + 1;\n\n        if (typeof columnMetas[nextSortedColumn] !== 'undefined') {\n          return getCompareResult(nextSortedColumn);\n        }\n      }\n\n      return compareResult;\n    }(0);\n  };\n}"],"mappings":"AAAA,OAAO,2BAA2B;AAClC,OAAO,uCAAuC;AAC9C,OAAO,oCAAoC;AAC3C,OAAO,+BAA+B;AACtC,OAAO,mCAAmC;AAC1C,OAAO,gCAAgC;AACvC,OAAO,qCAAqC;AAC5C,OAAO,qCAAqC;AAC5C,OAAO,oCAAoC;AAC3C,OAAO,8CAA8C;AAErD,SAASA,QAAQ,CAACC,GAAG,EAAE;EAAE,OAAOC,eAAe,CAACD,GAAG,CAAC,IAAIE,gBAAgB,CAACF,GAAG,CAAC,IAAIG,gBAAgB,EAAE;AAAE;AAErG,SAASA,gBAAgB,GAAG;EAAE,MAAM,IAAIC,SAAS,CAAC,sDAAsD,CAAC;AAAE;AAE3G,SAASF,gBAAgB,CAACG,IAAI,EAAE;EAAE,IAAIC,MAAM,CAACC,QAAQ,IAAIC,MAAM,CAACH,IAAI,CAAC,IAAIG,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACN,IAAI,CAAC,KAAK,oBAAoB,EAAE,OAAOO,KAAK,CAACC,IAAI,CAACR,IAAI,CAAC;AAAE;AAEjK,SAASJ,eAAe,CAACD,GAAG,EAAE;EAAE,IAAIY,KAAK,CAACE,OAAO,CAACd,GAAG,CAAC,EAAE,OAAOA,GAAG;AAAE;;AAEpE;AACA,SAASe,yBAAyB,EAAEC,WAAW,QAAQ,8BAA8B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAc,CAACC,aAAa,EAAEC,WAAW,EAAE;EACzD,OAAO,UAAUC,kBAAkB,EAAEC,sBAAsB,EAAE;IAC3D;IACA;IACA,IAAIC,mBAAmB,GAAGvB,QAAQ,CAACqB,kBAAkB,CAAC;MAClDG,MAAM,GAAGD,mBAAmB,CAACE,KAAK,CAAC,CAAC,CAAC;IAEzC,IAAIC,qBAAqB,GAAG1B,QAAQ,CAACsB,sBAAsB,CAAC;MACxDK,UAAU,GAAGD,qBAAqB,CAACD,KAAK,CAAC,CAAC,CAAC;IAE/C,OAAO,SAASG,gBAAgB,CAACC,MAAM,EAAE;MACvC,IAAIC,YAAY,GAAGX,aAAa,CAACU,MAAM,CAAC;MACxC,IAAIE,UAAU,GAAGX,WAAW,CAACS,MAAM,CAAC;MACpC,IAAIG,KAAK,GAAGR,MAAM,CAACK,MAAM,CAAC;MAC1B,IAAII,SAAS,GAAGN,UAAU,CAACE,MAAM,CAAC;MAClC,IAAIK,cAAc,GAAGH,UAAU,CAACI,kBAAkB;MAClD,IAAIC,sBAAsB,GAAGF,cAAc,CAACE,sBAAsB,GAAGF,cAAc,CAACE,sBAAsB,GAAGpB,yBAAyB,CAACe,UAAU,CAACM,IAAI,CAAC;MACvJ,IAAIC,aAAa,GAAGF,sBAAsB,CAACN,YAAY,EAAEC,UAAU,EAAEG,cAAc,CAAC,CAACF,KAAK,EAAEC,SAAS,CAAC;MAEtG,IAAIK,aAAa,KAAKrB,WAAW,EAAE;QACjC,IAAIsB,gBAAgB,GAAGV,MAAM,GAAG,CAAC;QAEjC,IAAI,OAAOT,WAAW,CAACmB,gBAAgB,CAAC,KAAK,WAAW,EAAE;UACxD,OAAOX,gBAAgB,CAACW,gBAAgB,CAAC;QAC3C;MACF;MAEA,OAAOD,aAAa;IACtB,CAAC,CAAC,CAAC,CAAC;EACN,CAAC;AACH"},"metadata":{},"sourceType":"module"}