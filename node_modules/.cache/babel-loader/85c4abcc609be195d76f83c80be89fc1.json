{"ast":null,"code":"var _TYPES;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { clone } from '../../helpers/object';\nimport { arrayEach } from '../../helpers/array';\nimport { SEPARATOR } from '../contextMenu/predefinedItems';\nimport { getConditionDescriptor } from './conditionRegisterer';\nimport { CONDITION_NAME as CONDITION_NONE } from './condition/none';\nimport { CONDITION_NAME as CONDITION_EMPTY } from './condition/empty';\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from './condition/notEmpty';\nimport { CONDITION_NAME as CONDITION_EQUAL } from './condition/equal';\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from './condition/notEqual';\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from './condition/greaterThan';\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from './condition/greaterThanOrEqual';\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from './condition/lessThan';\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from './condition/lessThanOrEqual';\nimport { CONDITION_NAME as CONDITION_BETWEEN } from './condition/between';\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from './condition/notBetween';\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from './condition/beginsWith';\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from './condition/endsWith';\nimport { CONDITION_NAME as CONDITION_CONTAINS } from './condition/contains';\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from './condition/notContains';\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from './condition/date/before';\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from './condition/date/after';\nimport { CONDITION_NAME as CONDITION_TOMORROW } from './condition/date/tomorrow';\nimport { CONDITION_NAME as CONDITION_TODAY } from './condition/date/today';\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from './condition/date/yesterday';\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from './condition/byValue';\nimport { CONDITION_NAME as CONDITION_TRUE } from './condition/true';\nimport { CONDITION_NAME as CONDITION_FALSE } from './condition/false';\nimport { OPERATION_ID as OPERATION_AND } from './logicalOperations/conjunction';\nimport { OPERATION_ID as OPERATION_OR } from './logicalOperations/disjunction';\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from './logicalOperations/disjunctionWithExtraCondition';\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\nexport var TYPE_NUMERIC = 'numeric';\nexport var TYPE_TEXT = 'text';\nexport var TYPE_DATE = 'date';\n/**\n * Default types and order for filter conditions.\n *\n * @type {Object}\n */\n\nexport var TYPES = (_TYPES = {}, _defineProperty(_TYPES, TYPE_NUMERIC, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN]), _defineProperty(_TYPES, TYPE_TEXT, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS]), _defineProperty(_TYPES, TYPE_DATE, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]), _TYPES);\n/**\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\n *\n * @returns {Object}\n */\n\nexport default function getOptionsList(type) {\n  var items = [];\n  var typeName = type;\n  if (!TYPES[typeName]) {\n    typeName = TYPE_TEXT;\n  }\n  arrayEach(TYPES[typeName], function (typeValue) {\n    var option;\n    if (typeValue === SEPARATOR) {\n      option = {\n        name: SEPARATOR\n      };\n    } else {\n      option = clone(getConditionDescriptor(typeValue));\n    }\n    items.push(option);\n  });\n  return items;\n}","map":{"version":3,"names":["_TYPES","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","clone","arrayEach","SEPARATOR","getConditionDescriptor","CONDITION_NAME","CONDITION_NONE","CONDITION_EMPTY","CONDITION_NOT_EMPTY","CONDITION_EQUAL","CONDITION_NOT_EQUAL","CONDITION_GREATER_THAN","CONDITION_GREATER_THAN_OR_EQUAL","CONDITION_LESS_THAN","CONDITION_LESS_THAN_OR_EQUAL","CONDITION_BETWEEN","CONDITION_NOT_BETWEEN","CONDITION_BEGINS_WITH","CONDITION_ENDS_WITH","CONDITION_CONTAINS","CONDITION_NOT_CONTAINS","CONDITION_DATE_BEFORE","CONDITION_DATE_AFTER","CONDITION_TOMORROW","CONDITION_TODAY","CONDITION_YESTERDAY","CONDITION_BY_VALUE","CONDITION_TRUE","CONDITION_FALSE","OPERATION_ID","OPERATION_AND","OPERATION_OR","OPERATION_OR_THEN_VARIABLE","TYPE_NUMERIC","TYPE_TEXT","TYPE_DATE","TYPES","getOptionsList","type","items","typeName","typeValue","option","name","push"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/filters/constants.js"],"sourcesContent":["var _TYPES;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { clone } from '../../helpers/object';\nimport { arrayEach } from '../../helpers/array';\nimport { SEPARATOR } from '../contextMenu/predefinedItems';\nimport { getConditionDescriptor } from './conditionRegisterer';\nimport { CONDITION_NAME as CONDITION_NONE } from './condition/none';\nimport { CONDITION_NAME as CONDITION_EMPTY } from './condition/empty';\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from './condition/notEmpty';\nimport { CONDITION_NAME as CONDITION_EQUAL } from './condition/equal';\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from './condition/notEqual';\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from './condition/greaterThan';\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from './condition/greaterThanOrEqual';\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from './condition/lessThan';\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from './condition/lessThanOrEqual';\nimport { CONDITION_NAME as CONDITION_BETWEEN } from './condition/between';\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from './condition/notBetween';\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from './condition/beginsWith';\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from './condition/endsWith';\nimport { CONDITION_NAME as CONDITION_CONTAINS } from './condition/contains';\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from './condition/notContains';\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from './condition/date/before';\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from './condition/date/after';\nimport { CONDITION_NAME as CONDITION_TOMORROW } from './condition/date/tomorrow';\nimport { CONDITION_NAME as CONDITION_TODAY } from './condition/date/today';\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from './condition/date/yesterday';\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from './condition/byValue';\nimport { CONDITION_NAME as CONDITION_TRUE } from './condition/true';\nimport { CONDITION_NAME as CONDITION_FALSE } from './condition/false';\nimport { OPERATION_ID as OPERATION_AND } from './logicalOperations/conjunction';\nimport { OPERATION_ID as OPERATION_OR } from './logicalOperations/disjunction';\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from './logicalOperations/disjunctionWithExtraCondition';\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\nexport var TYPE_NUMERIC = 'numeric';\nexport var TYPE_TEXT = 'text';\nexport var TYPE_DATE = 'date';\n/**\n * Default types and order for filter conditions.\n *\n * @type {Object}\n */\n\nexport var TYPES = (_TYPES = {}, _defineProperty(_TYPES, TYPE_NUMERIC, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN]), _defineProperty(_TYPES, TYPE_TEXT, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS]), _defineProperty(_TYPES, TYPE_DATE, [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]), _TYPES);\n/**\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\n *\n * @returns {Object}\n */\n\nexport default function getOptionsList(type) {\n  var items = [];\n  var typeName = type;\n\n  if (!TYPES[typeName]) {\n    typeName = TYPE_TEXT;\n  }\n\n  arrayEach(TYPES[typeName], function (typeValue) {\n    var option;\n\n    if (typeValue === SEPARATOR) {\n      option = {\n        name: SEPARATOR\n      };\n    } else {\n      option = clone(getConditionDescriptor(typeValue));\n    }\n\n    items.push(option);\n  });\n  return items;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}