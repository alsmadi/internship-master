{"ast":null,"code":"import staticRegister from './../utils/staticRegister';\nimport { registerEditor } from './../editors';\nimport { registerRenderer } from './../renderers';\nimport { registerValidator } from './../validators';\nimport autocompleteCellType from './autocompleteType';\nimport checkboxCellType from './checkboxType';\nimport dateCellType from './dateType';\nimport dropdownCellType from './dropdownType';\nimport handsontableCellType from './handsontableType';\nimport numericCellType from './numericType';\nimport passwordCellType from './passwordType';\nimport textCellType from './textType';\nimport timeCellType from './timeType';\nvar _staticRegister = staticRegister('cellTypes'),\n  register = _staticRegister.register,\n  getItem = _staticRegister.getItem,\n  hasItem = _staticRegister.hasItem,\n  getNames = _staticRegister.getNames,\n  getValues = _staticRegister.getValues;\n_register('autocomplete', autocompleteCellType);\n_register('checkbox', checkboxCellType);\n_register('date', dateCellType);\n_register('dropdown', dropdownCellType);\n_register('handsontable', handsontableCellType);\n_register('numeric', numericCellType);\n_register('password', passwordCellType);\n_register('text', textCellType);\n_register('time', timeCellType);\n/**\n * Retrieve cell type object.\n *\n * @param {String} name Cell type identification.\n * @returns {Object} Returns cell type object.\n */\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"You declared cell type \\\"\".concat(name, \"\\\" as a string that is not mapped to a known object.\\n                 Cell type must be an object or a string mapped to an object registered by \\\"Handsontable.cellTypes.registerCellType\\\" method\"));\n  }\n  return getItem(name);\n}\n/**\n * Register cell type under specified name.\n *\n * @param {String} name Cell type identification.\n * @param {Object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\n\nfunction _register(name, type) {\n  var editor = type.editor,\n    renderer = type.renderer,\n    validator = type.validator;\n  if (editor) {\n    registerEditor(name, editor);\n  }\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n  if (validator) {\n    registerValidator(name, validator);\n  }\n  register(name, type);\n}\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };","map":{"version":3,"names":["staticRegister","registerEditor","registerRenderer","registerValidator","autocompleteCellType","checkboxCellType","dateCellType","dropdownCellType","handsontableCellType","numericCellType","passwordCellType","textCellType","timeCellType","_staticRegister","register","getItem","hasItem","getNames","getValues","_register","_getItem","name","Error","concat","type","editor","renderer","validator","registerCellType","getCellType","hasCellType","getRegisteredCellTypeNames","getRegisteredCellTypes"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/cellTypes/index.js"],"sourcesContent":["import staticRegister from './../utils/staticRegister';\nimport { registerEditor } from './../editors';\nimport { registerRenderer } from './../renderers';\nimport { registerValidator } from './../validators';\nimport autocompleteCellType from './autocompleteType';\nimport checkboxCellType from './checkboxType';\nimport dateCellType from './dateType';\nimport dropdownCellType from './dropdownType';\nimport handsontableCellType from './handsontableType';\nimport numericCellType from './numericType';\nimport passwordCellType from './passwordType';\nimport textCellType from './textType';\nimport timeCellType from './timeType';\n\nvar _staticRegister = staticRegister('cellTypes'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n\n_register('autocomplete', autocompleteCellType);\n\n_register('checkbox', checkboxCellType);\n\n_register('date', dateCellType);\n\n_register('dropdown', dropdownCellType);\n\n_register('handsontable', handsontableCellType);\n\n_register('numeric', numericCellType);\n\n_register('password', passwordCellType);\n\n_register('text', textCellType);\n\n_register('time', timeCellType);\n/**\n * Retrieve cell type object.\n *\n * @param {String} name Cell type identification.\n * @returns {Object} Returns cell type object.\n */\n\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"You declared cell type \\\"\".concat(name, \"\\\" as a string that is not mapped to a known object.\\n                 Cell type must be an object or a string mapped to an object registered by \\\"Handsontable.cellTypes.registerCellType\\\" method\"));\n  }\n\n  return getItem(name);\n}\n/**\n * Register cell type under specified name.\n *\n * @param {String} name Cell type identification.\n * @param {Object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\n\n\nfunction _register(name, type) {\n  var editor = type.editor,\n      renderer = type.renderer,\n      validator = type.validator;\n\n  if (editor) {\n    registerEditor(name, editor);\n  }\n\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n\n  if (validator) {\n    registerValidator(name, validator);\n  }\n\n  register(name, type);\n}\n\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;AACtD,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,gBAAgB,QAAQ,gBAAgB;AACjD,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,OAAOC,oBAAoB,MAAM,oBAAoB;AACrD,OAAOC,gBAAgB,MAAM,gBAAgB;AAC7C,OAAOC,YAAY,MAAM,YAAY;AACrC,OAAOC,gBAAgB,MAAM,gBAAgB;AAC7C,OAAOC,oBAAoB,MAAM,oBAAoB;AACrD,OAAOC,eAAe,MAAM,eAAe;AAC3C,OAAOC,gBAAgB,MAAM,gBAAgB;AAC7C,OAAOC,YAAY,MAAM,YAAY;AACrC,OAAOC,YAAY,MAAM,YAAY;AAErC,IAAIC,eAAe,GAAGb,cAAc,CAAC,WAAW,CAAC;EAC7Cc,QAAQ,GAAGD,eAAe,CAACC,QAAQ;EACnCC,OAAO,GAAGF,eAAe,CAACE,OAAO;EACjCC,OAAO,GAAGH,eAAe,CAACG,OAAO;EACjCC,QAAQ,GAAGJ,eAAe,CAACI,QAAQ;EACnCC,SAAS,GAAGL,eAAe,CAACK,SAAS;AAEzCC,SAAS,CAAC,cAAc,EAAEf,oBAAoB,CAAC;AAE/Ce,SAAS,CAAC,UAAU,EAAEd,gBAAgB,CAAC;AAEvCc,SAAS,CAAC,MAAM,EAAEb,YAAY,CAAC;AAE/Ba,SAAS,CAAC,UAAU,EAAEZ,gBAAgB,CAAC;AAEvCY,SAAS,CAAC,cAAc,EAAEX,oBAAoB,CAAC;AAE/CW,SAAS,CAAC,SAAS,EAAEV,eAAe,CAAC;AAErCU,SAAS,CAAC,UAAU,EAAET,gBAAgB,CAAC;AAEvCS,SAAS,CAAC,MAAM,EAAER,YAAY,CAAC;AAE/BQ,SAAS,CAAC,MAAM,EAAEP,YAAY,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASQ,QAAQ,CAACC,IAAI,EAAE;EACtB,IAAI,CAACL,OAAO,CAACK,IAAI,CAAC,EAAE;IAClB,MAAMC,KAAK,CAAC,2BAA2B,CAACC,MAAM,CAACF,IAAI,EAAE,qMAAqM,CAAC,CAAC;EAC9P;EAEA,OAAON,OAAO,CAACM,IAAI,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASF,SAAS,CAACE,IAAI,EAAEG,IAAI,EAAE;EAC7B,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACpBC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;IACxBC,SAAS,GAAGH,IAAI,CAACG,SAAS;EAE9B,IAAIF,MAAM,EAAE;IACVxB,cAAc,CAACoB,IAAI,EAAEI,MAAM,CAAC;EAC9B;EAEA,IAAIC,QAAQ,EAAE;IACZxB,gBAAgB,CAACmB,IAAI,EAAEK,QAAQ,CAAC;EAClC;EAEA,IAAIC,SAAS,EAAE;IACbxB,iBAAiB,CAACkB,IAAI,EAAEM,SAAS,CAAC;EACpC;EAEAb,QAAQ,CAACO,IAAI,EAAEG,IAAI,CAAC;AACtB;AAEA,SAASL,SAAS,IAAIS,gBAAgB,EAAER,QAAQ,IAAIS,WAAW,EAAEb,OAAO,IAAIc,WAAW,EAAEb,QAAQ,IAAIc,0BAA0B,EAAEb,SAAS,IAAIc,sBAAsB"},"metadata":{},"sourceType":"module"}