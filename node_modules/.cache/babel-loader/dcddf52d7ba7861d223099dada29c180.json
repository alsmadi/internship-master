{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { rangeEach } from '../../../helpers/number';\nimport { objectEach, hasOwnProperty } from '../../../helpers/object';\nimport { arrayEach } from '../../../helpers/array';\nimport { getTranslator } from '../../../utils/recordTranslator';\n/**\n * Class responsible for making data operations.\n *\n * @class\n * @private\n */\n\nvar DataManager = /*#__PURE__*/\nfunction () {\n  function DataManager(nestedRowsPlugin, hotInstance, sourceData) {\n    _classCallCheck(this, DataManager);\n\n    /**\n     * Main Handsontable instance reference.\n     *\n     * @type {Object}\n     */\n    this.hot = hotInstance;\n    /**\n     * Reference to the source data object.\n     *\n     * @type {Object}\n     */\n\n    this.data = sourceData;\n    /**\n     * Reference to the NestedRows plugin.\n     *\n     * @type {Object}\n     */\n\n    this.plugin = nestedRowsPlugin;\n    /**\n     * Map of row object parents.\n     *\n     * @type {WeakMap}\n     */\n\n    this.parentReference = new WeakMap();\n    /**\n     * Nested structure cache.\n     *\n     * @type {Object}\n     */\n\n    this.cache = {\n      levels: [],\n      levelCount: 0,\n      rows: [],\n      nodeInfo: new WeakMap()\n    };\n    /**\n     * A `recordTranslator` instance.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this.recordTranslator = getTranslator(this.hot);\n  }\n  /**\n   * Rewrite the nested structure cache.\n   *\n   * @private\n   */\n\n  _createClass(DataManager, [{\n    key: \"rewriteCache\",\n    value: function rewriteCache() {\n      var _this = this;\n      this.cache = {\n        levels: [],\n        levelCount: 0,\n        rows: [],\n        nodeInfo: new WeakMap()\n      };\n      rangeEach(0, this.data.length - 1, function (i) {\n        _this.cacheNode(_this.data[i], 0, null);\n      });\n    }\n    /**\n     * Cache a data node.\n     *\n     * @private\n     * @param {Object} node Node to cache.\n     * @param {Number} level Level of the node.\n     * @param {Object} parent Parent of the node.\n     */\n  }, {\n    key: \"cacheNode\",\n    value: function cacheNode(node, level, parent) {\n      var _this2 = this;\n      if (!this.cache.levels[level]) {\n        this.cache.levels[level] = [];\n        this.cache.levelCount += 1;\n      }\n      this.cache.levels[level].push(node);\n      this.cache.rows.push(node);\n      this.cache.nodeInfo.set(node, {\n        parent: parent,\n        row: this.cache.rows.length - 1,\n        level: level\n      });\n      if (this.hasChildren(node)) {\n        arrayEach(node.__children, function (elem) {\n          _this2.cacheNode(elem, level + 1, node);\n        });\n      }\n    }\n    /**\n     * Get the date for the provided visual row number.\n     *\n     * @param {Number} row Row index.\n     */\n  }, {\n    key: \"getDataObject\",\n    value: function getDataObject(row) {\n      return row === null || row === void 0 ? null : this.cache.rows[row];\n    }\n    /**\n     * Read the row tree in search for a specific row index or row object.\n     *\n     * @private\n     * @param {Object} parent The initial parent object.\n     * @param {Number} readCount Number of read nodes.\n     * @param {Number} neededIndex The row index we search for.\n     * @param {Object} neededObject The row object we search for.\n     * @returns {Number|Object}\n     */\n  }, {\n    key: \"readTreeNodes\",\n    value: function readTreeNodes(parent, readCount, neededIndex, neededObject) {\n      var _this3 = this;\n      var rootLevel = false;\n      var readedNodesCount = readCount;\n      if (isNaN(readedNodesCount) && readedNodesCount.end) {\n        return readedNodesCount;\n      }\n      var parentObj = parent;\n      if (!parentObj) {\n        parentObj = {\n          __children: this.data\n        };\n        rootLevel = true;\n        readedNodesCount -= 1;\n      }\n      if (neededIndex !== null && neededIndex !== void 0 && readedNodesCount === neededIndex) {\n        return {\n          result: parentObj,\n          end: true\n        };\n      }\n      if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {\n        return {\n          result: readedNodesCount,\n          end: true\n        };\n      }\n      readedNodesCount += 1;\n      if (parentObj.__children) {\n        arrayEach(parentObj.__children, function (val) {\n          _this3.parentReference.set(val, rootLevel ? null : parentObj);\n          readedNodesCount = _this3.readTreeNodes(val, readedNodesCount, neededIndex, neededObject);\n          if (isNaN(readedNodesCount) && readedNodesCount.end) {\n            return false;\n          }\n        });\n      }\n      return readedNodesCount;\n    }\n    /**\n     * Update the parent reference map.\n     *\n     * @private\n     */\n  }, {\n    key: \"updateParentReference\",\n    value: function updateParentReference() {\n      this.readTreeNodes({\n        __children: this.data\n      }, 0, this.hot.countRows());\n    }\n    /**\n     * Mock a parent node.\n     *\n     * @private\n     * @returns {*}\n     */\n  }, {\n    key: \"mockParent\",\n    value: function mockParent() {\n      var fakeParent = this.mockNode();\n      fakeParent.__children = this.data;\n      return fakeParent;\n    }\n    /**\n     * Mock a data node.\n     *\n     * @private\n     * @returns {{}}\n     */\n  }, {\n    key: \"mockNode\",\n    value: function mockNode() {\n      var fakeNode = {};\n      objectEach(this.data[0], function (val, key) {\n        fakeNode[key] = null;\n      });\n      return fakeNode;\n    }\n    /**\n     * Get the row index for the provided row object.\n     *\n     * @param {Object} rowObj The row object.\n     * @returns {Number} Row index.\n     */\n  }, {\n    key: \"getRowIndex\",\n    value: function getRowIndex(rowObj) {\n      return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;\n    }\n    /**\n     * Get the index of the provided row index/row object within its parent.\n     *\n     * @param {Number|Object} row Row index / row object.\n     * @returns {Number}\n     */\n  }, {\n    key: \"getRowIndexWithinParent\",\n    value: function getRowIndexWithinParent(row) {\n      var rowObj = null;\n      if (isNaN(row)) {\n        rowObj = row;\n      } else {\n        rowObj = this.getDataObject(row);\n      }\n      var parent = this.getRowParent(row);\n      if (parent === null || parent === void 0) {\n        return this.data.indexOf(rowObj);\n      }\n      return parent.__children.indexOf(rowObj);\n    }\n    /**\n     * Count all rows (including all parents and children).\n     */\n  }, {\n    key: \"countAllRows\",\n    value: function countAllRows() {\n      var rootNodeMock = {\n        __children: this.data\n      };\n      return this.countChildren(rootNodeMock);\n    }\n    /**\n     * Count children of the provided parent.\n     *\n     * @param {Object|Number} parent Parent node.\n     * @returns {Number} Children count.\n     */\n  }, {\n    key: \"countChildren\",\n    value: function countChildren(parent) {\n      var _this4 = this;\n      var rowCount = 0;\n      var parentNode = parent;\n      if (!isNaN(parentNode)) {\n        parentNode = this.getDataObject(parentNode);\n      }\n      if (!parentNode || !parentNode.__children) {\n        return 0;\n      }\n      arrayEach(parentNode.__children, function (elem) {\n        rowCount += 1;\n        if (elem.__children) {\n          rowCount += _this4.countChildren(elem);\n        }\n      });\n      return rowCount;\n    }\n    /**\n     * Get the parent of the row at the provided index.\n     *\n     * @param {Number|Object} row Row index.\n     */\n  }, {\n    key: \"getRowParent\",\n    value: function getRowParent(row) {\n      var rowObject;\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n      return this.getRowObjectParent(rowObject);\n    }\n    /**\n     * Get the parent of the provided row object.\n     *\n     * @private\n     * @param {Object} rowObject The row object (tree node).\n     */\n  }, {\n    key: \"getRowObjectParent\",\n    value: function getRowObjectParent(rowObject) {\n      if (_typeof(rowObject) !== 'object') {\n        return null;\n      }\n      return this.cache.nodeInfo.get(rowObject).parent;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @param {Number} row Row index.\n     * @returns {Number|null} Row level or null, when row doesn't exist.\n     */\n  }, {\n    key: \"getRowLevel\",\n    value: function getRowLevel(row) {\n      var rowObject = null;\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n      return rowObject ? this.getRowObjectLevel(rowObject) : null;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @private\n     * @param {Object} rowObject Row object.\n     * @returns {Number} Row level.\n     */\n  }, {\n    key: \"getRowObjectLevel\",\n    value: function getRowObjectLevel(rowObject) {\n      return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;\n    }\n    /**\n     * Check if the provided row/row element has children.\n     *\n     * @param {Number|Object} row Row number or row element.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(row) {\n      var rowObj = row;\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n      return !!(rowObj.__children && rowObj.__children.length);\n    }\n  }, {\n    key: \"isParent\",\n    value: function isParent(row) {\n      var rowObj = row;\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n      return !!hasOwnProperty(rowObj, '__children');\n    }\n    /**\n     * Add a child to the provided parent. It's optional to add a row object as the \"element\"\n     *\n     * @param {Object} parent The parent row object.\n     * @param {Object} [element] The element to add as a child.\n     */\n  }, {\n    key: \"addChild\",\n    value: function addChild(parent, element) {\n      var childElement = element;\n      this.hot.runHooks('beforeAddChild', parent, childElement);\n      var parentIndex = null;\n      if (parent) {\n        parentIndex = this.getRowIndex(parent);\n      }\n      this.hot.runHooks('beforeCreateRow', parentIndex + this.countChildren(parent) + 1, 1);\n      var functionalParent = parent;\n      if (!parent) {\n        functionalParent = this.mockParent();\n      }\n      if (!functionalParent.__children) {\n        functionalParent.__children = [];\n      }\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n      functionalParent.__children.push(childElement);\n      this.rewriteCache();\n      var newRowIndex = this.getRowIndex(childElement);\n      this.hot.runHooks('afterCreateRow', newRowIndex, 1);\n      this.hot.runHooks('afterAddChild', parent, childElement);\n    }\n    /**\n     * Add a child node to the provided parent at a specified index.\n     *\n     * @param {Object} parent Parent node.\n     * @param {Number} index Index to insert the child element at.\n     * @param {Object} [element] Element (node) to insert.\n     * @param {Number} [globalIndex] Global index of the inserted row.\n     */\n  }, {\n    key: \"addChildAtIndex\",\n    value: function addChildAtIndex(parent, index, element, globalIndex) {\n      var childElement = element;\n      this.hot.runHooks('beforeAddChild', parent, childElement, index);\n      this.hot.runHooks('beforeCreateRow', globalIndex + 1, 1);\n      var functionalParent = parent;\n      if (!parent) {\n        functionalParent = this.mockParent();\n      }\n      if (!functionalParent.__children) {\n        functionalParent.__children = [];\n      }\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n      functionalParent.__children.splice(index, null, childElement);\n      this.rewriteCache();\n      this.hot.runHooks('afterCreateRow', globalIndex + 1, 1);\n      this.hot.runHooks('afterAddChild', parent, childElement, index);\n    }\n    /**\n     * Add a sibling element at the specified index.\n     *\n     * @param {Number} index New element sibling's index.\n     * @param {('above'|'below')} where Direction in which the sibling is to be created.\n     */\n  }, {\n    key: \"addSibling\",\n    value: function addSibling(index) {\n      var where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'below';\n      var translatedIndex = this.translateTrimmedRow(index);\n      var parent = this.getRowParent(translatedIndex);\n      var indexWithinParent = this.getRowIndexWithinParent(translatedIndex);\n      switch (where) {\n        case 'below':\n          this.addChildAtIndex(parent, indexWithinParent + 1, null, index);\n          break;\n        case 'above':\n          this.addChildAtIndex(parent, indexWithinParent, null, index);\n          break;\n        default:\n          break;\n      }\n    }\n    /**\n     * Detach the provided element from its parent and add it right after it.\n     *\n     * @param {Object|Array} elements Row object or an array of selected coordinates.\n     * @param {Boolean} [forceRender=true] If true (default), it triggers render after finished.\n     */\n  }, {\n    key: \"detachFromParent\",\n    value: function detachFromParent(elements) {\n      var _this5 = this;\n      var forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var element = null;\n      var rowObjects = [];\n      if (Array.isArray(elements)) {\n        rangeEach(elements[0], elements[2], function (i) {\n          var translatedIndex = _this5.translateTrimmedRow(i);\n          rowObjects.push(_this5.getDataObject(translatedIndex));\n        });\n        rangeEach(0, rowObjects.length - 2, function (i) {\n          _this5.detachFromParent(rowObjects[i], false);\n        });\n        element = rowObjects[rowObjects.length - 1];\n      } else {\n        element = elements;\n      }\n      var childRowIndex = this.getRowIndex(element);\n      var indexWithinParent = this.getRowIndexWithinParent(element);\n      var parent = this.getRowParent(element);\n      var grandparent = this.getRowParent(parent);\n      var grandparentRowIndex = this.getRowIndex(grandparent);\n      var movedElementRowIndex = null;\n      this.hot.runHooks('beforeDetachChild', parent, element);\n      if (indexWithinParent !== null && indexWithinParent !== void 0) {\n        this.hot.runHooks('beforeRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n        parent.__children.splice(indexWithinParent, 1);\n        this.rewriteCache();\n        this.hot.runHooks('afterRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n        if (grandparent) {\n          movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n          grandparent.__children.push(element);\n        } else {\n          movedElementRowIndex = this.hot.countRows() + 1;\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n          this.data.push(element);\n        }\n      }\n      this.rewriteCache();\n      this.hot.runHooks('afterCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n      if (forceRender) {\n        this.hot.render();\n      }\n      this.hot.runHooks('afterDetachChild', parent, element);\n    }\n    /**\n     * Filter the data by the `logicRows` array.\n     *\n     * @private\n     * @param {Number} index Index of the first row to remove.\n     * @param {Number} amount Number of elements to remove.\n     * @param {Array} logicRows Array of indexes to remove.\n     */\n  }, {\n    key: \"filterData\",\n    value: function filterData(index, amount, logicRows) {\n      var _this6 = this;\n      var elementsToRemove = [];\n      arrayEach(logicRows, function (elem) {\n        elementsToRemove.push(_this6.getDataObject(elem));\n      });\n      arrayEach(elementsToRemove, function (elem) {\n        var indexWithinParent = _this6.getRowIndexWithinParent(elem);\n        var tempParent = _this6.getRowParent(elem);\n        if (tempParent === null) {\n          _this6.data.splice(indexWithinParent, 1);\n        } else {\n          tempParent.__children.splice(indexWithinParent, 1);\n        }\n      });\n      this.rewriteCache();\n    }\n    /**\n     * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the default script.\n     *\n     * @private\n     * @param {Number} index Index of the element at the splice beginning.\n     * @param {Number} amount Number of elements to be removed.\n     * @param {Object} element Row to add.\n     */\n  }, {\n    key: \"spliceData\",\n    value: function spliceData(index, amount, element) {\n      var elementIndex = this.translateTrimmedRow(index);\n      if (elementIndex === null || elementIndex === void 0) {\n        return;\n      }\n      var previousElement = this.getDataObject(elementIndex - 1);\n      var newRowParent = null;\n      var indexWithinParent = null;\n      if (previousElement && previousElement.__children && previousElement.__children.length === 0) {\n        newRowParent = previousElement;\n        indexWithinParent = 0;\n      } else {\n        newRowParent = this.getRowParent(elementIndex);\n        indexWithinParent = this.getRowIndexWithinParent(elementIndex);\n      }\n      if (newRowParent) {\n        if (element) {\n          newRowParent.__children.splice(indexWithinParent, amount, element);\n        } else {\n          newRowParent.__children.splice(indexWithinParent, amount);\n        }\n      } else if (element) {\n        this.data.splice(indexWithinParent, amount, element);\n      } else {\n        this.data.splice(indexWithinParent, amount);\n      }\n      this.rewriteCache();\n    }\n    /**\n     * Move a single row.\n     *\n     * @param {Number} fromIndex Index of the row to be moved.\n     * @param {Number} toIndex Index of the destination.\n     */\n  }, {\n    key: \"moveRow\",\n    value: function moveRow(fromIndex, toIndex) {\n      var targetIsParent = this.isParent(toIndex);\n      var fromParent = this.getRowParent(fromIndex);\n      var indexInFromParent = this.getRowIndexWithinParent(fromIndex);\n      var toParent = this.getRowParent(toIndex);\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getRowParent(toIndex - 1);\n      }\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getDataObject(toIndex - 1);\n      }\n      if (!toParent) {\n        toParent = this.getDataObject(toIndex);\n        toParent.__children = [];\n      } else if (!toParent.__children) {\n        toParent.__children = [];\n      }\n      var previousToTargetParent = this.getRowParent(toIndex - 1);\n      var indexInToParent = targetIsParent ? this.countChildren(previousToTargetParent) : this.getRowIndexWithinParent(toIndex);\n      var elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);\n      fromParent.__children.splice(indexInFromParent, 1);\n      toParent.__children.splice(indexInToParent, 0, elemToMove[0]);\n    }\n    /**\n     * Move the cell meta\n     *\n     * @private\n     * @param {Number} fromIndex Index of the starting row.\n     * @param {Number} toIndex Index of the ending row.\n     */\n  }, {\n    key: \"moveCellMeta\",\n    value: function moveCellMeta(fromIndex, toIndex) {\n      var rowOfMeta = this.hot.getCellMetaAtRow(fromIndex);\n      this.hot.spliceCellsMeta(toIndex, 0, rowOfMeta);\n      this.hot.spliceCellsMeta(fromIndex + (fromIndex < toIndex ? 0 : 1), 1);\n    }\n    /**\n     * Translate the row index according to the `TrimRows` plugin.\n     *\n     * @private\n     * @param {Number} row Row index.\n     * @returns {Number}\n     */\n  }, {\n    key: \"translateTrimmedRow\",\n    value: function translateTrimmedRow(row) {\n      if (this.plugin.collapsingUI) {\n        return this.plugin.collapsingUI.translateTrimmedRow(row);\n      }\n      return row;\n    }\n  }]);\n  return DataManager;\n}();\nexport default DataManager;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","rangeEach","objectEach","hasOwnProperty","arrayEach","getTranslator","DataManager","nestedRowsPlugin","hotInstance","sourceData","hot","data","plugin","parentReference","WeakMap","cache","levels","levelCount","rows","nodeInfo","recordTranslator","value","rewriteCache","_this","cacheNode","node","level","parent","_this2","push","set","row","hasChildren","__children","elem","getDataObject","readTreeNodes","readCount","neededIndex","neededObject","_this3","rootLevel","readedNodesCount","isNaN","end","parentObj","result","val","updateParentReference","countRows","mockParent","fakeParent","mockNode","fakeNode","getRowIndex","rowObj","get","getRowIndexWithinParent","getRowParent","indexOf","countAllRows","rootNodeMock","countChildren","_this4","rowCount","parentNode","rowObject","getRowObjectParent","getRowLevel","getRowObjectLevel","isParent","addChild","element","childElement","runHooks","parentIndex","functionalParent","newRowIndex","addChildAtIndex","index","globalIndex","splice","addSibling","where","arguments","undefined","translatedIndex","translateTrimmedRow","indexWithinParent","detachFromParent","elements","_this5","forceRender","rowObjects","Array","isArray","childRowIndex","grandparent","grandparentRowIndex","movedElementRowIndex","pluginName","render","filterData","amount","logicRows","_this6","elementsToRemove","tempParent","spliceData","elementIndex","previousElement","newRowParent","moveRow","fromIndex","toIndex","targetIsParent","fromParent","indexInFromParent","toParent","previousToTargetParent","indexInToParent","elemToMove","slice","moveCellMeta","rowOfMeta","getCellMetaAtRow","spliceCellsMeta","collapsingUI"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/nestedRows/data/dataManager.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { rangeEach } from '../../../helpers/number';\nimport { objectEach, hasOwnProperty } from '../../../helpers/object';\nimport { arrayEach } from '../../../helpers/array';\nimport { getTranslator } from '../../../utils/recordTranslator';\n/**\n * Class responsible for making data operations.\n *\n * @class\n * @private\n */\n\nvar DataManager =\n/*#__PURE__*/\nfunction () {\n  function DataManager(nestedRowsPlugin, hotInstance, sourceData) {\n    _classCallCheck(this, DataManager);\n\n    /**\n     * Main Handsontable instance reference.\n     *\n     * @type {Object}\n     */\n    this.hot = hotInstance;\n    /**\n     * Reference to the source data object.\n     *\n     * @type {Object}\n     */\n\n    this.data = sourceData;\n    /**\n     * Reference to the NestedRows plugin.\n     *\n     * @type {Object}\n     */\n\n    this.plugin = nestedRowsPlugin;\n    /**\n     * Map of row object parents.\n     *\n     * @type {WeakMap}\n     */\n\n    this.parentReference = new WeakMap();\n    /**\n     * Nested structure cache.\n     *\n     * @type {Object}\n     */\n\n    this.cache = {\n      levels: [],\n      levelCount: 0,\n      rows: [],\n      nodeInfo: new WeakMap()\n    };\n    /**\n     * A `recordTranslator` instance.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this.recordTranslator = getTranslator(this.hot);\n  }\n  /**\n   * Rewrite the nested structure cache.\n   *\n   * @private\n   */\n\n\n  _createClass(DataManager, [{\n    key: \"rewriteCache\",\n    value: function rewriteCache() {\n      var _this = this;\n\n      this.cache = {\n        levels: [],\n        levelCount: 0,\n        rows: [],\n        nodeInfo: new WeakMap()\n      };\n      rangeEach(0, this.data.length - 1, function (i) {\n        _this.cacheNode(_this.data[i], 0, null);\n      });\n    }\n    /**\n     * Cache a data node.\n     *\n     * @private\n     * @param {Object} node Node to cache.\n     * @param {Number} level Level of the node.\n     * @param {Object} parent Parent of the node.\n     */\n\n  }, {\n    key: \"cacheNode\",\n    value: function cacheNode(node, level, parent) {\n      var _this2 = this;\n\n      if (!this.cache.levels[level]) {\n        this.cache.levels[level] = [];\n        this.cache.levelCount += 1;\n      }\n\n      this.cache.levels[level].push(node);\n      this.cache.rows.push(node);\n      this.cache.nodeInfo.set(node, {\n        parent: parent,\n        row: this.cache.rows.length - 1,\n        level: level\n      });\n\n      if (this.hasChildren(node)) {\n        arrayEach(node.__children, function (elem) {\n          _this2.cacheNode(elem, level + 1, node);\n        });\n      }\n    }\n    /**\n     * Get the date for the provided visual row number.\n     *\n     * @param {Number} row Row index.\n     */\n\n  }, {\n    key: \"getDataObject\",\n    value: function getDataObject(row) {\n      return row === null || row === void 0 ? null : this.cache.rows[row];\n    }\n    /**\n     * Read the row tree in search for a specific row index or row object.\n     *\n     * @private\n     * @param {Object} parent The initial parent object.\n     * @param {Number} readCount Number of read nodes.\n     * @param {Number} neededIndex The row index we search for.\n     * @param {Object} neededObject The row object we search for.\n     * @returns {Number|Object}\n     */\n\n  }, {\n    key: \"readTreeNodes\",\n    value: function readTreeNodes(parent, readCount, neededIndex, neededObject) {\n      var _this3 = this;\n\n      var rootLevel = false;\n      var readedNodesCount = readCount;\n\n      if (isNaN(readedNodesCount) && readedNodesCount.end) {\n        return readedNodesCount;\n      }\n\n      var parentObj = parent;\n\n      if (!parentObj) {\n        parentObj = {\n          __children: this.data\n        };\n        rootLevel = true;\n        readedNodesCount -= 1;\n      }\n\n      if (neededIndex !== null && neededIndex !== void 0 && readedNodesCount === neededIndex) {\n        return {\n          result: parentObj,\n          end: true\n        };\n      }\n\n      if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {\n        return {\n          result: readedNodesCount,\n          end: true\n        };\n      }\n\n      readedNodesCount += 1;\n\n      if (parentObj.__children) {\n        arrayEach(parentObj.__children, function (val) {\n          _this3.parentReference.set(val, rootLevel ? null : parentObj);\n\n          readedNodesCount = _this3.readTreeNodes(val, readedNodesCount, neededIndex, neededObject);\n\n          if (isNaN(readedNodesCount) && readedNodesCount.end) {\n            return false;\n          }\n        });\n      }\n\n      return readedNodesCount;\n    }\n    /**\n     * Update the parent reference map.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"updateParentReference\",\n    value: function updateParentReference() {\n      this.readTreeNodes({\n        __children: this.data\n      }, 0, this.hot.countRows());\n    }\n    /**\n     * Mock a parent node.\n     *\n     * @private\n     * @returns {*}\n     */\n\n  }, {\n    key: \"mockParent\",\n    value: function mockParent() {\n      var fakeParent = this.mockNode();\n      fakeParent.__children = this.data;\n      return fakeParent;\n    }\n    /**\n     * Mock a data node.\n     *\n     * @private\n     * @returns {{}}\n     */\n\n  }, {\n    key: \"mockNode\",\n    value: function mockNode() {\n      var fakeNode = {};\n      objectEach(this.data[0], function (val, key) {\n        fakeNode[key] = null;\n      });\n      return fakeNode;\n    }\n    /**\n     * Get the row index for the provided row object.\n     *\n     * @param {Object} rowObj The row object.\n     * @returns {Number} Row index.\n     */\n\n  }, {\n    key: \"getRowIndex\",\n    value: function getRowIndex(rowObj) {\n      return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;\n    }\n    /**\n     * Get the index of the provided row index/row object within its parent.\n     *\n     * @param {Number|Object} row Row index / row object.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getRowIndexWithinParent\",\n    value: function getRowIndexWithinParent(row) {\n      var rowObj = null;\n\n      if (isNaN(row)) {\n        rowObj = row;\n      } else {\n        rowObj = this.getDataObject(row);\n      }\n\n      var parent = this.getRowParent(row);\n\n      if (parent === null || parent === void 0) {\n        return this.data.indexOf(rowObj);\n      }\n\n      return parent.__children.indexOf(rowObj);\n    }\n    /**\n     * Count all rows (including all parents and children).\n     */\n\n  }, {\n    key: \"countAllRows\",\n    value: function countAllRows() {\n      var rootNodeMock = {\n        __children: this.data\n      };\n      return this.countChildren(rootNodeMock);\n    }\n    /**\n     * Count children of the provided parent.\n     *\n     * @param {Object|Number} parent Parent node.\n     * @returns {Number} Children count.\n     */\n\n  }, {\n    key: \"countChildren\",\n    value: function countChildren(parent) {\n      var _this4 = this;\n\n      var rowCount = 0;\n      var parentNode = parent;\n\n      if (!isNaN(parentNode)) {\n        parentNode = this.getDataObject(parentNode);\n      }\n\n      if (!parentNode || !parentNode.__children) {\n        return 0;\n      }\n\n      arrayEach(parentNode.__children, function (elem) {\n        rowCount += 1;\n\n        if (elem.__children) {\n          rowCount += _this4.countChildren(elem);\n        }\n      });\n      return rowCount;\n    }\n    /**\n     * Get the parent of the row at the provided index.\n     *\n     * @param {Number|Object} row Row index.\n     */\n\n  }, {\n    key: \"getRowParent\",\n    value: function getRowParent(row) {\n      var rowObject;\n\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n\n      return this.getRowObjectParent(rowObject);\n    }\n    /**\n     * Get the parent of the provided row object.\n     *\n     * @private\n     * @param {Object} rowObject The row object (tree node).\n     */\n\n  }, {\n    key: \"getRowObjectParent\",\n    value: function getRowObjectParent(rowObject) {\n      if (_typeof(rowObject) !== 'object') {\n        return null;\n      }\n\n      return this.cache.nodeInfo.get(rowObject).parent;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @param {Number} row Row index.\n     * @returns {Number|null} Row level or null, when row doesn't exist.\n     */\n\n  }, {\n    key: \"getRowLevel\",\n    value: function getRowLevel(row) {\n      var rowObject = null;\n\n      if (isNaN(row)) {\n        rowObject = row;\n      } else {\n        rowObject = this.getDataObject(row);\n      }\n\n      return rowObject ? this.getRowObjectLevel(rowObject) : null;\n    }\n    /**\n     * Get the nesting level for the row with the provided row index.\n     *\n     * @private\n     * @param {Object} rowObject Row object.\n     * @returns {Number} Row level.\n     */\n\n  }, {\n    key: \"getRowObjectLevel\",\n    value: function getRowObjectLevel(rowObject) {\n      return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;\n    }\n    /**\n     * Check if the provided row/row element has children.\n     *\n     * @param {Number|Object} row Row number or row element.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(row) {\n      var rowObj = row;\n\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n\n      return !!(rowObj.__children && rowObj.__children.length);\n    }\n  }, {\n    key: \"isParent\",\n    value: function isParent(row) {\n      var rowObj = row;\n\n      if (!isNaN(rowObj)) {\n        rowObj = this.getDataObject(rowObj);\n      }\n\n      return !!hasOwnProperty(rowObj, '__children');\n    }\n    /**\n     * Add a child to the provided parent. It's optional to add a row object as the \"element\"\n     *\n     * @param {Object} parent The parent row object.\n     * @param {Object} [element] The element to add as a child.\n     */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(parent, element) {\n      var childElement = element;\n      this.hot.runHooks('beforeAddChild', parent, childElement);\n      var parentIndex = null;\n\n      if (parent) {\n        parentIndex = this.getRowIndex(parent);\n      }\n\n      this.hot.runHooks('beforeCreateRow', parentIndex + this.countChildren(parent) + 1, 1);\n      var functionalParent = parent;\n\n      if (!parent) {\n        functionalParent = this.mockParent();\n      }\n\n      if (!functionalParent.__children) {\n        functionalParent.__children = [];\n      }\n\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n\n      functionalParent.__children.push(childElement);\n\n      this.rewriteCache();\n      var newRowIndex = this.getRowIndex(childElement);\n      this.hot.runHooks('afterCreateRow', newRowIndex, 1);\n      this.hot.runHooks('afterAddChild', parent, childElement);\n    }\n    /**\n     * Add a child node to the provided parent at a specified index.\n     *\n     * @param {Object} parent Parent node.\n     * @param {Number} index Index to insert the child element at.\n     * @param {Object} [element] Element (node) to insert.\n     * @param {Number} [globalIndex] Global index of the inserted row.\n     */\n\n  }, {\n    key: \"addChildAtIndex\",\n    value: function addChildAtIndex(parent, index, element, globalIndex) {\n      var childElement = element;\n      this.hot.runHooks('beforeAddChild', parent, childElement, index);\n      this.hot.runHooks('beforeCreateRow', globalIndex + 1, 1);\n      var functionalParent = parent;\n\n      if (!parent) {\n        functionalParent = this.mockParent();\n      }\n\n      if (!functionalParent.__children) {\n        functionalParent.__children = [];\n      }\n\n      if (!childElement) {\n        childElement = this.mockNode();\n      }\n\n      functionalParent.__children.splice(index, null, childElement);\n\n      this.rewriteCache();\n      this.hot.runHooks('afterCreateRow', globalIndex + 1, 1);\n      this.hot.runHooks('afterAddChild', parent, childElement, index);\n    }\n    /**\n     * Add a sibling element at the specified index.\n     *\n     * @param {Number} index New element sibling's index.\n     * @param {('above'|'below')} where Direction in which the sibling is to be created.\n     */\n\n  }, {\n    key: \"addSibling\",\n    value: function addSibling(index) {\n      var where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'below';\n      var translatedIndex = this.translateTrimmedRow(index);\n      var parent = this.getRowParent(translatedIndex);\n      var indexWithinParent = this.getRowIndexWithinParent(translatedIndex);\n\n      switch (where) {\n        case 'below':\n          this.addChildAtIndex(parent, indexWithinParent + 1, null, index);\n          break;\n\n        case 'above':\n          this.addChildAtIndex(parent, indexWithinParent, null, index);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Detach the provided element from its parent and add it right after it.\n     *\n     * @param {Object|Array} elements Row object or an array of selected coordinates.\n     * @param {Boolean} [forceRender=true] If true (default), it triggers render after finished.\n     */\n\n  }, {\n    key: \"detachFromParent\",\n    value: function detachFromParent(elements) {\n      var _this5 = this;\n\n      var forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var element = null;\n      var rowObjects = [];\n\n      if (Array.isArray(elements)) {\n        rangeEach(elements[0], elements[2], function (i) {\n          var translatedIndex = _this5.translateTrimmedRow(i);\n\n          rowObjects.push(_this5.getDataObject(translatedIndex));\n        });\n        rangeEach(0, rowObjects.length - 2, function (i) {\n          _this5.detachFromParent(rowObjects[i], false);\n        });\n        element = rowObjects[rowObjects.length - 1];\n      } else {\n        element = elements;\n      }\n\n      var childRowIndex = this.getRowIndex(element);\n      var indexWithinParent = this.getRowIndexWithinParent(element);\n      var parent = this.getRowParent(element);\n      var grandparent = this.getRowParent(parent);\n      var grandparentRowIndex = this.getRowIndex(grandparent);\n      var movedElementRowIndex = null;\n      this.hot.runHooks('beforeDetachChild', parent, element);\n\n      if (indexWithinParent !== null && indexWithinParent !== void 0) {\n        this.hot.runHooks('beforeRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n\n        parent.__children.splice(indexWithinParent, 1);\n\n        this.rewriteCache();\n        this.hot.runHooks('afterRemoveRow', childRowIndex, 1, [childRowIndex], this.plugin.pluginName);\n\n        if (grandparent) {\n          movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n\n          grandparent.__children.push(element);\n        } else {\n          movedElementRowIndex = this.hot.countRows() + 1;\n          this.hot.runHooks('beforeCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n          this.data.push(element);\n        }\n      }\n\n      this.rewriteCache();\n      this.hot.runHooks('afterCreateRow', movedElementRowIndex, 1, this.plugin.pluginName);\n\n      if (forceRender) {\n        this.hot.render();\n      }\n\n      this.hot.runHooks('afterDetachChild', parent, element);\n    }\n    /**\n     * Filter the data by the `logicRows` array.\n     *\n     * @private\n     * @param {Number} index Index of the first row to remove.\n     * @param {Number} amount Number of elements to remove.\n     * @param {Array} logicRows Array of indexes to remove.\n     */\n\n  }, {\n    key: \"filterData\",\n    value: function filterData(index, amount, logicRows) {\n      var _this6 = this;\n\n      var elementsToRemove = [];\n      arrayEach(logicRows, function (elem) {\n        elementsToRemove.push(_this6.getDataObject(elem));\n      });\n      arrayEach(elementsToRemove, function (elem) {\n        var indexWithinParent = _this6.getRowIndexWithinParent(elem);\n\n        var tempParent = _this6.getRowParent(elem);\n\n        if (tempParent === null) {\n          _this6.data.splice(indexWithinParent, 1);\n        } else {\n          tempParent.__children.splice(indexWithinParent, 1);\n        }\n      });\n      this.rewriteCache();\n    }\n    /**\n     * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the default script.\n     *\n     * @private\n     * @param {Number} index Index of the element at the splice beginning.\n     * @param {Number} amount Number of elements to be removed.\n     * @param {Object} element Row to add.\n     */\n\n  }, {\n    key: \"spliceData\",\n    value: function spliceData(index, amount, element) {\n      var elementIndex = this.translateTrimmedRow(index);\n\n      if (elementIndex === null || elementIndex === void 0) {\n        return;\n      }\n\n      var previousElement = this.getDataObject(elementIndex - 1);\n      var newRowParent = null;\n      var indexWithinParent = null;\n\n      if (previousElement && previousElement.__children && previousElement.__children.length === 0) {\n        newRowParent = previousElement;\n        indexWithinParent = 0;\n      } else {\n        newRowParent = this.getRowParent(elementIndex);\n        indexWithinParent = this.getRowIndexWithinParent(elementIndex);\n      }\n\n      if (newRowParent) {\n        if (element) {\n          newRowParent.__children.splice(indexWithinParent, amount, element);\n        } else {\n          newRowParent.__children.splice(indexWithinParent, amount);\n        }\n      } else if (element) {\n        this.data.splice(indexWithinParent, amount, element);\n      } else {\n        this.data.splice(indexWithinParent, amount);\n      }\n\n      this.rewriteCache();\n    }\n    /**\n     * Move a single row.\n     *\n     * @param {Number} fromIndex Index of the row to be moved.\n     * @param {Number} toIndex Index of the destination.\n     */\n\n  }, {\n    key: \"moveRow\",\n    value: function moveRow(fromIndex, toIndex) {\n      var targetIsParent = this.isParent(toIndex);\n      var fromParent = this.getRowParent(fromIndex);\n      var indexInFromParent = this.getRowIndexWithinParent(fromIndex);\n      var toParent = this.getRowParent(toIndex);\n\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getRowParent(toIndex - 1);\n      }\n\n      if (toParent === null || toParent === void 0) {\n        toParent = this.getDataObject(toIndex - 1);\n      }\n\n      if (!toParent) {\n        toParent = this.getDataObject(toIndex);\n        toParent.__children = [];\n      } else if (!toParent.__children) {\n        toParent.__children = [];\n      }\n\n      var previousToTargetParent = this.getRowParent(toIndex - 1);\n      var indexInToParent = targetIsParent ? this.countChildren(previousToTargetParent) : this.getRowIndexWithinParent(toIndex);\n\n      var elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);\n\n      fromParent.__children.splice(indexInFromParent, 1);\n\n      toParent.__children.splice(indexInToParent, 0, elemToMove[0]);\n    }\n    /**\n     * Move the cell meta\n     *\n     * @private\n     * @param {Number} fromIndex Index of the starting row.\n     * @param {Number} toIndex Index of the ending row.\n     */\n\n  }, {\n    key: \"moveCellMeta\",\n    value: function moveCellMeta(fromIndex, toIndex) {\n      var rowOfMeta = this.hot.getCellMetaAtRow(fromIndex);\n      this.hot.spliceCellsMeta(toIndex, 0, rowOfMeta);\n      this.hot.spliceCellsMeta(fromIndex + (fromIndex < toIndex ? 0 : 1), 1);\n    }\n    /**\n     * Translate the row index according to the `TrimRows` plugin.\n     *\n     * @private\n     * @param {Number} row Row index.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"translateTrimmedRow\",\n    value: function translateTrimmedRow(row) {\n      if (this.plugin.collapsingUI) {\n        return this.plugin.collapsingUI.translateTrimmedRow(row);\n      }\n\n      return row;\n    }\n  }]);\n\n  return DataManager;\n}();\n\nexport default DataManager;"],"mappings":"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"},"metadata":{},"sourceType":"module"}