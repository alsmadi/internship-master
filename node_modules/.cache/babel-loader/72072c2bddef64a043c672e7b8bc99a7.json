{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { arrayEach } from '../../helpers/array';\nimport { objectEach } from '../../helpers/object';\nimport { warn } from '../../helpers/console';\nimport { getMixedMonthObject, getMixedMonthName, parseDate, DEC_LENGTH, WEEK_LENGTH } from './utils';\n/**\n * This class handles the date-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar DateCalculator = /*#__PURE__*/\nfunction () {\n  function DateCalculator(_ref) {\n    var year = _ref.year,\n      _ref$allowSplitWeeks = _ref.allowSplitWeeks,\n      allowSplitWeeks = _ref$allowSplitWeeks === void 0 ? true : _ref$allowSplitWeeks,\n      _ref$hideDaysBeforeFu = _ref.hideDaysBeforeFullWeeks,\n      hideDaysBeforeFullWeeks = _ref$hideDaysBeforeFu === void 0 ? false : _ref$hideDaysBeforeFu,\n      _ref$hideDaysAfterFul = _ref.hideDaysAfterFullWeeks,\n      hideDaysAfterFullWeeks = _ref$hideDaysAfterFul === void 0 ? false : _ref$hideDaysAfterFul;\n    _classCallCheck(this, DateCalculator);\n\n    /**\n     * Year to base calculations on.\n     *\n     * @type {Number}\n     */\n    this.year = year;\n    /**\n     * First day of the week.\n     *\n     * @type {String}\n     */\n\n    this.firstWeekDay = 'monday';\n    /**\n     * The current `allowSplitWeeks` option state.\n     */\n\n    this.allowSplitWeeks = allowSplitWeeks;\n    /**\n     * The current `hideDaysBeforeFullWeeks` option state.\n     */\n\n    this.hideDaysBeforeFullWeeks = hideDaysBeforeFullWeeks;\n    /**\n     * The current `hideDaysAfterFullWeeks` option state.\n     */\n\n    this.hideDaysAfterFullWeeks = hideDaysAfterFullWeeks;\n    /**\n     * Number of week sections (full weeks + incomplete week blocks in months).\n     *\n     * @type {Number}\n     */\n\n    this.weekSectionCount = 0;\n    /**\n     * Cache of lists of months and their week/day related information.\n     * It's categorized by year, so month information for a certain year is stored under `this.monthListCache[year]`.\n     *\n     * @type {Object}\n     */\n\n    this.monthListCache = {};\n    /**\n     * Object containing references to the year days and their corresponding columns.\n     *\n     * @type {Object}\n     */\n\n    this.daysInColumns = {};\n    this.calculateWeekStructure();\n  }\n  /**\n   * Set the year as a base for calculations.\n   *\n   * @param {Number} year\n   */\n\n  _createClass(DateCalculator, [{\n    key: \"setYear\",\n    value: function setYear(year) {\n      this.year = year;\n      this.monthListCache[year] = this.calculateMonthData(year);\n      this.calculateWeekStructure(year);\n    }\n    /**\n     * Set the first week day.\n     *\n     * @param {String} day Day of the week. Available options: 'monday' or 'sunday'.\n     */\n  }, {\n    key: \"setFirstWeekDay\",\n    value: function setFirstWeekDay(day) {\n      var lowercaseDay = day.toLowerCase();\n      if (lowercaseDay !== 'monday' && lowercaseDay !== 'sunday') {\n        warn('First day of the week must be set to either Monday or Sunday');\n      }\n      this.firstWeekDay = lowercaseDay;\n      this.calculateWeekStructure();\n    }\n    /**\n     * Count week sections (full weeks + incomplete weeks in the months).\n     *\n     * @returns {Number} Week section count.\n     */\n  }, {\n    key: \"countWeekSections\",\n    value: function countWeekSections() {\n      return this.weekSectionCount;\n    }\n    /**\n     * Get the first week day.\n     *\n     * @returns {String}\n     */\n  }, {\n    key: \"getFirstWeekDay\",\n    value: function getFirstWeekDay() {\n      return this.firstWeekDay;\n    }\n    /**\n     * Get the currently applied year.\n     *\n     * @returns {Number}\n     */\n  }, {\n    key: \"getYear\",\n    value: function getYear() {\n      return this.year;\n    }\n    /**\n     * Get month list along with the month information.\n     *\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getMonthList\",\n    value: function getMonthList() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n      if (!this.monthListCache[year]) {\n        this.monthListCache[year] = this.calculateMonthData(year);\n      }\n      return this.monthListCache[year];\n    }\n    /**\n     * Get month lists for all years declared in the range bars.\n     *\n     * @returns {Object}\n     */\n  }, {\n    key: \"getFullMonthList\",\n    value: function getFullMonthList() {\n      return this.monthListCache;\n    }\n    /**\n     * Convert a date to a column number.\n     *\n     * @param {String|Date} date\n     * @returns {Number|Boolean}\n     */\n  }, {\n    key: \"dateToColumn\",\n    value: function dateToColumn(date) {\n      var convertedDate = parseDate(date);\n      if (!convertedDate) {\n        return false;\n      }\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      return this.getWeekColumn(day, month, year);\n    }\n    /**\n     * Get the column index for the provided day and month indexes.\n     *\n     * @private\n     * @param {Number} dayIndex The index of the day.\n     * @param {Number} monthIndex The index of the month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Number} Returns the column index.\n     */\n  }, {\n    key: \"getWeekColumn\",\n    value: function getWeekColumn(dayIndex, monthIndex) {\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getYear();\n      var resultColumn = null;\n      var monthCacheArray = this.getMonthCacheArray(monthIndex, year);\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column, index) {\n          if (column.indexOf(dayIndex + 1) > -1) {\n            resultColumn = parseInt(index, 10);\n            return false;\n          }\n        });\n        if (resultColumn) {\n          return false;\n        }\n      });\n      return resultColumn;\n    }\n    /**\n     * Get the cached day array for the provided month.\n     *\n     * @private\n     * @param {Number} monthIndex Index of the Month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getMonthCacheArray\",\n    value: function getMonthCacheArray(monthIndex) {\n      var _this = this;\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var monthList = this.getMonthList(year);\n      var resultArray = [];\n      if (this.allowSplitWeeks) {\n        resultArray.push(this.daysInColumns[year][monthIndex]);\n      } else {\n        var fullMonthCount = -1;\n        objectEach(this.daysInColumns[year], function (month, i) {\n          var monthObject = monthList[i];\n          if (Object.keys(month).length > 1) {\n            fullMonthCount += 1;\n          }\n          if (fullMonthCount === monthIndex) {\n            if (monthObject.daysBeforeFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) - 1]);\n            }\n            resultArray.push(month);\n            if (monthObject.daysAfterFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) + 1]);\n            }\n            return false;\n          }\n        });\n      }\n      return resultArray;\n    }\n    /**\n     * Convert a column index to a certain date.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [year] Year to be used.\n     * @returns {Object} Object in a form of {start: startDate, end: endDate}\n     */\n  }, {\n    key: \"columnToDate\",\n    value: function columnToDate(column) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var month = null;\n      objectEach(this.daysInColumns[year], function (monthCache, index) {\n        if (monthCache[column]) {\n          month = index;\n          return false;\n        }\n      });\n      var monthSection = this.daysInColumns[year][month][column];\n      if (monthSection.length === 1) {\n        var resultingDate = new Date(year, month, monthSection[0]);\n        return {\n          start: resultingDate,\n          end: resultingDate\n        };\n      }\n      return {\n        start: new Date(year, month, monthSection[0]),\n        end: new Date(year, month, monthSection[monthSection.length - 1])\n      };\n    }\n    /**\n     * Check if the provided date is a starting or an ending day of a week.\n     *\n     * @private\n     * @param {Date|String} date\n     * @returns {Array|Boolean} Returns null, if an invalid date was provided or an array of results ( [1,0] => is on the beginning of the week, [0,1] => is on the end of the week).\n     */\n  }, {\n    key: \"isOnTheEdgeOfWeek\",\n    value: function isOnTheEdgeOfWeek(date) {\n      var _this2 = this;\n      var convertedDate = parseDate(date);\n      if (!convertedDate) {\n        return null;\n      }\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      var monthCacheArray = this.getMonthCacheArray(month, year);\n      var isOnTheEdgeOfWeek = false;\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column) {\n          if (!_this2.allowSplitWeeks && column.length !== 7) {\n            if (day === 0 || day === new Date(convertedDate.getYear(), convertedDate.getMonth() + 1, 0).getDate() - 1) {\n              return true;\n            }\n          }\n          var indexOfDay = column.indexOf(day + 1);\n          if (indexOfDay === 0) {\n            isOnTheEdgeOfWeek = [1, 0];\n            return false;\n          } else if (indexOfDay === column.length - 1) {\n            isOnTheEdgeOfWeek = [0, 1];\n            return false;\n          }\n        }); // break the iteration\n\n        if (isOnTheEdgeOfWeek) {\n          return false;\n        }\n      });\n      return isOnTheEdgeOfWeek;\n    }\n    /**\n     * Generate headers for the year structure.\n     *\n     * @private\n     * @param {String} type Granulation type ('months'/'weeks'/'days')\n     * @param {Function|null} weekHeaderGenerator Function generating the looks of the week headers.\n     * @param {Number} [year=this.year] The year for the calculation.\n     * @returns {Array} The header array\n     */\n  }, {\n    key: \"generateHeaderSet\",\n    value: function generateHeaderSet(type, weekHeaderGenerator) {\n      var _this3 = this;\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.year;\n      var monthList = this.getMonthList(year);\n      var headers = [];\n      objectEach(monthList, function (month, index) {\n        var areDaysBeforeFullWeeks = month.daysBeforeFullWeeks > 0 ? 1 : 0;\n        var areDaysAfterFullWeeks = month.daysAfterFullWeeks > 0 ? 1 : 0;\n        var areDaysBeforeFullWeeksVisible = _this3.hideDaysBeforeFullWeeks ? 0 : areDaysBeforeFullWeeks;\n        var areDaysAfterFullWeeksVisible = _this3.hideDaysAfterFullWeeks ? 0 : areDaysAfterFullWeeks;\n        var headerCount = month.fullWeeks + (_this3.allowSplitWeeks ? areDaysBeforeFullWeeksVisible + areDaysAfterFullWeeksVisible : 0);\n        var monthNumber = parseInt(index, 10);\n        var headerLabel = '';\n        if (type === 'months') {\n          headers.push({\n            label: month.name,\n            colspan: headerCount\n          });\n        } else if (type === 'weeks') {\n          for (var i = 0; i < headerCount; i++) {\n            var start = null;\n            var end = null; // Mixed month's only column\n\n            if (!_this3.allowSplitWeeks && month.fullWeeks === 1) {\n              var _this3$getWeekColumnR = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                headerCount: headerCount,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                mixedMonth: true,\n                year: year\n              });\n              var _this3$getWeekColumnR2 = _slicedToArray(_this3$getWeekColumnR, 2);\n              start = _this3$getWeekColumnR2[0];\n              end = _this3$getWeekColumnR2[1];\n            } else {\n              var _this3$getWeekColumnR3 = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                headerCount: headerCount,\n                year: year\n              });\n              var _this3$getWeekColumnR4 = _slicedToArray(_this3$getWeekColumnR3, 2);\n              start = _this3$getWeekColumnR4[0];\n              end = _this3$getWeekColumnR4[1];\n            }\n            if (start === end) {\n              headerLabel = \"\".concat(start);\n            } else {\n              headerLabel = \"\".concat(start, \" -  \").concat(end);\n            }\n            headers.push(weekHeaderGenerator ? weekHeaderGenerator.call(_this3, start, end) : headerLabel);\n            _this3.addDaysToCache(monthNumber, headers.length - 1, start, end, year);\n          }\n        }\n      });\n      return headers;\n    }\n    /**\n     * Get the week column range.\n     *\n     * @private\n     * @param {Object} options The options object.\n     * @param {Object} options.monthObject The month object.\n     * @param {Number} options.monthNumber Index of the month.\n     * @param {Number} options.headerIndex Index of the header.\n     * @param {Boolean} options.areDaysBeforeFullWeeksVisible `true` if the days before full weeks are to be visible.\n     * @param {Boolean} options.areDaysAfterFullWeeksVisible `true` if the days after full weeks are to be visible.\n     * @param {Number} options.headerCount Number of headers to be generated for the provided month.\n     * @param {Boolean} [options.mixedMonth=false] `true` if the header is the single header of a mixed month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getWeekColumnRange\",\n    value: function getWeekColumnRange(_ref2) {\n      var monthObject = _ref2.monthObject,\n        monthNumber = _ref2.monthNumber,\n        headerIndex = _ref2.headerIndex,\n        headerCount = _ref2.headerCount,\n        areDaysBeforeFullWeeksVisible = _ref2.areDaysBeforeFullWeeksVisible,\n        areDaysAfterFullWeeksVisible = _ref2.areDaysAfterFullWeeksVisible,\n        _ref2$mixedMonth = _ref2.mixedMonth,\n        mixedMonth = _ref2$mixedMonth === void 0 ? false : _ref2$mixedMonth,\n        _ref2$year = _ref2.year,\n        year = _ref2$year === void 0 ? this.year : _ref2$year;\n      var monthList = this.getMonthList(year);\n      var allowSplitWeeks = this.allowSplitWeeks;\n      var start = null;\n      var end = null;\n      if (mixedMonth) {\n        if (monthNumber === 0) {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = DEC_LENGTH - (WEEK_LENGTH - end) + 1;\n        } else if (monthNumber === monthList.length - 1) {\n          end = WEEK_LENGTH - monthList[monthNumber - 1].daysAfterFullWeeks;\n          start = monthList[monthNumber - 1].days - monthList[monthNumber - 1].daysAfterFullWeeks + 1;\n        } else {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = monthList[monthNumber - 1].days - (WEEK_LENGTH - end) + 1;\n        }\n      } else if (allowSplitWeeks && areDaysBeforeFullWeeksVisible && headerIndex === 0) {\n        start = headerIndex + 1;\n        end = monthObject.daysBeforeFullWeeks;\n      } else if (allowSplitWeeks && areDaysAfterFullWeeksVisible && headerIndex === headerCount - 1) {\n        start = monthObject.days - monthObject.daysAfterFullWeeks + 1;\n        end = monthObject.days;\n      } else {\n        start = null;\n        if (allowSplitWeeks) {\n          start = monthObject.daysBeforeFullWeeks + (headerIndex - areDaysBeforeFullWeeksVisible) * WEEK_LENGTH + 1;\n        } else {\n          start = monthObject.daysBeforeFullWeeks + headerIndex * WEEK_LENGTH + 1;\n        }\n        end = start + WEEK_LENGTH - 1;\n      }\n      return [start, end];\n    }\n    /**\n     * Add days to the column/day cache.\n     *\n     * @private\n     * @param {Number} monthNumber Index of the month.\n     * @param {Number} columnNumber Index of the column.\n     * @param {Number} start First day in the column.\n     * @param {Number} end Last day in the column.\n     * @param {Number} [year] Year to process.\n     */\n  }, {\n    key: \"addDaysToCache\",\n    value: function addDaysToCache(monthNumber, columnNumber, start, end) {\n      var year = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.getYear();\n      if (!this.daysInColumns[year]) {\n        this.daysInColumns[year] = {};\n      }\n      if (!this.daysInColumns[year][monthNumber]) {\n        this.daysInColumns[year][monthNumber] = {};\n      }\n      if (!this.daysInColumns[year][monthNumber][columnNumber]) {\n        this.daysInColumns[year][monthNumber][columnNumber] = [];\n      }\n      if (start <= end) {\n        for (var dayIndex = start; dayIndex <= end; dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(dayIndex);\n        }\n      } else {\n        var previousMonthDaysCount = monthNumber - 1 >= 0 ? this.countMonthDays(monthNumber) : 31;\n        for (var _dayIndex = start; _dayIndex <= previousMonthDaysCount; _dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex);\n        }\n        for (var _dayIndex2 = 1; _dayIndex2 <= end; _dayIndex2++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex2);\n        }\n      }\n    }\n    /**\n     * Check if the provided dates can be used in a range bar.\n     *\n     * @param {Date|String} startDate Range start date.\n     * @param {Date|String} endDate Range end date.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isValidRangeBarData\",\n    value: function isValidRangeBarData(startDate, endDate) {\n      var startDateParsed = parseDate(startDate);\n      var endDateParsed = parseDate(endDate);\n      return startDateParsed && endDateParsed && startDateParsed.getTime() <= endDateParsed.getTime();\n    }\n    /**\n     * Calculate the month/day related information.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Array}\n     */\n  }, {\n    key: \"calculateMonthData\",\n    value: function calculateMonthData() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n      return [{\n        name: 'January',\n        days: 31\n      }, {\n        name: 'February',\n        days: new Date(year, 2, 0).getDate()\n      }, {\n        name: 'March',\n        days: 31\n      }, {\n        name: 'April',\n        days: 30\n      }, {\n        name: 'May',\n        days: 31\n      }, {\n        name: 'June',\n        days: 30\n      }, {\n        name: 'July',\n        days: 31\n      }, {\n        name: 'August',\n        days: 31\n      }, {\n        name: 'September',\n        days: 30\n      }, {\n        name: 'October',\n        days: 31\n      }, {\n        name: 'November',\n        days: 30\n      }, {\n        name: 'December',\n        days: 31\n      }].slice(0);\n    }\n    /**\n     * Count the number of months.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n  }, {\n    key: \"countMonths\",\n    value: function countMonths() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      return this.monthListCache[year].length;\n    }\n    /**\n     * Count days in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n  }, {\n    key: \"countMonthDays\",\n    value: function countMonthDays(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].days;\n    }\n    /**\n     * Count full weeks in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n  }, {\n    key: \"countMonthFullWeeks\",\n    value: function countMonthFullWeeks(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].fullWeeks;\n    }\n    /**\n     * Calculate week structure within defined months.\n     *\n     * @private\n     * @param {Number} [year] Year for the calculation.\n     */\n  }, {\n    key: \"calculateWeekStructure\",\n    value: function calculateWeekStructure() {\n      var _this4 = this;\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      this.monthListCache[year] = this.calculateMonthData(year);\n      var firstWeekDay = this.getFirstWeekDay();\n      var monthList = this.getMonthList(year);\n      var mixedMonthToAdd = [];\n      var daysBeforeFullWeeksRatio = this.hideDaysBeforeFullWeeks ? 0 : 1;\n      var daysAfterFullWeeksRatio = this.hideDaysAfterFullWeeks ? 0 : 1;\n      var weekOffset = 0;\n      var weekSectionCount = 0;\n      if (firstWeekDay === 'monday') {\n        weekOffset = 1;\n      }\n      arrayEach(monthList, function (currentMonth, monthIndex) {\n        var firstMonthDay = new Date(year, monthIndex, 1).getDay();\n        var mixedMonthsAdded = 0;\n        currentMonth.daysBeforeFullWeeks = (7 - firstMonthDay + weekOffset) % 7;\n        if (!_this4.allowSplitWeeks && currentMonth.daysBeforeFullWeeks) {\n          mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), monthIndex));\n          mixedMonthsAdded += 1;\n        }\n        currentMonth.fullWeeks = Math.floor((currentMonth.days - currentMonth.daysBeforeFullWeeks) / 7);\n        currentMonth.daysAfterFullWeeks = currentMonth.days - currentMonth.daysBeforeFullWeeks - 7 * currentMonth.fullWeeks;\n        if (!_this4.allowSplitWeeks) {\n          if (monthIndex === monthList.length - 1 && currentMonth.daysAfterFullWeeks) {\n            mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), null));\n            mixedMonthsAdded += 1;\n          }\n          weekSectionCount += currentMonth.fullWeeks + mixedMonthsAdded;\n        } else {\n          var numberOfPartialWeeksBefore = daysBeforeFullWeeksRatio * (currentMonth.daysBeforeFullWeeks ? 1 : 0);\n          var numberOfPartialWeeksAfter = daysAfterFullWeeksRatio * (currentMonth.daysAfterFullWeeks ? 1 : 0);\n          weekSectionCount += currentMonth.fullWeeks + numberOfPartialWeeksBefore + numberOfPartialWeeksAfter;\n        }\n      });\n      arrayEach(mixedMonthToAdd, function (monthObject, monthIndex) {\n        var index = monthObject.index;\n        delete monthObject.index;\n        _this4.addMixedMonth(index === null ? index : monthIndex + index, monthObject, year);\n      });\n      if (year === this.getYear()) {\n        this.weekSectionCount = weekSectionCount;\n      }\n    }\n    /**\n     * Add a mixed (e.g. 'Jan/Feb') month to the month list.\n     *\n     * @private\n     * @param {Number} index Index for the month.\n     * @param {Object} monthObject The month object.\n     * @param {Number} [year] Year for the calculation.\n     */\n  }, {\n    key: \"addMixedMonth\",\n    value: function addMixedMonth(index, monthObject, year) {\n      if (index === null) {\n        this.monthListCache[year].push(monthObject);\n      } else {\n        this.monthListCache[year].splice(index, 0, monthObject);\n      }\n    }\n  }]);\n  return DateCalculator;\n}();\nexport default DateCalculator;","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","arrayEach","objectEach","warn","getMixedMonthObject","getMixedMonthName","parseDate","DEC_LENGTH","WEEK_LENGTH","DateCalculator","_ref","year","_ref$allowSplitWeeks","allowSplitWeeks","_ref$hideDaysBeforeFu","hideDaysBeforeFullWeeks","_ref$hideDaysAfterFul","hideDaysAfterFullWeeks","firstWeekDay","weekSectionCount","monthListCache","daysInColumns","calculateWeekStructure","setYear","calculateMonthData","setFirstWeekDay","day","lowercaseDay","toLowerCase","countWeekSections","getFirstWeekDay","getYear","getMonthList","arguments","getFullMonthList","dateToColumn","date","convertedDate","month","getMonth","getDate","getFullYear","getWeekColumn","dayIndex","monthIndex","resultColumn","monthCacheArray","getMonthCacheArray","monthCache","column","index","indexOf","parseInt","_this","monthList","resultArray","fullMonthCount","monthObject","keys","daysBeforeFullWeeks","daysAfterFullWeeks","columnToDate","monthSection","resultingDate","Date","start","end","isOnTheEdgeOfWeek","_this2","indexOfDay","generateHeaderSet","type","weekHeaderGenerator","_this3","headers","areDaysBeforeFullWeeks","areDaysAfterFullWeeks","areDaysBeforeFullWeeksVisible","areDaysAfterFullWeeksVisible","headerCount","fullWeeks","monthNumber","headerLabel","label","name","colspan","_this3$getWeekColumnR","getWeekColumnRange","headerIndex","mixedMonth","_this3$getWeekColumnR2","_this3$getWeekColumnR3","_this3$getWeekColumnR4","concat","addDaysToCache","_ref2","_ref2$mixedMonth","_ref2$year","days","columnNumber","previousMonthDaysCount","countMonthDays","_dayIndex","_dayIndex2","isValidRangeBarData","startDate","endDate","startDateParsed","endDateParsed","getTime","slice","countMonths","countMonthFullWeeks","_this4","mixedMonthToAdd","daysBeforeFullWeeksRatio","daysAfterFullWeeksRatio","weekOffset","currentMonth","firstMonthDay","getDay","mixedMonthsAdded","Math","floor","numberOfPartialWeeksBefore","numberOfPartialWeeksAfter","addMixedMonth","splice"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/ganttChart/dateCalculator.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { arrayEach } from '../../helpers/array';\nimport { objectEach } from '../../helpers/object';\nimport { warn } from '../../helpers/console';\nimport { getMixedMonthObject, getMixedMonthName, parseDate, DEC_LENGTH, WEEK_LENGTH } from './utils';\n/**\n * This class handles the date-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar DateCalculator =\n/*#__PURE__*/\nfunction () {\n  function DateCalculator(_ref) {\n    var year = _ref.year,\n        _ref$allowSplitWeeks = _ref.allowSplitWeeks,\n        allowSplitWeeks = _ref$allowSplitWeeks === void 0 ? true : _ref$allowSplitWeeks,\n        _ref$hideDaysBeforeFu = _ref.hideDaysBeforeFullWeeks,\n        hideDaysBeforeFullWeeks = _ref$hideDaysBeforeFu === void 0 ? false : _ref$hideDaysBeforeFu,\n        _ref$hideDaysAfterFul = _ref.hideDaysAfterFullWeeks,\n        hideDaysAfterFullWeeks = _ref$hideDaysAfterFul === void 0 ? false : _ref$hideDaysAfterFul;\n\n    _classCallCheck(this, DateCalculator);\n\n    /**\n     * Year to base calculations on.\n     *\n     * @type {Number}\n     */\n    this.year = year;\n    /**\n     * First day of the week.\n     *\n     * @type {String}\n     */\n\n    this.firstWeekDay = 'monday';\n    /**\n     * The current `allowSplitWeeks` option state.\n     */\n\n    this.allowSplitWeeks = allowSplitWeeks;\n    /**\n     * The current `hideDaysBeforeFullWeeks` option state.\n     */\n\n    this.hideDaysBeforeFullWeeks = hideDaysBeforeFullWeeks;\n    /**\n     * The current `hideDaysAfterFullWeeks` option state.\n     */\n\n    this.hideDaysAfterFullWeeks = hideDaysAfterFullWeeks;\n    /**\n     * Number of week sections (full weeks + incomplete week blocks in months).\n     *\n     * @type {Number}\n     */\n\n    this.weekSectionCount = 0;\n    /**\n     * Cache of lists of months and their week/day related information.\n     * It's categorized by year, so month information for a certain year is stored under `this.monthListCache[year]`.\n     *\n     * @type {Object}\n     */\n\n    this.monthListCache = {};\n    /**\n     * Object containing references to the year days and their corresponding columns.\n     *\n     * @type {Object}\n     */\n\n    this.daysInColumns = {};\n    this.calculateWeekStructure();\n  }\n  /**\n   * Set the year as a base for calculations.\n   *\n   * @param {Number} year\n   */\n\n\n  _createClass(DateCalculator, [{\n    key: \"setYear\",\n    value: function setYear(year) {\n      this.year = year;\n      this.monthListCache[year] = this.calculateMonthData(year);\n      this.calculateWeekStructure(year);\n    }\n    /**\n     * Set the first week day.\n     *\n     * @param {String} day Day of the week. Available options: 'monday' or 'sunday'.\n     */\n\n  }, {\n    key: \"setFirstWeekDay\",\n    value: function setFirstWeekDay(day) {\n      var lowercaseDay = day.toLowerCase();\n\n      if (lowercaseDay !== 'monday' && lowercaseDay !== 'sunday') {\n        warn('First day of the week must be set to either Monday or Sunday');\n      }\n\n      this.firstWeekDay = lowercaseDay;\n      this.calculateWeekStructure();\n    }\n    /**\n     * Count week sections (full weeks + incomplete weeks in the months).\n     *\n     * @returns {Number} Week section count.\n     */\n\n  }, {\n    key: \"countWeekSections\",\n    value: function countWeekSections() {\n      return this.weekSectionCount;\n    }\n    /**\n     * Get the first week day.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: \"getFirstWeekDay\",\n    value: function getFirstWeekDay() {\n      return this.firstWeekDay;\n    }\n    /**\n     * Get the currently applied year.\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getYear\",\n    value: function getYear() {\n      return this.year;\n    }\n    /**\n     * Get month list along with the month information.\n     *\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getMonthList\",\n    value: function getMonthList() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n\n      if (!this.monthListCache[year]) {\n        this.monthListCache[year] = this.calculateMonthData(year);\n      }\n\n      return this.monthListCache[year];\n    }\n    /**\n     * Get month lists for all years declared in the range bars.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"getFullMonthList\",\n    value: function getFullMonthList() {\n      return this.monthListCache;\n    }\n    /**\n     * Convert a date to a column number.\n     *\n     * @param {String|Date} date\n     * @returns {Number|Boolean}\n     */\n\n  }, {\n    key: \"dateToColumn\",\n    value: function dateToColumn(date) {\n      var convertedDate = parseDate(date);\n\n      if (!convertedDate) {\n        return false;\n      }\n\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      return this.getWeekColumn(day, month, year);\n    }\n    /**\n     * Get the column index for the provided day and month indexes.\n     *\n     * @private\n     * @param {Number} dayIndex The index of the day.\n     * @param {Number} monthIndex The index of the month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Number} Returns the column index.\n     */\n\n  }, {\n    key: \"getWeekColumn\",\n    value: function getWeekColumn(dayIndex, monthIndex) {\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getYear();\n      var resultColumn = null;\n      var monthCacheArray = this.getMonthCacheArray(monthIndex, year);\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column, index) {\n          if (column.indexOf(dayIndex + 1) > -1) {\n            resultColumn = parseInt(index, 10);\n            return false;\n          }\n        });\n\n        if (resultColumn) {\n          return false;\n        }\n      });\n      return resultColumn;\n    }\n    /**\n     * Get the cached day array for the provided month.\n     *\n     * @private\n     * @param {Number} monthIndex Index of the Month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getMonthCacheArray\",\n    value: function getMonthCacheArray(monthIndex) {\n      var _this = this;\n\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var monthList = this.getMonthList(year);\n      var resultArray = [];\n\n      if (this.allowSplitWeeks) {\n        resultArray.push(this.daysInColumns[year][monthIndex]);\n      } else {\n        var fullMonthCount = -1;\n        objectEach(this.daysInColumns[year], function (month, i) {\n          var monthObject = monthList[i];\n\n          if (Object.keys(month).length > 1) {\n            fullMonthCount += 1;\n          }\n\n          if (fullMonthCount === monthIndex) {\n            if (monthObject.daysBeforeFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) - 1]);\n            }\n\n            resultArray.push(month);\n\n            if (monthObject.daysAfterFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) + 1]);\n            }\n\n            return false;\n          }\n        });\n      }\n\n      return resultArray;\n    }\n    /**\n     * Convert a column index to a certain date.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [year] Year to be used.\n     * @returns {Object} Object in a form of {start: startDate, end: endDate}\n     */\n\n  }, {\n    key: \"columnToDate\",\n    value: function columnToDate(column) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var month = null;\n      objectEach(this.daysInColumns[year], function (monthCache, index) {\n        if (monthCache[column]) {\n          month = index;\n          return false;\n        }\n      });\n      var monthSection = this.daysInColumns[year][month][column];\n\n      if (monthSection.length === 1) {\n        var resultingDate = new Date(year, month, monthSection[0]);\n        return {\n          start: resultingDate,\n          end: resultingDate\n        };\n      }\n\n      return {\n        start: new Date(year, month, monthSection[0]),\n        end: new Date(year, month, monthSection[monthSection.length - 1])\n      };\n    }\n    /**\n     * Check if the provided date is a starting or an ending day of a week.\n     *\n     * @private\n     * @param {Date|String} date\n     * @returns {Array|Boolean} Returns null, if an invalid date was provided or an array of results ( [1,0] => is on the beginning of the week, [0,1] => is on the end of the week).\n     */\n\n  }, {\n    key: \"isOnTheEdgeOfWeek\",\n    value: function isOnTheEdgeOfWeek(date) {\n      var _this2 = this;\n\n      var convertedDate = parseDate(date);\n\n      if (!convertedDate) {\n        return null;\n      }\n\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      var monthCacheArray = this.getMonthCacheArray(month, year);\n      var isOnTheEdgeOfWeek = false;\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column) {\n          if (!_this2.allowSplitWeeks && column.length !== 7) {\n            if (day === 0 || day === new Date(convertedDate.getYear(), convertedDate.getMonth() + 1, 0).getDate() - 1) {\n              return true;\n            }\n          }\n\n          var indexOfDay = column.indexOf(day + 1);\n\n          if (indexOfDay === 0) {\n            isOnTheEdgeOfWeek = [1, 0];\n            return false;\n          } else if (indexOfDay === column.length - 1) {\n            isOnTheEdgeOfWeek = [0, 1];\n            return false;\n          }\n        }); // break the iteration\n\n        if (isOnTheEdgeOfWeek) {\n          return false;\n        }\n      });\n      return isOnTheEdgeOfWeek;\n    }\n    /**\n     * Generate headers for the year structure.\n     *\n     * @private\n     * @param {String} type Granulation type ('months'/'weeks'/'days')\n     * @param {Function|null} weekHeaderGenerator Function generating the looks of the week headers.\n     * @param {Number} [year=this.year] The year for the calculation.\n     * @returns {Array} The header array\n     */\n\n  }, {\n    key: \"generateHeaderSet\",\n    value: function generateHeaderSet(type, weekHeaderGenerator) {\n      var _this3 = this;\n\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.year;\n      var monthList = this.getMonthList(year);\n      var headers = [];\n      objectEach(monthList, function (month, index) {\n        var areDaysBeforeFullWeeks = month.daysBeforeFullWeeks > 0 ? 1 : 0;\n        var areDaysAfterFullWeeks = month.daysAfterFullWeeks > 0 ? 1 : 0;\n        var areDaysBeforeFullWeeksVisible = _this3.hideDaysBeforeFullWeeks ? 0 : areDaysBeforeFullWeeks;\n        var areDaysAfterFullWeeksVisible = _this3.hideDaysAfterFullWeeks ? 0 : areDaysAfterFullWeeks;\n        var headerCount = month.fullWeeks + (_this3.allowSplitWeeks ? areDaysBeforeFullWeeksVisible + areDaysAfterFullWeeksVisible : 0);\n        var monthNumber = parseInt(index, 10);\n        var headerLabel = '';\n\n        if (type === 'months') {\n          headers.push({\n            label: month.name,\n            colspan: headerCount\n          });\n        } else if (type === 'weeks') {\n          for (var i = 0; i < headerCount; i++) {\n            var start = null;\n            var end = null; // Mixed month's only column\n\n            if (!_this3.allowSplitWeeks && month.fullWeeks === 1) {\n              var _this3$getWeekColumnR = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                headerCount: headerCount,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                mixedMonth: true,\n                year: year\n              });\n\n              var _this3$getWeekColumnR2 = _slicedToArray(_this3$getWeekColumnR, 2);\n\n              start = _this3$getWeekColumnR2[0];\n              end = _this3$getWeekColumnR2[1];\n            } else {\n              var _this3$getWeekColumnR3 = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                headerCount: headerCount,\n                year: year\n              });\n\n              var _this3$getWeekColumnR4 = _slicedToArray(_this3$getWeekColumnR3, 2);\n\n              start = _this3$getWeekColumnR4[0];\n              end = _this3$getWeekColumnR4[1];\n            }\n\n            if (start === end) {\n              headerLabel = \"\".concat(start);\n            } else {\n              headerLabel = \"\".concat(start, \" -  \").concat(end);\n            }\n\n            headers.push(weekHeaderGenerator ? weekHeaderGenerator.call(_this3, start, end) : headerLabel);\n\n            _this3.addDaysToCache(monthNumber, headers.length - 1, start, end, year);\n          }\n        }\n      });\n      return headers;\n    }\n    /**\n     * Get the week column range.\n     *\n     * @private\n     * @param {Object} options The options object.\n     * @param {Object} options.monthObject The month object.\n     * @param {Number} options.monthNumber Index of the month.\n     * @param {Number} options.headerIndex Index of the header.\n     * @param {Boolean} options.areDaysBeforeFullWeeksVisible `true` if the days before full weeks are to be visible.\n     * @param {Boolean} options.areDaysAfterFullWeeksVisible `true` if the days after full weeks are to be visible.\n     * @param {Number} options.headerCount Number of headers to be generated for the provided month.\n     * @param {Boolean} [options.mixedMonth=false] `true` if the header is the single header of a mixed month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getWeekColumnRange\",\n    value: function getWeekColumnRange(_ref2) {\n      var monthObject = _ref2.monthObject,\n          monthNumber = _ref2.monthNumber,\n          headerIndex = _ref2.headerIndex,\n          headerCount = _ref2.headerCount,\n          areDaysBeforeFullWeeksVisible = _ref2.areDaysBeforeFullWeeksVisible,\n          areDaysAfterFullWeeksVisible = _ref2.areDaysAfterFullWeeksVisible,\n          _ref2$mixedMonth = _ref2.mixedMonth,\n          mixedMonth = _ref2$mixedMonth === void 0 ? false : _ref2$mixedMonth,\n          _ref2$year = _ref2.year,\n          year = _ref2$year === void 0 ? this.year : _ref2$year;\n      var monthList = this.getMonthList(year);\n      var allowSplitWeeks = this.allowSplitWeeks;\n      var start = null;\n      var end = null;\n\n      if (mixedMonth) {\n        if (monthNumber === 0) {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = DEC_LENGTH - (WEEK_LENGTH - end) + 1;\n        } else if (monthNumber === monthList.length - 1) {\n          end = WEEK_LENGTH - monthList[monthNumber - 1].daysAfterFullWeeks;\n          start = monthList[monthNumber - 1].days - monthList[monthNumber - 1].daysAfterFullWeeks + 1;\n        } else {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = monthList[monthNumber - 1].days - (WEEK_LENGTH - end) + 1;\n        }\n      } else if (allowSplitWeeks && areDaysBeforeFullWeeksVisible && headerIndex === 0) {\n        start = headerIndex + 1;\n        end = monthObject.daysBeforeFullWeeks;\n      } else if (allowSplitWeeks && areDaysAfterFullWeeksVisible && headerIndex === headerCount - 1) {\n        start = monthObject.days - monthObject.daysAfterFullWeeks + 1;\n        end = monthObject.days;\n      } else {\n        start = null;\n\n        if (allowSplitWeeks) {\n          start = monthObject.daysBeforeFullWeeks + (headerIndex - areDaysBeforeFullWeeksVisible) * WEEK_LENGTH + 1;\n        } else {\n          start = monthObject.daysBeforeFullWeeks + headerIndex * WEEK_LENGTH + 1;\n        }\n\n        end = start + WEEK_LENGTH - 1;\n      }\n\n      return [start, end];\n    }\n    /**\n     * Add days to the column/day cache.\n     *\n     * @private\n     * @param {Number} monthNumber Index of the month.\n     * @param {Number} columnNumber Index of the column.\n     * @param {Number} start First day in the column.\n     * @param {Number} end Last day in the column.\n     * @param {Number} [year] Year to process.\n     */\n\n  }, {\n    key: \"addDaysToCache\",\n    value: function addDaysToCache(monthNumber, columnNumber, start, end) {\n      var year = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.getYear();\n\n      if (!this.daysInColumns[year]) {\n        this.daysInColumns[year] = {};\n      }\n\n      if (!this.daysInColumns[year][monthNumber]) {\n        this.daysInColumns[year][monthNumber] = {};\n      }\n\n      if (!this.daysInColumns[year][monthNumber][columnNumber]) {\n        this.daysInColumns[year][monthNumber][columnNumber] = [];\n      }\n\n      if (start <= end) {\n        for (var dayIndex = start; dayIndex <= end; dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(dayIndex);\n        }\n      } else {\n        var previousMonthDaysCount = monthNumber - 1 >= 0 ? this.countMonthDays(monthNumber) : 31;\n\n        for (var _dayIndex = start; _dayIndex <= previousMonthDaysCount; _dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex);\n        }\n\n        for (var _dayIndex2 = 1; _dayIndex2 <= end; _dayIndex2++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex2);\n        }\n      }\n    }\n    /**\n     * Check if the provided dates can be used in a range bar.\n     *\n     * @param {Date|String} startDate Range start date.\n     * @param {Date|String} endDate Range end date.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isValidRangeBarData\",\n    value: function isValidRangeBarData(startDate, endDate) {\n      var startDateParsed = parseDate(startDate);\n      var endDateParsed = parseDate(endDate);\n      return startDateParsed && endDateParsed && startDateParsed.getTime() <= endDateParsed.getTime();\n    }\n    /**\n     * Calculate the month/day related information.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"calculateMonthData\",\n    value: function calculateMonthData() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n      return [{\n        name: 'January',\n        days: 31\n      }, {\n        name: 'February',\n        days: new Date(year, 2, 0).getDate()\n      }, {\n        name: 'March',\n        days: 31\n      }, {\n        name: 'April',\n        days: 30\n      }, {\n        name: 'May',\n        days: 31\n      }, {\n        name: 'June',\n        days: 30\n      }, {\n        name: 'July',\n        days: 31\n      }, {\n        name: 'August',\n        days: 31\n      }, {\n        name: 'September',\n        days: 30\n      }, {\n        name: 'October',\n        days: 31\n      }, {\n        name: 'November',\n        days: 30\n      }, {\n        name: 'December',\n        days: 31\n      }].slice(0);\n    }\n    /**\n     * Count the number of months.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonths\",\n    value: function countMonths() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      return this.monthListCache[year].length;\n    }\n    /**\n     * Count days in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonthDays\",\n    value: function countMonthDays(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].days;\n    }\n    /**\n     * Count full weeks in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonthFullWeeks\",\n    value: function countMonthFullWeeks(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].fullWeeks;\n    }\n    /**\n     * Calculate week structure within defined months.\n     *\n     * @private\n     * @param {Number} [year] Year for the calculation.\n     */\n\n  }, {\n    key: \"calculateWeekStructure\",\n    value: function calculateWeekStructure() {\n      var _this4 = this;\n\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      this.monthListCache[year] = this.calculateMonthData(year);\n      var firstWeekDay = this.getFirstWeekDay();\n      var monthList = this.getMonthList(year);\n      var mixedMonthToAdd = [];\n      var daysBeforeFullWeeksRatio = this.hideDaysBeforeFullWeeks ? 0 : 1;\n      var daysAfterFullWeeksRatio = this.hideDaysAfterFullWeeks ? 0 : 1;\n      var weekOffset = 0;\n      var weekSectionCount = 0;\n\n      if (firstWeekDay === 'monday') {\n        weekOffset = 1;\n      }\n\n      arrayEach(monthList, function (currentMonth, monthIndex) {\n        var firstMonthDay = new Date(year, monthIndex, 1).getDay();\n        var mixedMonthsAdded = 0;\n        currentMonth.daysBeforeFullWeeks = (7 - firstMonthDay + weekOffset) % 7;\n\n        if (!_this4.allowSplitWeeks && currentMonth.daysBeforeFullWeeks) {\n          mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), monthIndex));\n          mixedMonthsAdded += 1;\n        }\n\n        currentMonth.fullWeeks = Math.floor((currentMonth.days - currentMonth.daysBeforeFullWeeks) / 7);\n        currentMonth.daysAfterFullWeeks = currentMonth.days - currentMonth.daysBeforeFullWeeks - 7 * currentMonth.fullWeeks;\n\n        if (!_this4.allowSplitWeeks) {\n          if (monthIndex === monthList.length - 1 && currentMonth.daysAfterFullWeeks) {\n            mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), null));\n            mixedMonthsAdded += 1;\n          }\n\n          weekSectionCount += currentMonth.fullWeeks + mixedMonthsAdded;\n        } else {\n          var numberOfPartialWeeksBefore = daysBeforeFullWeeksRatio * (currentMonth.daysBeforeFullWeeks ? 1 : 0);\n          var numberOfPartialWeeksAfter = daysAfterFullWeeksRatio * (currentMonth.daysAfterFullWeeks ? 1 : 0);\n          weekSectionCount += currentMonth.fullWeeks + numberOfPartialWeeksBefore + numberOfPartialWeeksAfter;\n        }\n      });\n      arrayEach(mixedMonthToAdd, function (monthObject, monthIndex) {\n        var index = monthObject.index;\n        delete monthObject.index;\n\n        _this4.addMixedMonth(index === null ? index : monthIndex + index, monthObject, year);\n      });\n\n      if (year === this.getYear()) {\n        this.weekSectionCount = weekSectionCount;\n      }\n    }\n    /**\n     * Add a mixed (e.g. 'Jan/Feb') month to the month list.\n     *\n     * @private\n     * @param {Number} index Index for the month.\n     * @param {Object} monthObject The month object.\n     * @param {Number} [year] Year for the calculation.\n     */\n\n  }, {\n    key: \"addMixedMonth\",\n    value: function addMixedMonth(index, monthObject, year) {\n      if (index === null) {\n        this.monthListCache[year].push(monthObject);\n      } else {\n        this.monthListCache[year].splice(index, 0, monthObject);\n      }\n    }\n  }]);\n\n  return DateCalculator;\n}();\n\nexport default DateCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module"}