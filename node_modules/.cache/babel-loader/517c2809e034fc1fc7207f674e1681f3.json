{"ast":null,"code":"import { defineGetter } from '../../../../../helpers/object';\nvar MIXIN_NAME = 'stickyRowsTop';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the top rows in the vertical axis.\n *\n * @type {Object}\n */\n\nvar stickyRowsTop = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n    if (totalRows === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.getRenderedRowsCount() - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {Number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsTop'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\ndefineGetter(stickyRowsTop, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsTop;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","stickyRowsTop","getFirstRenderedRow","totalRows","wot","getSetting","getFirstVisibleRow","getLastRenderedRow","getRenderedRowsCount","getLastVisibleRow","Math","min","getVisibleRowsCount","writable","enumerable"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/3rdparty/walkontable/src/table/mixin/stickyRowsTop.js"],"sourcesContent":["import { defineGetter } from '../../../../../helpers/object';\nvar MIXIN_NAME = 'stickyRowsTop';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the top rows in the vertical axis.\n *\n * @type {Object}\n */\n\nvar stickyRowsTop = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n\n    if (totalRows === 0) {\n      return -1;\n    }\n\n    return 0;\n  },\n\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.getRenderedRowsCount() - 1;\n  },\n\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {Number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsTop'), totalRows);\n  },\n\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\ndefineGetter(stickyRowsTop, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsTop;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,+BAA+B;AAC5D,IAAIC,UAAU,GAAG,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAG;EAClB;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAASA,mBAAmB,GAAG;IAClD,IAAIC,SAAS,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC;IAEhD,IAAIF,SAAS,KAAK,CAAC,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,CAAC;EACV,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,kBAAkB,EAAE,SAASA,kBAAkB,GAAG;IAChD,OAAO,IAAI,CAACJ,mBAAmB,EAAE;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEK,kBAAkB,EAAE,SAASA,kBAAkB,GAAG;IAChD,OAAO,IAAI,CAACC,oBAAoB,EAAE,GAAG,CAAC;EACxC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,iBAAiB,EAAE,SAASA,iBAAiB,GAAG;IAC9C,OAAO,IAAI,CAACF,kBAAkB,EAAE;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,SAASA,oBAAoB,GAAG;IACpD,IAAIL,SAAS,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC;IAChD,OAAOK,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC,EAAEF,SAAS,CAAC;EACjE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACES,mBAAmB,EAAE,SAASA,mBAAmB,GAAG;IAClD,OAAO,IAAI,CAACJ,oBAAoB,EAAE;EACpC;AACF,CAAC;AACDT,YAAY,CAACE,aAAa,EAAE,YAAY,EAAED,UAAU,EAAE;EACpDa,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAeb,aAAa"},"metadata":{},"sourceType":"module"}