{"ast":null,"code":"import { arrayEach } from './../helpers/array';\nimport { getLanguageDictionary } from './dictionariesManager';\nimport { getPhraseFormatters } from './phraseFormatters';\nimport { isUndefined } from '../helpers/mixed';\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {String} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {String}\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  var languageDictionary = getLanguageDictionary(languageCode);\n  if (languageDictionary === null) {\n    return null;\n  }\n  var phrasePropositions = languageDictionary[dictionaryKey];\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n  return formattedPhrase;\n}\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\n\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  var formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), function (formatter) {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}","map":{"version":3,"names":["arrayEach","getLanguageDictionary","getPhraseFormatters","isUndefined","getTranslatedPhrase","languageCode","dictionaryKey","argumentsForFormatters","languageDictionary","phrasePropositions","formattedPhrase","getFormattedPhrase","Array","isArray","formattedPhrasePropositions","formatter"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/i18n/index.js"],"sourcesContent":["import { arrayEach } from './../helpers/array';\nimport { getLanguageDictionary } from './dictionariesManager';\nimport { getPhraseFormatters } from './phraseFormatters';\nimport { isUndefined } from '../helpers/mixed';\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {String} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {String}\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  var languageDictionary = getLanguageDictionary(languageCode);\n\n  if (languageDictionary === null) {\n    return null;\n  }\n\n  var phrasePropositions = languageDictionary[dictionaryKey];\n\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n\n  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n\n  return formattedPhrase;\n}\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\n\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  var formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), function (formatter) {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAmB,CAACC,YAAY,EAAEC,aAAa,EAAEC,sBAAsB,EAAE;EACvF,IAAIC,kBAAkB,GAAGP,qBAAqB,CAACI,YAAY,CAAC;EAE5D,IAAIG,kBAAkB,KAAK,IAAI,EAAE;IAC/B,OAAO,IAAI;EACb;EAEA,IAAIC,kBAAkB,GAAGD,kBAAkB,CAACF,aAAa,CAAC;EAE1D,IAAIH,WAAW,CAACM,kBAAkB,CAAC,EAAE;IACnC,OAAO,IAAI;EACb;EAEA,IAAIC,eAAe,GAAGC,kBAAkB,CAACF,kBAAkB,EAAEF,sBAAsB,CAAC;EAEpF,IAAIK,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,EAAE;IAClC,OAAOA,eAAe,CAAC,CAAC,CAAC;EAC3B;EAEA,OAAOA,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,kBAAkB,CAACF,kBAAkB,EAAEF,sBAAsB,EAAE;EACtE,IAAIO,2BAA2B,GAAGL,kBAAkB;EACpDT,SAAS,CAACE,mBAAmB,EAAE,EAAE,UAAUa,SAAS,EAAE;IACpDD,2BAA2B,GAAGC,SAAS,CAACN,kBAAkB,EAAEF,sBAAsB,CAAC;EACrF,CAAC,CAAC;EACF,OAAOO,2BAA2B;AACpC"},"metadata":{},"sourceType":"module"}