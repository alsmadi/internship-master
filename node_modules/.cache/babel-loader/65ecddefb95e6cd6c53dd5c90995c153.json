{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get(target, property, receiver || target);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport BasePlugin from '../_base';\nimport { rangeEach } from '../../helpers/number';\nimport { registerPlugin } from '../../plugins';\nimport RowsMapper from './rowsMapper';\nimport { arrayMap } from '../../helpers/array';\n/**\n * @plugin TrimRows\n *\n * @description\n * The plugin allows to trim certain rows. The trimming is achieved by applying the transformation algorithm to the data\n * transformation. In this case, when the row is trimmed it is not accessible using `getData*` methods thus the trimmed\n * data is not visible to other plugins.\n *\n * @example\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   date: getData(),\n *   // hide selected rows on table initialization\n *   trimRows: [1, 2, 5]\n * });\n *\n * // access the trimRows plugin instance\n * const trimRowsPlugin = hot.getPlugin('trimRows');\n *\n * // hide single row\n * trimRowsPlugin.trimRow(1);\n *\n * // hide multiple rows\n * trimRowsPlugin.trimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.trimRows([1, 2, 9]);\n *\n * // show single row\n * trimRowsPlugin.untrimRow(1);\n *\n * // show multiple rows\n * trimRowsPlugin.untrimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.untrimRows([1, 2, 9]);\n *\n * // rerender table to see the changes\n * hot.render();\n * ```\n */\n\nvar TrimRows = /*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(TrimRows, _BasePlugin);\n  function TrimRows(hotInstance) {\n    var _this;\n    _classCallCheck(this, TrimRows);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrimRows).call(this, hotInstance));\n    /**\n     * List of trimmed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.trimmedRows = [];\n    /**\n     * List of last removed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.removedRows = [];\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this.rowsMapper = new RowsMapper(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n  _createClass(TrimRows, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings().trimRows;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      var settings = this.hot.getSettings().trimRows;\n      if (Array.isArray(settings)) {\n        this.trimmedRows = settings;\n      }\n      this.rowsMapper.createMap(this.hot.countSourceRows());\n      this.addHook('modifyRow', function (row, source) {\n        return _this2.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this2.onUnmodifyRow(row, source);\n      });\n      this.addHook('beforeCreateRow', function (index, amount, source) {\n        return _this2.onBeforeCreateRow(index, amount, source);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this2.onAfterCreateRow(index, amount);\n      });\n      this.addHook('beforeRemoveRow', function (index, amount) {\n        return _this2.onBeforeRemoveRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function () {\n        return _this2.onAfterRemoveRow();\n      });\n      this.addHook('afterLoadData', function (firstRun) {\n        return _this2.onAfterLoadData(firstRun);\n      });\n      _get(_getPrototypeOf(TrimRows.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var settings = this.hot.getSettings().trimRows;\n      if (Array.isArray(settings)) {\n        this.disablePlugin();\n        this.enablePlugin();\n      }\n      _get(_getPrototypeOf(TrimRows.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      this.trimmedRows = [];\n      this.removedRows.length = 0;\n      this.rowsMapper.clearMap();\n      _get(_getPrototypeOf(TrimRows.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Trims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeTrimRow\n     * @fires Hooks#afterTrimRow\n     */\n  }, {\n    key: \"trimRows\",\n    value: function trimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n      if (isValidConfig) {\n        destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));\n      }\n      var allowTrimRow = this.hot.runHooks('beforeTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n      if (allowTrimRow === false) {\n        return;\n      }\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n      this.hot.runHooks('afterTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);\n    }\n    /**\n     * Trims the row provided as physical row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n  }, {\n    key: \"trimRow\",\n    value: function trimRow() {\n      for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {\n        row[_key] = arguments[_key];\n      }\n      this.trimRows(row);\n    }\n    /**\n     * Untrims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeUntrimRow\n     * @fires Hooks#afterUntrimRow\n     */\n  }, {\n    key: \"untrimRows\",\n    value: function untrimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n      if (isValidConfig) {\n        destinationTrimConfig = this.trimmedRows.filter(function (trimmedRow) {\n          return rows.includes(trimmedRow) === false;\n        });\n      }\n      var allowUntrimRow = this.hot.runHooks('beforeUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n      if (allowUntrimRow === false) {\n        return;\n      }\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n      this.hot.runHooks('afterUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);\n    }\n    /**\n     * Untrims the row provided as row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n  }, {\n    key: \"untrimRow\",\n    value: function untrimRow() {\n      for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        row[_key2] = arguments[_key2];\n      }\n      this.untrimRows(row);\n    }\n    /**\n     * Checks if given physical row is hidden.\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isTrimmed\",\n    value: function isTrimmed(row) {\n      return this.trimmedRows.includes(row);\n    }\n    /**\n     * Untrims all trimmed rows.\n     */\n  }, {\n    key: \"untrimAll\",\n    value: function untrimAll() {\n      this.untrimRows([].concat(this.trimmedRows));\n    }\n    /**\n     * Get if trim config is valid.\n     *\n     * @param {Array} trimmedRows List of physical row indexes.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isValidConfig\",\n    value: function isValidConfig(trimmedRows) {\n      var _this3 = this;\n      return trimmedRows.every(function (trimmedRow) {\n        return Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < _this3.hot.countSourceRows();\n      });\n    }\n    /**\n     * On modify row listener.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      var physicalRow = row;\n      if (source !== this.pluginName) {\n        physicalRow = this.rowsMapper.getValueByIndex(physicalRow);\n      }\n      return physicalRow;\n    }\n    /**\n     * On unmodifyRow listener.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      var visualRow = row;\n      if (source !== this.pluginName) {\n        visualRow = this.rowsMapper.getIndexByValue(visualRow);\n      }\n      return visualRow;\n    }\n    /**\n     * `beforeCreateRow` hook callback.\n     *\n     * @private\n     * @param {Number} index Index of the newly created row.\n     * @param {Number} amount Amount of created rows.\n     * @param {String} source Source of the change.\n     */\n  }, {\n    key: \"onBeforeCreateRow\",\n    value: function onBeforeCreateRow(index, amount, source) {\n      if (this.isEnabled() && this.trimmedRows.length > 0 && source === 'auto') {\n        return false;\n      }\n    }\n    /**\n     * On after create row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     */\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      var _this4 = this;\n      this.rowsMapper.shiftItems(index, amount);\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        if (trimmedRow >= _this4.rowsMapper.getValueByIndex(index)) {\n          return trimmedRow + amount;\n        }\n        return trimmedRow;\n      });\n    }\n    /**\n     * On before remove row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     *\n     * @fires Hooks#modifyRow\n     */\n  }, {\n    key: \"onBeforeRemoveRow\",\n    value: function onBeforeRemoveRow(index, amount) {\n      var _this5 = this;\n      this.removedRows.length = 0;\n      if (index !== false) {\n        // Collect physical row index.\n        rangeEach(index, index + amount - 1, function (removedIndex) {\n          _this5.removedRows.push(_this5.hot.runHooks('modifyRow', removedIndex, _this5.pluginName));\n        });\n      }\n    }\n    /**\n     * On after remove row listener.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow() {\n      var _this6 = this;\n      this.rowsMapper.unshiftItems(this.removedRows); // TODO: Maybe it can be optimized? N x M checks, where N is number of already trimmed rows and M is number of removed rows.\n      // Decreasing physical indexes (some of them should be updated, because few indexes are missing in new list of indexes after removal).\n\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        return trimmedRow - _this6.removedRows.filter(function (removedRow) {\n          return removedRow < trimmedRow;\n        }).length;\n      });\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     * @param {Boolean} firstRun Indicates if hook was fired while Handsontable initialization.\n     */\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(firstRun) {\n      if (!firstRun) {\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n      _get(_getPrototypeOf(TrimRows.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n  return TrimRows;\n}(BasePlugin);\nregisterPlugin('trimRows', TrimRows);\nexport default TrimRows;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","_get","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","value","object","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","BasePlugin","rangeEach","registerPlugin","RowsMapper","arrayMap","TrimRows","_BasePlugin","hotInstance","_this","trimmedRows","removedRows","rowsMapper","isEnabled","hot","getSettings","trimRows","enablePlugin","_this2","enabled","settings","Array","isArray","createMap","countSourceRows","addHook","row","source","onModifyRow","onUnmodifyRow","index","amount","onBeforeCreateRow","onAfterCreateRow","onBeforeRemoveRow","onAfterRemoveRow","firstRun","onAfterLoadData","updatePlugin","disablePlugin","clearMap","rows","currentTrimConfig","isValidConfig","destinationTrimConfig","from","Set","concat","allowTrimRow","runHooks","trimRow","_len","arguments","_key","untrimRows","filter","trimmedRow","includes","allowUntrimRow","untrimRow","_len2","_key2","isTrimmed","untrimAll","_this3","every","Number","isInteger","physicalRow","pluginName","getValueByIndex","visualRow","getIndexByValue","_this4","shiftItems","_this5","removedIndex","push","_this6","unshiftItems","removedRow","destroy"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/trimRows/trimRows.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.every\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.set\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport BasePlugin from '../_base';\nimport { rangeEach } from '../../helpers/number';\nimport { registerPlugin } from '../../plugins';\nimport RowsMapper from './rowsMapper';\nimport { arrayMap } from '../../helpers/array';\n/**\n * @plugin TrimRows\n *\n * @description\n * The plugin allows to trim certain rows. The trimming is achieved by applying the transformation algorithm to the data\n * transformation. In this case, when the row is trimmed it is not accessible using `getData*` methods thus the trimmed\n * data is not visible to other plugins.\n *\n * @example\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   date: getData(),\n *   // hide selected rows on table initialization\n *   trimRows: [1, 2, 5]\n * });\n *\n * // access the trimRows plugin instance\n * const trimRowsPlugin = hot.getPlugin('trimRows');\n *\n * // hide single row\n * trimRowsPlugin.trimRow(1);\n *\n * // hide multiple rows\n * trimRowsPlugin.trimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.trimRows([1, 2, 9]);\n *\n * // show single row\n * trimRowsPlugin.untrimRow(1);\n *\n * // show multiple rows\n * trimRowsPlugin.untrimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.untrimRows([1, 2, 9]);\n *\n * // rerender table to see the changes\n * hot.render();\n * ```\n */\n\nvar TrimRows =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(TrimRows, _BasePlugin);\n\n  function TrimRows(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, TrimRows);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrimRows).call(this, hotInstance));\n    /**\n     * List of trimmed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.trimmedRows = [];\n    /**\n     * List of last removed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.removedRows = [];\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this.rowsMapper = new RowsMapper(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(TrimRows, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings().trimRows;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var settings = this.hot.getSettings().trimRows;\n\n      if (Array.isArray(settings)) {\n        this.trimmedRows = settings;\n      }\n\n      this.rowsMapper.createMap(this.hot.countSourceRows());\n      this.addHook('modifyRow', function (row, source) {\n        return _this2.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this2.onUnmodifyRow(row, source);\n      });\n      this.addHook('beforeCreateRow', function (index, amount, source) {\n        return _this2.onBeforeCreateRow(index, amount, source);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this2.onAfterCreateRow(index, amount);\n      });\n      this.addHook('beforeRemoveRow', function (index, amount) {\n        return _this2.onBeforeRemoveRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function () {\n        return _this2.onAfterRemoveRow();\n      });\n      this.addHook('afterLoadData', function (firstRun) {\n        return _this2.onAfterLoadData(firstRun);\n      });\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var settings = this.hot.getSettings().trimRows;\n\n      if (Array.isArray(settings)) {\n        this.disablePlugin();\n        this.enablePlugin();\n      }\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      this.trimmedRows = [];\n      this.removedRows.length = 0;\n      this.rowsMapper.clearMap();\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Trims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeTrimRow\n     * @fires Hooks#afterTrimRow\n     */\n\n  }, {\n    key: \"trimRows\",\n    value: function trimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n\n      if (isValidConfig) {\n        destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));\n      }\n\n      var allowTrimRow = this.hot.runHooks('beforeTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n\n      if (allowTrimRow === false) {\n        return;\n      }\n\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n\n      this.hot.runHooks('afterTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);\n    }\n    /**\n     * Trims the row provided as physical row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n\n  }, {\n    key: \"trimRow\",\n    value: function trimRow() {\n      for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {\n        row[_key] = arguments[_key];\n      }\n\n      this.trimRows(row);\n    }\n    /**\n     * Untrims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeUntrimRow\n     * @fires Hooks#afterUntrimRow\n     */\n\n  }, {\n    key: \"untrimRows\",\n    value: function untrimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n\n      if (isValidConfig) {\n        destinationTrimConfig = this.trimmedRows.filter(function (trimmedRow) {\n          return rows.includes(trimmedRow) === false;\n        });\n      }\n\n      var allowUntrimRow = this.hot.runHooks('beforeUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n\n      if (allowUntrimRow === false) {\n        return;\n      }\n\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n\n      this.hot.runHooks('afterUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);\n    }\n    /**\n     * Untrims the row provided as row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n\n  }, {\n    key: \"untrimRow\",\n    value: function untrimRow() {\n      for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        row[_key2] = arguments[_key2];\n      }\n\n      this.untrimRows(row);\n    }\n    /**\n     * Checks if given physical row is hidden.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isTrimmed\",\n    value: function isTrimmed(row) {\n      return this.trimmedRows.includes(row);\n    }\n    /**\n     * Untrims all trimmed rows.\n     */\n\n  }, {\n    key: \"untrimAll\",\n    value: function untrimAll() {\n      this.untrimRows([].concat(this.trimmedRows));\n    }\n    /**\n     * Get if trim config is valid.\n     *\n     * @param {Array} trimmedRows List of physical row indexes.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isValidConfig\",\n    value: function isValidConfig(trimmedRows) {\n      var _this3 = this;\n\n      return trimmedRows.every(function (trimmedRow) {\n        return Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < _this3.hot.countSourceRows();\n      });\n    }\n    /**\n     * On modify row listener.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      var physicalRow = row;\n\n      if (source !== this.pluginName) {\n        physicalRow = this.rowsMapper.getValueByIndex(physicalRow);\n      }\n\n      return physicalRow;\n    }\n    /**\n     * On unmodifyRow listener.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      var visualRow = row;\n\n      if (source !== this.pluginName) {\n        visualRow = this.rowsMapper.getIndexByValue(visualRow);\n      }\n\n      return visualRow;\n    }\n    /**\n     * `beforeCreateRow` hook callback.\n     *\n     * @private\n     * @param {Number} index Index of the newly created row.\n     * @param {Number} amount Amount of created rows.\n     * @param {String} source Source of the change.\n     */\n\n  }, {\n    key: \"onBeforeCreateRow\",\n    value: function onBeforeCreateRow(index, amount, source) {\n      if (this.isEnabled() && this.trimmedRows.length > 0 && source === 'auto') {\n        return false;\n      }\n    }\n    /**\n     * On after create row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     */\n\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      var _this4 = this;\n\n      this.rowsMapper.shiftItems(index, amount);\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        if (trimmedRow >= _this4.rowsMapper.getValueByIndex(index)) {\n          return trimmedRow + amount;\n        }\n\n        return trimmedRow;\n      });\n    }\n    /**\n     * On before remove row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     *\n     * @fires Hooks#modifyRow\n     */\n\n  }, {\n    key: \"onBeforeRemoveRow\",\n    value: function onBeforeRemoveRow(index, amount) {\n      var _this5 = this;\n\n      this.removedRows.length = 0;\n\n      if (index !== false) {\n        // Collect physical row index.\n        rangeEach(index, index + amount - 1, function (removedIndex) {\n          _this5.removedRows.push(_this5.hot.runHooks('modifyRow', removedIndex, _this5.pluginName));\n        });\n      }\n    }\n    /**\n     * On after remove row listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow() {\n      var _this6 = this;\n\n      this.rowsMapper.unshiftItems(this.removedRows); // TODO: Maybe it can be optimized? N x M checks, where N is number of already trimmed rows and M is number of removed rows.\n      // Decreasing physical indexes (some of them should be updated, because few indexes are missing in new list of indexes after removal).\n\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        return trimmedRow - _this6.removedRows.filter(function (removedRow) {\n          return removedRow < trimmedRow;\n        }).length;\n      });\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     * @param {Boolean} firstRun Indicates if hook was fired while Handsontable initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(firstRun) {\n      if (!firstRun) {\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return TrimRows;\n}(BasePlugin);\n\nregisterPlugin('trimRows', TrimRows);\nexport default TrimRows;"],"mappings":"AAqBA,SAASA,OAAO,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAEH,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;MAAE,OAAO,OAAOA,GAAG;IAAE,CAAC;EAAE,CAAC,MAAM;IAAED,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;IAAE,CAAC;EAAE;EAAE,OAAOD,OAAO,CAACC,GAAG,CAAC;AAAE;AAEzX,SAASK,eAAe,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAASC,iBAAiB,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;IAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;IAAED,UAAU,CAACE,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;IAAEC,MAAM,CAACC,cAAc,CAACT,MAAM,EAAEI,UAAU,CAACM,GAAG,EAAEN,UAAU,CAAC;EAAE;AAAE;AAE5T,SAASO,YAAY,CAACd,WAAW,EAAEe,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEb,iBAAiB,CAACF,WAAW,CAACH,SAAS,EAAEkB,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEd,iBAAiB,CAACF,WAAW,EAAEgB,WAAW,CAAC;EAAE,OAAOhB,WAAW;AAAE;AAEtN,SAASiB,0BAA0B,CAACC,IAAI,EAAEC,IAAI,EAAE;EAAE,IAAIA,IAAI,KAAK3B,OAAO,CAAC2B,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,UAAU,CAAC,EAAE;IAAE,OAAOA,IAAI;EAAE;EAAE,OAAOC,sBAAsB,CAACF,IAAI,CAAC;AAAE;AAEhL,SAASE,sBAAsB,CAACF,IAAI,EAAE;EAAE,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAE,MAAM,IAAIG,cAAc,CAAC,2DAA2D,CAAC;EAAE;EAAE,OAAOH,IAAI;AAAE;AAErK,SAASI,IAAI,CAACnB,MAAM,EAAEoB,QAAQ,EAAEC,QAAQ,EAAE;EAAE,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,CAACC,GAAG,EAAE;IAAEJ,IAAI,GAAGG,OAAO,CAACC,GAAG;EAAE,CAAC,MAAM;IAAEJ,IAAI,GAAG,SAASA,IAAI,CAACnB,MAAM,EAAEoB,QAAQ,EAAEC,QAAQ,EAAE;MAAE,IAAIG,IAAI,GAAGC,cAAc,CAACzB,MAAM,EAAEoB,QAAQ,CAAC;MAAE,IAAI,CAACI,IAAI,EAAE;MAAQ,IAAIE,IAAI,GAAGlB,MAAM,CAACmB,wBAAwB,CAACH,IAAI,EAAEJ,QAAQ,CAAC;MAAE,IAAIM,IAAI,CAACH,GAAG,EAAE;QAAE,OAAOG,IAAI,CAACH,GAAG,CAACP,IAAI,CAACK,QAAQ,CAAC;MAAE;MAAE,OAAOK,IAAI,CAACE,KAAK;IAAE,CAAC;EAAE;EAAE,OAAOT,IAAI,CAACnB,MAAM,EAAEoB,QAAQ,EAAEC,QAAQ,IAAIrB,MAAM,CAAC;AAAE;AAE1a,SAASyB,cAAc,CAACI,MAAM,EAAET,QAAQ,EAAE;EAAE,OAAO,CAACZ,MAAM,CAACd,SAAS,CAACoC,cAAc,CAACd,IAAI,CAACa,MAAM,EAAET,QAAQ,CAAC,EAAE;IAAES,MAAM,GAAGE,eAAe,CAACF,MAAM,CAAC;IAAE,IAAIA,MAAM,KAAK,IAAI,EAAE;EAAO;EAAE,OAAOA,MAAM;AAAE;AAE7L,SAASE,eAAe,CAACC,CAAC,EAAE;EAAED,eAAe,GAAGvB,MAAM,CAACyB,cAAc,GAAGzB,MAAM,CAAC0B,cAAc,GAAG,SAASH,eAAe,CAACC,CAAC,EAAE;IAAE,OAAOA,CAAC,CAACG,SAAS,IAAI3B,MAAM,CAAC0B,cAAc,CAACF,CAAC,CAAC;EAAE,CAAC;EAAE,OAAOD,eAAe,CAACC,CAAC,CAAC;AAAE;AAE5M,SAASI,SAAS,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAAE,IAAI,OAAOA,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,IAAI,EAAE;IAAE,MAAM,IAAIxC,SAAS,CAAC,oDAAoD,CAAC;EAAE;EAAEuC,QAAQ,CAAC3C,SAAS,GAAGc,MAAM,CAAC+B,MAAM,CAACD,UAAU,IAAIA,UAAU,CAAC5C,SAAS,EAAE;IAAED,WAAW,EAAE;MAAEmC,KAAK,EAAES,QAAQ;MAAE9B,QAAQ,EAAE,IAAI;MAAED,YAAY,EAAE;IAAK;EAAE,CAAC,CAAC;EAAE,IAAIgC,UAAU,EAAEE,eAAe,CAACH,QAAQ,EAAEC,UAAU,CAAC;AAAE;AAEhY,SAASE,eAAe,CAACR,CAAC,EAAES,CAAC,EAAE;EAAED,eAAe,GAAGhC,MAAM,CAACyB,cAAc,IAAI,SAASO,eAAe,CAACR,CAAC,EAAES,CAAC,EAAE;IAAET,CAAC,CAACG,SAAS,GAAGM,CAAC;IAAE,OAAOT,CAAC;EAAE,CAAC;EAAE,OAAOQ,eAAe,CAACR,CAAC,EAAES,CAAC,CAAC;AAAE;AAEzK,OAAOC,UAAU,MAAM,UAAU;AACjC,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ;AACA,UAAUC,WAAW,EAAE;EACrBZ,SAAS,CAACW,QAAQ,EAAEC,WAAW,CAAC;EAEhC,SAASD,QAAQ,CAACE,WAAW,EAAE;IAC7B,IAAIC,KAAK;IAETvD,eAAe,CAAC,IAAI,EAAEoD,QAAQ,CAAC;IAE/BG,KAAK,GAAGpC,0BAA0B,CAAC,IAAI,EAAEiB,eAAe,CAACgB,QAAQ,CAAC,CAAC/B,IAAI,CAAC,IAAI,EAAEiC,WAAW,CAAC,CAAC;IAC3F;AACJ;AACA;AACA;AACA;AACA;;IAEIC,KAAK,CAACC,WAAW,GAAG,EAAE;IACtB;AACJ;AACA;AACA;AACA;AACA;;IAEID,KAAK,CAACE,WAAW,GAAG,EAAE;IACtB;AACJ;AACA;AACA;AACA;AACA;;IAEIF,KAAK,CAACG,UAAU,GAAG,IAAIR,UAAU,CAAC5B,sBAAsB,CAACiC,KAAK,CAAC,CAAC;IAChE,OAAOA,KAAK;EACd;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEvC,YAAY,CAACoC,QAAQ,EAAE,CAAC;IACtBrC,GAAG,EAAE,WAAW;IAChBkB,KAAK,EAAE,SAAS0B,SAAS,GAAG;MAC1B,OAAO,CAAC,CAAC,IAAI,CAACC,GAAG,CAACC,WAAW,EAAE,CAACC,QAAQ;IAC1C;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACD/C,GAAG,EAAE,cAAc;IACnBkB,KAAK,EAAE,SAAS8B,YAAY,GAAG;MAC7B,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAI,IAAI,CAACC,OAAO,EAAE;QAChB;MACF;MAEA,IAAIC,QAAQ,GAAG,IAAI,CAACN,GAAG,CAACC,WAAW,EAAE,CAACC,QAAQ;MAE9C,IAAIK,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;QAC3B,IAAI,CAACV,WAAW,GAAGU,QAAQ;MAC7B;MAEA,IAAI,CAACR,UAAU,CAACW,SAAS,CAAC,IAAI,CAACT,GAAG,CAACU,eAAe,EAAE,CAAC;MACrD,IAAI,CAACC,OAAO,CAAC,WAAW,EAAE,UAAUC,GAAG,EAAEC,MAAM,EAAE;QAC/C,OAAOT,MAAM,CAACU,WAAW,CAACF,GAAG,EAAEC,MAAM,CAAC;MACxC,CAAC,CAAC;MACF,IAAI,CAACF,OAAO,CAAC,aAAa,EAAE,UAAUC,GAAG,EAAEC,MAAM,EAAE;QACjD,OAAOT,MAAM,CAACW,aAAa,CAACH,GAAG,EAAEC,MAAM,CAAC;MAC1C,CAAC,CAAC;MACF,IAAI,CAACF,OAAO,CAAC,iBAAiB,EAAE,UAAUK,KAAK,EAAEC,MAAM,EAAEJ,MAAM,EAAE;QAC/D,OAAOT,MAAM,CAACc,iBAAiB,CAACF,KAAK,EAAEC,MAAM,EAAEJ,MAAM,CAAC;MACxD,CAAC,CAAC;MACF,IAAI,CAACF,OAAO,CAAC,gBAAgB,EAAE,UAAUK,KAAK,EAAEC,MAAM,EAAE;QACtD,OAAOb,MAAM,CAACe,gBAAgB,CAACH,KAAK,EAAEC,MAAM,CAAC;MAC/C,CAAC,CAAC;MACF,IAAI,CAACN,OAAO,CAAC,iBAAiB,EAAE,UAAUK,KAAK,EAAEC,MAAM,EAAE;QACvD,OAAOb,MAAM,CAACgB,iBAAiB,CAACJ,KAAK,EAAEC,MAAM,CAAC;MAChD,CAAC,CAAC;MACF,IAAI,CAACN,OAAO,CAAC,gBAAgB,EAAE,YAAY;QACzC,OAAOP,MAAM,CAACiB,gBAAgB,EAAE;MAClC,CAAC,CAAC;MACF,IAAI,CAACV,OAAO,CAAC,eAAe,EAAE,UAAUW,QAAQ,EAAE;QAChD,OAAOlB,MAAM,CAACmB,eAAe,CAACD,QAAQ,CAAC;MACzC,CAAC,CAAC;MAEF1D,IAAI,CAACY,eAAe,CAACgB,QAAQ,CAACrD,SAAS,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC;IAC5E;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDN,GAAG,EAAE,cAAc;IACnBkB,KAAK,EAAE,SAASmD,YAAY,GAAG;MAC7B,IAAIlB,QAAQ,GAAG,IAAI,CAACN,GAAG,CAACC,WAAW,EAAE,CAACC,QAAQ;MAE9C,IAAIK,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;QAC3B,IAAI,CAACmB,aAAa,EAAE;QACpB,IAAI,CAACtB,YAAY,EAAE;MACrB;MAEAvC,IAAI,CAACY,eAAe,CAACgB,QAAQ,CAACrD,SAAS,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC;IAC5E;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDN,GAAG,EAAE,eAAe;IACpBkB,KAAK,EAAE,SAASoD,aAAa,GAAG;MAC9B,IAAI,CAAC7B,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,WAAW,CAACjD,MAAM,GAAG,CAAC;MAC3B,IAAI,CAACkD,UAAU,CAAC4B,QAAQ,EAAE;MAE1B9D,IAAI,CAACY,eAAe,CAACgB,QAAQ,CAACrD,SAAS,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC;IAC7E;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDN,GAAG,EAAE,UAAU;IACfkB,KAAK,EAAE,SAAS6B,QAAQ,CAACyB,IAAI,EAAE;MAC7B,IAAIC,iBAAiB,GAAG,IAAI,CAAChC,WAAW;MACxC,IAAIiC,aAAa,GAAG,IAAI,CAACA,aAAa,CAACF,IAAI,CAAC;MAC5C,IAAIG,qBAAqB,GAAGF,iBAAiB;MAE7C,IAAIC,aAAa,EAAE;QACjBC,qBAAqB,GAAGvB,KAAK,CAACwB,IAAI,CAAC,IAAIC,GAAG,CAACJ,iBAAiB,CAACK,MAAM,CAACN,IAAI,CAAC,CAAC,CAAC;MAC7E;MAEA,IAAIO,YAAY,GAAG,IAAI,CAAClC,GAAG,CAACmC,QAAQ,CAAC,eAAe,EAAEP,iBAAiB,EAAEE,qBAAqB,EAAED,aAAa,CAAC;MAE9G,IAAIK,YAAY,KAAK,KAAK,EAAE;QAC1B;MACF;MAEA,IAAIL,aAAa,EAAE;QACjB,IAAI,CAACjC,WAAW,GAAGkC,qBAAqB;QACxC,IAAI,CAAC9B,GAAG,CAACmC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,CAAC;QACzC,IAAI,CAACrC,UAAU,CAACW,SAAS,CAAC,IAAI,CAACT,GAAG,CAACU,eAAe,EAAE,CAAC;MACvD;MAEA,IAAI,CAACV,GAAG,CAACmC,QAAQ,CAAC,cAAc,EAAEP,iBAAiB,EAAEE,qBAAqB,EAAED,aAAa,EAAEA,aAAa,IAAIC,qBAAqB,CAAClF,MAAM,GAAGgF,iBAAiB,CAAChF,MAAM,CAAC;IACtK;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDO,GAAG,EAAE,SAAS;IACdkB,KAAK,EAAE,SAAS+D,OAAO,GAAG;MACxB,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAAC1F,MAAM,EAAEgE,GAAG,GAAG,IAAIL,KAAK,CAAC8B,IAAI,CAAC,EAAEE,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGF,IAAI,EAAEE,IAAI,EAAE,EAAE;QACtF3B,GAAG,CAAC2B,IAAI,CAAC,GAAGD,SAAS,CAACC,IAAI,CAAC;MAC7B;MAEA,IAAI,CAACrC,QAAQ,CAACU,GAAG,CAAC;IACpB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDzD,GAAG,EAAE,YAAY;IACjBkB,KAAK,EAAE,SAASmE,UAAU,CAACb,IAAI,EAAE;MAC/B,IAAIC,iBAAiB,GAAG,IAAI,CAAChC,WAAW;MACxC,IAAIiC,aAAa,GAAG,IAAI,CAACA,aAAa,CAACF,IAAI,CAAC;MAC5C,IAAIG,qBAAqB,GAAGF,iBAAiB;MAE7C,IAAIC,aAAa,EAAE;QACjBC,qBAAqB,GAAG,IAAI,CAAClC,WAAW,CAAC6C,MAAM,CAAC,UAAUC,UAAU,EAAE;UACpE,OAAOf,IAAI,CAACgB,QAAQ,CAACD,UAAU,CAAC,KAAK,KAAK;QAC5C,CAAC,CAAC;MACJ;MAEA,IAAIE,cAAc,GAAG,IAAI,CAAC5C,GAAG,CAACmC,QAAQ,CAAC,iBAAiB,EAAEP,iBAAiB,EAAEE,qBAAqB,EAAED,aAAa,CAAC;MAElH,IAAIe,cAAc,KAAK,KAAK,EAAE;QAC5B;MACF;MAEA,IAAIf,aAAa,EAAE;QACjB,IAAI,CAACjC,WAAW,GAAGkC,qBAAqB;QACxC,IAAI,CAAC9B,GAAG,CAACmC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,CAAC;QACzC,IAAI,CAACrC,UAAU,CAACW,SAAS,CAAC,IAAI,CAACT,GAAG,CAACU,eAAe,EAAE,CAAC;MACvD;MAEA,IAAI,CAACV,GAAG,CAACmC,QAAQ,CAAC,gBAAgB,EAAEP,iBAAiB,EAAEE,qBAAqB,EAAED,aAAa,EAAEA,aAAa,IAAIC,qBAAqB,CAAClF,MAAM,GAAGgF,iBAAiB,CAAChF,MAAM,CAAC;IACxK;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDO,GAAG,EAAE,WAAW;IAChBkB,KAAK,EAAE,SAASwE,SAAS,GAAG;MAC1B,KAAK,IAAIC,KAAK,GAAGR,SAAS,CAAC1F,MAAM,EAAEgE,GAAG,GAAG,IAAIL,KAAK,CAACuC,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;QAC5FnC,GAAG,CAACmC,KAAK,CAAC,GAAGT,SAAS,CAACS,KAAK,CAAC;MAC/B;MAEA,IAAI,CAACP,UAAU,CAAC5B,GAAG,CAAC;IACtB;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDzD,GAAG,EAAE,WAAW;IAChBkB,KAAK,EAAE,SAAS2E,SAAS,CAACpC,GAAG,EAAE;MAC7B,OAAO,IAAI,CAAChB,WAAW,CAAC+C,QAAQ,CAAC/B,GAAG,CAAC;IACvC;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDzD,GAAG,EAAE,WAAW;IAChBkB,KAAK,EAAE,SAAS4E,SAAS,GAAG;MAC1B,IAAI,CAACT,UAAU,CAAC,EAAE,CAACP,MAAM,CAAC,IAAI,CAACrC,WAAW,CAAC,CAAC;IAC9C;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDzC,GAAG,EAAE,eAAe;IACpBkB,KAAK,EAAE,SAASwD,aAAa,CAACjC,WAAW,EAAE;MACzC,IAAIsD,MAAM,GAAG,IAAI;MAEjB,OAAOtD,WAAW,CAACuD,KAAK,CAAC,UAAUT,UAAU,EAAE;QAC7C,OAAOU,MAAM,CAACC,SAAS,CAACX,UAAU,CAAC,IAAIA,UAAU,IAAI,CAAC,IAAIA,UAAU,GAAGQ,MAAM,CAAClD,GAAG,CAACU,eAAe,EAAE;MACrG,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDvD,GAAG,EAAE,aAAa;IAClBkB,KAAK,EAAE,SAASyC,WAAW,CAACF,GAAG,EAAEC,MAAM,EAAE;MACvC,IAAIyC,WAAW,GAAG1C,GAAG;MAErB,IAAIC,MAAM,KAAK,IAAI,CAAC0C,UAAU,EAAE;QAC9BD,WAAW,GAAG,IAAI,CAACxD,UAAU,CAAC0D,eAAe,CAACF,WAAW,CAAC;MAC5D;MAEA,OAAOA,WAAW;IACpB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDnG,GAAG,EAAE,eAAe;IACpBkB,KAAK,EAAE,SAAS0C,aAAa,CAACH,GAAG,EAAEC,MAAM,EAAE;MACzC,IAAI4C,SAAS,GAAG7C,GAAG;MAEnB,IAAIC,MAAM,KAAK,IAAI,CAAC0C,UAAU,EAAE;QAC9BE,SAAS,GAAG,IAAI,CAAC3D,UAAU,CAAC4D,eAAe,CAACD,SAAS,CAAC;MACxD;MAEA,OAAOA,SAAS;IAClB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDtG,GAAG,EAAE,mBAAmB;IACxBkB,KAAK,EAAE,SAAS6C,iBAAiB,CAACF,KAAK,EAAEC,MAAM,EAAEJ,MAAM,EAAE;MACvD,IAAI,IAAI,CAACd,SAAS,EAAE,IAAI,IAAI,CAACH,WAAW,CAAChD,MAAM,GAAG,CAAC,IAAIiE,MAAM,KAAK,MAAM,EAAE;QACxE,OAAO,KAAK;MACd;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1D,GAAG,EAAE,kBAAkB;IACvBkB,KAAK,EAAE,SAAS8C,gBAAgB,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC9C,IAAI0C,MAAM,GAAG,IAAI;MAEjB,IAAI,CAAC7D,UAAU,CAAC8D,UAAU,CAAC5C,KAAK,EAAEC,MAAM,CAAC;MACzC,IAAI,CAACrB,WAAW,GAAGL,QAAQ,CAAC,IAAI,CAACK,WAAW,EAAE,UAAU8C,UAAU,EAAE;QAClE,IAAIA,UAAU,IAAIiB,MAAM,CAAC7D,UAAU,CAAC0D,eAAe,CAACxC,KAAK,CAAC,EAAE;UAC1D,OAAO0B,UAAU,GAAGzB,MAAM;QAC5B;QAEA,OAAOyB,UAAU;MACnB,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDvF,GAAG,EAAE,mBAAmB;IACxBkB,KAAK,EAAE,SAAS+C,iBAAiB,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAC/C,IAAI4C,MAAM,GAAG,IAAI;MAEjB,IAAI,CAAChE,WAAW,CAACjD,MAAM,GAAG,CAAC;MAE3B,IAAIoE,KAAK,KAAK,KAAK,EAAE;QACnB;QACA5B,SAAS,CAAC4B,KAAK,EAAEA,KAAK,GAAGC,MAAM,GAAG,CAAC,EAAE,UAAU6C,YAAY,EAAE;UAC3DD,MAAM,CAAChE,WAAW,CAACkE,IAAI,CAACF,MAAM,CAAC7D,GAAG,CAACmC,QAAQ,CAAC,WAAW,EAAE2B,YAAY,EAAED,MAAM,CAACN,UAAU,CAAC,CAAC;QAC5F,CAAC,CAAC;MACJ;IACF;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDpG,GAAG,EAAE,kBAAkB;IACvBkB,KAAK,EAAE,SAASgD,gBAAgB,GAAG;MACjC,IAAI2C,MAAM,GAAG,IAAI;MAEjB,IAAI,CAAClE,UAAU,CAACmE,YAAY,CAAC,IAAI,CAACpE,WAAW,CAAC,CAAC,CAAC;MAChD;;MAEA,IAAI,CAACD,WAAW,GAAGL,QAAQ,CAAC,IAAI,CAACK,WAAW,EAAE,UAAU8C,UAAU,EAAE;QAClE,OAAOA,UAAU,GAAGsB,MAAM,CAACnE,WAAW,CAAC4C,MAAM,CAAC,UAAUyB,UAAU,EAAE;UAClE,OAAOA,UAAU,GAAGxB,UAAU;QAChC,CAAC,CAAC,CAAC9F,MAAM;MACX,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDO,GAAG,EAAE,iBAAiB;IACtBkB,KAAK,EAAE,SAASkD,eAAe,CAACD,QAAQ,EAAE;MACxC,IAAI,CAACA,QAAQ,EAAE;QACb,IAAI,CAACxB,UAAU,CAACW,SAAS,CAAC,IAAI,CAACT,GAAG,CAACU,eAAe,EAAE,CAAC;MACvD;IACF;IACA;AACJ;AACA;EAEE,CAAC,EAAE;IACDvD,GAAG,EAAE,SAAS;IACdkB,KAAK,EAAE,SAAS8F,OAAO,GAAG;MACxB,IAAI,CAACrE,UAAU,CAACqE,OAAO,EAAE;MAEzBvG,IAAI,CAACY,eAAe,CAACgB,QAAQ,CAACrD,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC;IACvE;EACF,CAAC,CAAC,CAAC;EAEH,OAAO+B,QAAQ;AACjB,CAAC,CAACL,UAAU,CAAC;AAEbE,cAAc,CAAC,UAAU,EAAEG,QAAQ,CAAC;AACpC,eAAeA,QAAQ"},"metadata":{},"sourceType":"module"}