{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { arrayFilter, arrayMap } from '../../helpers/array';\n/**\n * Clean and extend patches from jsonpatch observer.\n *\n * @param {Array} patches\n * @returns {Array}\n */\n\nexport function cleanPatches(patches) {\n  var newOrRemovedColumns = [];\n  /**\n   * If observeChanges uses native Object.observe method, then it produces patches for length property. Filter them.\n   * If path can't be parsed. Filter it.\n   */\n\n  var cleanedPatches = arrayFilter(patches, function (patch) {\n    if (/[/]length/ig.test(patch.path)) {\n      return false;\n    }\n    if (!parsePath(patch.path)) {\n      return false;\n    }\n    return true;\n  });\n  /**\n   * Extend patches with changed cells coords\n   */\n\n  cleanedPatches = arrayMap(cleanedPatches, function (patch) {\n    var coords = parsePath(patch.path);\n    patch.row = coords.row;\n    patch.col = coords.col;\n    return patch;\n  });\n  /**\n   * Removing or adding column will produce one patch for each table row.\n   * Leaves only one patch for each column add/remove operation.\n   */\n\n  cleanedPatches = arrayFilter(cleanedPatches, function (patch) {\n    if (['add', 'remove'].indexOf(patch.op) !== -1 && !isNaN(patch.col)) {\n      if (newOrRemovedColumns.indexOf(patch.col) !== -1) {\n        return false;\n      }\n      newOrRemovedColumns.push(patch.col);\n    }\n    return true;\n  });\n  newOrRemovedColumns.length = 0;\n  return cleanedPatches;\n}\n/**\n * Extract coordinates from path where data was changed.\n *\n * @param {String} path Path describing where data was changed.\n * @returns {Object|null} Returns an object with `row` and `col` properties or `null` if path doesn't have necessary information.\n */\n\nexport function parsePath(path) {\n  var match = path.match(/^\\/(\\d+)\\/?(.*)?$/);\n  if (!match) {\n    return null;\n  }\n  var _match = _slicedToArray(match, 3),\n    row = _match[1],\n    column = _match[2];\n  return {\n    row: parseInt(row, 10),\n    col: /^\\d*$/.test(column) ? parseInt(column, 10) : column\n  };\n}","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","arrayFilter","arrayMap","cleanPatches","patches","newOrRemovedColumns","cleanedPatches","patch","test","path","parsePath","coords","row","col","indexOf","op","isNaN","match","_match","column","parseInt"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/observeChanges/utils.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.string.match\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { arrayFilter, arrayMap } from '../../helpers/array';\n/**\n * Clean and extend patches from jsonpatch observer.\n *\n * @param {Array} patches\n * @returns {Array}\n */\n\nexport function cleanPatches(patches) {\n  var newOrRemovedColumns = [];\n  /**\n   * If observeChanges uses native Object.observe method, then it produces patches for length property. Filter them.\n   * If path can't be parsed. Filter it.\n   */\n\n  var cleanedPatches = arrayFilter(patches, function (patch) {\n    if (/[/]length/ig.test(patch.path)) {\n      return false;\n    }\n\n    if (!parsePath(patch.path)) {\n      return false;\n    }\n\n    return true;\n  });\n  /**\n   * Extend patches with changed cells coords\n   */\n\n  cleanedPatches = arrayMap(cleanedPatches, function (patch) {\n    var coords = parsePath(patch.path);\n    patch.row = coords.row;\n    patch.col = coords.col;\n    return patch;\n  });\n  /**\n   * Removing or adding column will produce one patch for each table row.\n   * Leaves only one patch for each column add/remove operation.\n   */\n\n  cleanedPatches = arrayFilter(cleanedPatches, function (patch) {\n    if (['add', 'remove'].indexOf(patch.op) !== -1 && !isNaN(patch.col)) {\n      if (newOrRemovedColumns.indexOf(patch.col) !== -1) {\n        return false;\n      }\n\n      newOrRemovedColumns.push(patch.col);\n    }\n\n    return true;\n  });\n  newOrRemovedColumns.length = 0;\n  return cleanedPatches;\n}\n/**\n * Extract coordinates from path where data was changed.\n *\n * @param {String} path Path describing where data was changed.\n * @returns {Object|null} Returns an object with `row` and `col` properties or `null` if path doesn't have necessary information.\n */\n\nexport function parsePath(path) {\n  var match = path.match(/^\\/(\\d+)\\/?(.*)?$/);\n\n  if (!match) {\n    return null;\n  }\n\n  var _match = _slicedToArray(match, 3),\n      row = _match[1],\n      column = _match[2];\n\n  return {\n    row: parseInt(row, 10),\n    col: /^\\d*$/.test(column) ? parseInt(column, 10) : column\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}