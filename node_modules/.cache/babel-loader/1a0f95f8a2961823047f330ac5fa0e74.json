{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { mixin } from '../../helpers/object';\nimport localHooks from '../../mixins/localHooks';\nimport * as columnSorting from './alterOperation/columnSorting';\nimport * as insertColumn from './alterOperation/insertColumn';\nimport * as insertRow from './alterOperation/insertRow';\nimport * as removeColumn from './alterOperation/removeColumn';\nimport * as removeRow from './alterOperation/removeRow';\nvar operations = new Map();\nregisterOperation(columnSorting.OPERATION_NAME, columnSorting);\nregisterOperation(insertColumn.OPERATION_NAME, insertColumn);\nregisterOperation(insertRow.OPERATION_NAME, insertRow);\nregisterOperation(removeColumn.OPERATION_NAME, removeColumn);\nregisterOperation(removeRow.OPERATION_NAME, removeRow);\n/**\n * Alter Manager is a service that is responsible for changing the formula expressions (especially cell coordinates)\n * based on specific alter operation applied into the table.\n *\n * For example, when a user adds a new row the algorithm that moves all the cells below the added row down by one row\n * should be triggered (eq: cell A5 become A6 etc).\n *\n * All alter operations are defined in the \"alterOperation/\" directory.\n *\n * @class AlterManager\n * @util\n */\n\nvar AlterManager = /*#__PURE__*/\nfunction () {\n  function AlterManager(sheet) {\n    _classCallCheck(this, AlterManager);\n\n    /**\n     * Instance of {@link Sheet}.\n     *\n     * @type {Sheet}\n     */\n    this.sheet = sheet;\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n    this.hot = sheet.hot;\n    /**\n     * Instance of {@link DataProvider}.\n     *\n     * @type {DataProvider}\n     */\n\n    this.dataProvider = sheet.dataProvider;\n    /**\n     * Instance of {@link Matrix}.\n     *\n     * @type {Matrix}\n     */\n\n    this.matrix = sheet.matrix;\n  }\n  /**\n   * Prepare to execute an alter algorithm. This preparation can be useful for collecting some variables and\n   * states before specific algorithm will be executed.\n   *\n   * @param  {String} action One of the action defined in alterOperation.\n   * @param  {*} args Arguments pass to alter operation.\n   */\n\n  _createClass(AlterManager, [{\n    key: \"prepareAlter\",\n    value: function prepareAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      operations.get(action).prepare.apply(this, args);\n    }\n    /**\n     * Trigger an alter algorithm and after executing code trigger local hook (\"afterAlter\").\n     *\n     * @param {String} action One of the action defined in alterOperation.\n     * @param {*} args Arguments pass to alter operation.\n     */\n  }, {\n    key: \"triggerAlter\",\n    value: function triggerAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      operations.get(action).operate.apply(this, args);\n      this.runLocalHooks.apply(this, ['afterAlter'].concat(args));\n    }\n    /**\n     * Destroy class.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sheet = null;\n      this.hot = null;\n      this.dataProvider = null;\n      this.matrix = null;\n    }\n  }]);\n  return AlterManager;\n}();\nmixin(AlterManager, localHooks);\nexport default AlterManager;\nvar empty = function empty() {};\nexport function registerOperation(name, descriptor) {\n  if (!operations.has(name)) {\n    operations.set(name, {\n      prepare: descriptor.prepare || empty,\n      operate: descriptor.operate || empty\n    });\n  }\n}","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","mixin","localHooks","columnSorting","insertColumn","insertRow","removeColumn","removeRow","operations","Map","registerOperation","OPERATION_NAME","AlterManager","sheet","hot","dataProvider","matrix","value","prepareAlter","action","has","Error","concat","_len","arguments","args","Array","_key","get","prepare","apply","triggerAlter","_len2","_key2","operate","runLocalHooks","destroy","empty","name","set"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/formulas/alterManager.js"],"sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { mixin } from '../../helpers/object';\nimport localHooks from '../../mixins/localHooks';\nimport * as columnSorting from './alterOperation/columnSorting';\nimport * as insertColumn from './alterOperation/insertColumn';\nimport * as insertRow from './alterOperation/insertRow';\nimport * as removeColumn from './alterOperation/removeColumn';\nimport * as removeRow from './alterOperation/removeRow';\nvar operations = new Map();\nregisterOperation(columnSorting.OPERATION_NAME, columnSorting);\nregisterOperation(insertColumn.OPERATION_NAME, insertColumn);\nregisterOperation(insertRow.OPERATION_NAME, insertRow);\nregisterOperation(removeColumn.OPERATION_NAME, removeColumn);\nregisterOperation(removeRow.OPERATION_NAME, removeRow);\n/**\n * Alter Manager is a service that is responsible for changing the formula expressions (especially cell coordinates)\n * based on specific alter operation applied into the table.\n *\n * For example, when a user adds a new row the algorithm that moves all the cells below the added row down by one row\n * should be triggered (eq: cell A5 become A6 etc).\n *\n * All alter operations are defined in the \"alterOperation/\" directory.\n *\n * @class AlterManager\n * @util\n */\n\nvar AlterManager =\n/*#__PURE__*/\nfunction () {\n  function AlterManager(sheet) {\n    _classCallCheck(this, AlterManager);\n\n    /**\n     * Instance of {@link Sheet}.\n     *\n     * @type {Sheet}\n     */\n    this.sheet = sheet;\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n    this.hot = sheet.hot;\n    /**\n     * Instance of {@link DataProvider}.\n     *\n     * @type {DataProvider}\n     */\n\n    this.dataProvider = sheet.dataProvider;\n    /**\n     * Instance of {@link Matrix}.\n     *\n     * @type {Matrix}\n     */\n\n    this.matrix = sheet.matrix;\n  }\n  /**\n   * Prepare to execute an alter algorithm. This preparation can be useful for collecting some variables and\n   * states before specific algorithm will be executed.\n   *\n   * @param  {String} action One of the action defined in alterOperation.\n   * @param  {*} args Arguments pass to alter operation.\n   */\n\n\n  _createClass(AlterManager, [{\n    key: \"prepareAlter\",\n    value: function prepareAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      operations.get(action).prepare.apply(this, args);\n    }\n    /**\n     * Trigger an alter algorithm and after executing code trigger local hook (\"afterAlter\").\n     *\n     * @param {String} action One of the action defined in alterOperation.\n     * @param {*} args Arguments pass to alter operation.\n     */\n\n  }, {\n    key: \"triggerAlter\",\n    value: function triggerAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      operations.get(action).operate.apply(this, args);\n      this.runLocalHooks.apply(this, ['afterAlter'].concat(args));\n    }\n    /**\n     * Destroy class.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sheet = null;\n      this.hot = null;\n      this.dataProvider = null;\n      this.matrix = null;\n    }\n  }]);\n\n  return AlterManager;\n}();\n\nmixin(AlterManager, localHooks);\nexport default AlterManager;\n\nvar empty = function empty() {};\n\nexport function registerOperation(name, descriptor) {\n  if (!operations.has(name)) {\n    operations.set(name, {\n      prepare: descriptor.prepare || empty,\n      operate: descriptor.operate || empty\n    });\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}