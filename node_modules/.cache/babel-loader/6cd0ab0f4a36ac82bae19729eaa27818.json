{"ast":null,"code":"import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from './constants';\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\n\nvar ViewportColumnsCalculator = /*#__PURE__*/\nfunction () {\n  _createClass(ViewportColumnsCalculator, null, [{\n    key: \"DEFAULT_WIDTH\",\n    /**\n     * Default column width\n     *\n     * @type {Number}\n     */\n    get: function get() {\n      return 50;\n    }\n    /**\n     * @param {Object} options Object with all options specyfied for column viewport calculation.\n     * @param {Number} options.viewportWidth Width of the viewport\n     * @param {Number} options.scrollOffset Current horizontal scroll position of the viewport\n     * @param {Number} options.totalColumns Total number of columns\n     * @param {Function} options.columnWidthFn Function that returns the width of the column at a given index (in px)\n     * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin)\n     * @param {String} options.calculationType String which describes types of calculation which will be performed.\n     * @param {String} [options.stretchH] Stretch mode 'all' or 'last'\n     * @param {Function} [options.stretchingColumnWidthFn] Function that returns the new width of the stretched column.\n     */\n  }]);\n\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      stretchMode = _ref.stretchMode,\n      _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n      stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n        return width;\n      } : _ref$stretchingItemWi;\n    _classCallCheck(this, ViewportColumnsCalculator);\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n    /**\n     * Number of rendered/visible columns\n     *\n     * @type {Number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn)\n     *\n     * @type {Number|null}\n     */\n\n    this.startColumn = null;\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn)\n     *\n     * @type {null}\n     */\n\n    this.endColumn = null;\n    /**\n     * Position of the first rendered/visible column (in px)\n     *\n     * @type {Number|null}\n     */\n\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n  /**\n   * Calculates viewport\n   */\n\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        } // +1 pixel for row header width compensation for horizontal scroll > 0\n\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n          this.endColumn = i;\n        }\n        startPositions.push(sum);\n        sum += columnWidth;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startColumn];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalColumns exceeded its total columns size set endColumn to the latest item\n\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {Number} totalWidth\n     */\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n      var remainingSize = totalColumnsWidth - sumAll;\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {Number} column\n     * @param {Number} baseWidth\n     * @returns {Number|null}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n      return result;\n    }\n    /**\n     * @param {Number} column\n     * @param {Number} baseWidth\n     * @returns {Number}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n      return this.stretchAllColumnsWidth[column];\n    }\n    /**\n     * @param {Number} column\n     * @returns {Number|null}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n      return null;\n    }\n    /**\n     * @param {Number} column Column index.\n     * @returns {Number}\n     * @private\n     */\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n      return width;\n    }\n  }]);\n  return ViewportColumnsCalculator;\n}();\nexport default ViewportColumnsCalculator;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","RENDER_TYPE","FULLY_VISIBLE_TYPE","privatePool","WeakMap","ViewportColumnsCalculator","get","_ref","arguments","undefined","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","stretchMode","_ref$stretchingItemWi","stretchingItemWidthFn","width","set","viewportWidth","totalColumns","columnWidthFn","stretchingColumnWidthFn","count","startColumn","endColumn","startPosition","stretchAllRatio","stretchLastWidth","stretch","totalTargetWidth","needVerifyLastColumnWidth","stretchAllColumnsWidth","calculate","value","sum","needReverse","startPositions","columnWidth","priv","_getColumnWidth","compensatedViewportWidth","push","viewportSum","refreshStretching","totalWidth","totalColumnsWidth","sumAll","permanentColumnWidth","remainingSize","Infinity","_columnWidth","lastColumnWidth","getStretchedColumnWidth","column","baseWidth","result","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","stretchedWidth","Math","round","newStretchedWidth","isNaN","DEFAULT_WIDTH"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/3rdparty/walkontable/src/calculator/viewportColumns.js"],"sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from './constants';\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\n\nvar ViewportColumnsCalculator =\n/*#__PURE__*/\nfunction () {\n  _createClass(ViewportColumnsCalculator, null, [{\n    key: \"DEFAULT_WIDTH\",\n\n    /**\n     * Default column width\n     *\n     * @type {Number}\n     */\n    get: function get() {\n      return 50;\n    }\n    /**\n     * @param {Object} options Object with all options specyfied for column viewport calculation.\n     * @param {Number} options.viewportWidth Width of the viewport\n     * @param {Number} options.scrollOffset Current horizontal scroll position of the viewport\n     * @param {Number} options.totalColumns Total number of columns\n     * @param {Function} options.columnWidthFn Function that returns the width of the column at a given index (in px)\n     * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin)\n     * @param {String} options.calculationType String which describes types of calculation which will be performed.\n     * @param {String} [options.stretchH] Stretch mode 'all' or 'last'\n     * @param {Function} [options.stretchingColumnWidthFn] Function that returns the new width of the stretched column.\n     */\n\n  }]);\n\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        viewportSize = _ref.viewportSize,\n        scrollOffset = _ref.scrollOffset,\n        totalItems = _ref.totalItems,\n        itemSizeFn = _ref.itemSizeFn,\n        overrideFn = _ref.overrideFn,\n        calculationType = _ref.calculationType,\n        stretchMode = _ref.stretchMode,\n        _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n        stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n      return width;\n    } : _ref$stretchingItemWi;\n\n    _classCallCheck(this, ViewportColumnsCalculator);\n\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n    /**\n     * Number of rendered/visible columns\n     *\n     * @type {Number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn)\n     *\n     * @type {Number|null}\n     */\n\n    this.startColumn = null;\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn)\n     *\n     * @type {null}\n     */\n\n    this.endColumn = null;\n    /**\n     * Position of the first rendered/visible column (in px)\n     *\n     * @type {Number|null}\n     */\n\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n  /**\n   * Calculates viewport\n   */\n\n\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        } // +1 pixel for row header width compensation for horizontal scroll > 0\n\n\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n\n          this.endColumn = i;\n        }\n\n        startPositions.push(sum);\n        sum += columnWidth;\n\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n\n      this.startPosition = startPositions[this.startColumn];\n\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalColumns exceeded its total columns size set endColumn to the latest item\n\n\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {Number} totalWidth\n     */\n\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n\n      var remainingSize = totalColumnsWidth - sumAll;\n\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {Number} column\n     * @param {Number} baseWidth\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n\n      return result;\n    }\n    /**\n     * @param {Number} column\n     * @param {Number} baseWidth\n     * @returns {Number}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n\n      return this.stretchAllColumnsWidth[column];\n    }\n    /**\n     * @param {Number} column\n     * @returns {Number|null}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n\n      return null;\n    }\n    /**\n     * @param {Number} column Column index.\n     * @returns {Number}\n     * @private\n     */\n\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n\n      return width;\n    }\n  }]);\n\n  return ViewportColumnsCalculator;\n}();\n\nexport default ViewportColumnsCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module"}