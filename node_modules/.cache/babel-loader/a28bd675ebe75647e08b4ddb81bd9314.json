{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport Core from './../core';\nimport { isObject } from './../helpers/object';\n/**\n * @class RecordTranslator\n * @util\n */\n\nexport var RecordTranslator = /*#__PURE__*/\nfunction () {\n  function RecordTranslator(hot) {\n    _classCallCheck(this, RecordTranslator);\n    this.hot = hot;\n  }\n  /**\n   * Translate physical row index into visual.\n   *\n   * @param {Number} row Physical row index.\n   * @returns {Number} Returns visual row index.\n   */\n\n  _createClass(RecordTranslator, [{\n    key: \"toVisualRow\",\n    value: function toVisualRow(row) {\n      return this.hot.runHooks('unmodifyRow', row);\n    }\n    /**\n     * Translate physical column index into visual.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Number} Returns visual column index.\n     */\n  }, {\n    key: \"toVisualColumn\",\n    value: function toVisualColumn(column) {\n      return this.hot.runHooks('unmodifyCol', column);\n    }\n    /**\n     * Translate physical coordinates into visual. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Physical coordinates or row index.\n     * @param {Number} [column] Physical column index.\n     * @returns {Object|Array} Returns an object with visual records or an array if coordinates passed as separate arguments.\n     */\n  }, {\n    key: \"toVisual\",\n    value: function toVisual(row, column) {\n      var result;\n      if (isObject(row)) {\n        result = {\n          row: this.toVisualRow(row.row),\n          column: this.toVisualColumn(row.column)\n        };\n      } else {\n        result = [this.toVisualRow(row), this.toVisualColumn(column)];\n      }\n      return result;\n    }\n    /**\n     * Translate visual row index into physical.\n     *\n     * @param {Number} row Visual row index.\n     * @returns {Number} Returns physical row index.\n     */\n  }, {\n    key: \"toPhysicalRow\",\n    value: function toPhysicalRow(row) {\n      return this.hot.runHooks('modifyRow', row);\n    }\n    /**\n     * Translate visual column index into physical.\n     *\n     * @param {Number} column Visual column index.\n     * @returns {Number} Returns physical column index.\n     */\n  }, {\n    key: \"toPhysicalColumn\",\n    value: function toPhysicalColumn(column) {\n      return this.hot.runHooks('modifyCol', column);\n    }\n    /**\n     * Translate visual coordinates into physical. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Visual coordinates or row index.\n     * @param {Number} [column] Visual column index.\n     * @returns {Object|Array} Returns an object with physical records or an array if coordinates passed as separate arguments.\n     */\n  }, {\n    key: \"toPhysical\",\n    value: function toPhysical(row, column) {\n      var result;\n      if (isObject(row)) {\n        result = {\n          row: this.toPhysicalRow(row.row),\n          column: this.toPhysicalColumn(row.column)\n        };\n      } else {\n        result = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];\n      }\n      return result;\n    }\n  }]);\n  return RecordTranslator;\n}();\nvar identities = new WeakMap();\nvar translatorSingletons = new WeakMap();\n/**\n * Allows to register custom identity manually.\n *\n * @param {*} identity\n * @param {*} hot\n */\n\nexport function registerIdentity(identity, hot) {\n  identities.set(identity, hot);\n}\n/**\n * Returns a cached instance of RecordTranslator or create the new one for given identity.\n *\n * @param {*} identity\n * @returns {RecordTranslator}\n */\n\nexport function getTranslator(identity) {\n  var instance = identity instanceof Core ? identity : getIdentity(identity);\n  var singleton;\n  if (translatorSingletons.has(instance)) {\n    singleton = translatorSingletons.get(instance);\n  } else {\n    singleton = new RecordTranslator(instance);\n    translatorSingletons.set(instance, singleton);\n  }\n  return singleton;\n}\n/**\n * Returns mapped identity.\n *\n * @param {*} identity\n * @returns {*}\n */\n\nexport function getIdentity(identity) {\n  if (!identities.has(identity)) {\n    throw Error('Record translator was not registered for this object identity');\n  }\n  return identities.get(identity);\n}","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Core","isObject","RecordTranslator","hot","value","toVisualRow","row","runHooks","toVisualColumn","column","toVisual","result","toPhysicalRow","toPhysicalColumn","toPhysical","identities","WeakMap","translatorSingletons","registerIdentity","identity","set","getTranslator","getIdentity","singleton","has","get","Error"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/utils/recordTranslator.js"],"sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Core from './../core';\nimport { isObject } from './../helpers/object';\n/**\n * @class RecordTranslator\n * @util\n */\n\nexport var RecordTranslator =\n/*#__PURE__*/\nfunction () {\n  function RecordTranslator(hot) {\n    _classCallCheck(this, RecordTranslator);\n\n    this.hot = hot;\n  }\n  /**\n   * Translate physical row index into visual.\n   *\n   * @param {Number} row Physical row index.\n   * @returns {Number} Returns visual row index.\n   */\n\n\n  _createClass(RecordTranslator, [{\n    key: \"toVisualRow\",\n    value: function toVisualRow(row) {\n      return this.hot.runHooks('unmodifyRow', row);\n    }\n    /**\n     * Translate physical column index into visual.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Number} Returns visual column index.\n     */\n\n  }, {\n    key: \"toVisualColumn\",\n    value: function toVisualColumn(column) {\n      return this.hot.runHooks('unmodifyCol', column);\n    }\n    /**\n     * Translate physical coordinates into visual. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Physical coordinates or row index.\n     * @param {Number} [column] Physical column index.\n     * @returns {Object|Array} Returns an object with visual records or an array if coordinates passed as separate arguments.\n     */\n\n  }, {\n    key: \"toVisual\",\n    value: function toVisual(row, column) {\n      var result;\n\n      if (isObject(row)) {\n        result = {\n          row: this.toVisualRow(row.row),\n          column: this.toVisualColumn(row.column)\n        };\n      } else {\n        result = [this.toVisualRow(row), this.toVisualColumn(column)];\n      }\n\n      return result;\n    }\n    /**\n     * Translate visual row index into physical.\n     *\n     * @param {Number} row Visual row index.\n     * @returns {Number} Returns physical row index.\n     */\n\n  }, {\n    key: \"toPhysicalRow\",\n    value: function toPhysicalRow(row) {\n      return this.hot.runHooks('modifyRow', row);\n    }\n    /**\n     * Translate visual column index into physical.\n     *\n     * @param {Number} column Visual column index.\n     * @returns {Number} Returns physical column index.\n     */\n\n  }, {\n    key: \"toPhysicalColumn\",\n    value: function toPhysicalColumn(column) {\n      return this.hot.runHooks('modifyCol', column);\n    }\n    /**\n     * Translate visual coordinates into physical. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Visual coordinates or row index.\n     * @param {Number} [column] Visual column index.\n     * @returns {Object|Array} Returns an object with physical records or an array if coordinates passed as separate arguments.\n     */\n\n  }, {\n    key: \"toPhysical\",\n    value: function toPhysical(row, column) {\n      var result;\n\n      if (isObject(row)) {\n        result = {\n          row: this.toPhysicalRow(row.row),\n          column: this.toPhysicalColumn(row.column)\n        };\n      } else {\n        result = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];\n      }\n\n      return result;\n    }\n  }]);\n\n  return RecordTranslator;\n}();\nvar identities = new WeakMap();\nvar translatorSingletons = new WeakMap();\n/**\n * Allows to register custom identity manually.\n *\n * @param {*} identity\n * @param {*} hot\n */\n\nexport function registerIdentity(identity, hot) {\n  identities.set(identity, hot);\n}\n/**\n * Returns a cached instance of RecordTranslator or create the new one for given identity.\n *\n * @param {*} identity\n * @returns {RecordTranslator}\n */\n\nexport function getTranslator(identity) {\n  var instance = identity instanceof Core ? identity : getIdentity(identity);\n  var singleton;\n\n  if (translatorSingletons.has(instance)) {\n    singleton = translatorSingletons.get(instance);\n  } else {\n    singleton = new RecordTranslator(instance);\n    translatorSingletons.set(instance, singleton);\n  }\n\n  return singleton;\n}\n/**\n * Returns mapped identity.\n *\n * @param {*} identity\n * @returns {*}\n */\n\nexport function getIdentity(identity) {\n  if (!identities.has(identity)) {\n    throw Error('Record translator was not registered for this object identity');\n  }\n\n  return identities.get(identity);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}