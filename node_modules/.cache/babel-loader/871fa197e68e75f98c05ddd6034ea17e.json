{"ast":null,"code":"import staticRegister from './../../utils/staticRegister';\nimport pluralizeFn from './pluralize';\nvar _staticRegister = staticRegister('phraseFormatters'),\n  registerGloballyPhraseFormatter = _staticRegister.register,\n  getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {String} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);","map":{"version":3,"names":["staticRegister","pluralizeFn","_staticRegister","registerGloballyPhraseFormatter","register","getGlobalPhraseFormatters","getValues","name","formatterFn","getAll","registerPhraseFormatter","getPhraseFormatters"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/i18n/phraseFormatters/index.js"],"sourcesContent":["import staticRegister from './../../utils/staticRegister';\nimport pluralizeFn from './pluralize';\n\nvar _staticRegister = staticRegister('phraseFormatters'),\n    registerGloballyPhraseFormatter = _staticRegister.register,\n    getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {String} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);"],"mappings":"AAAA,OAAOA,cAAc,MAAM,8BAA8B;AACzD,OAAOC,WAAW,MAAM,aAAa;AAErC,IAAIC,eAAe,GAAGF,cAAc,CAAC,kBAAkB,CAAC;EACpDG,+BAA+B,GAAGD,eAAe,CAACE,QAAQ;EAC1DC,yBAAyB,GAAGH,eAAe,CAACI,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASF,QAAQ,CAACG,IAAI,EAAEC,WAAW,EAAE;EAC1CL,+BAA+B,CAACI,IAAI,EAAEC,WAAW,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,MAAM,GAAG;EACvB,OAAOJ,yBAAyB,EAAE;AACpC;AACA,SAASD,QAAQ,IAAIM,uBAAuB,EAAED,MAAM,IAAIE,mBAAmB;AAC3EP,QAAQ,CAAC,WAAW,EAAEH,WAAW,CAAC"},"metadata":{},"sourceType":"module"}