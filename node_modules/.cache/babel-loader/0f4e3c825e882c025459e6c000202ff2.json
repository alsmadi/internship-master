{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get(target, property, receiver || target);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport BasePlugin from './../_base';\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from './../../helpers/array';\nimport { cancelAnimationFrame, requestAnimationFrame } from './../../helpers/feature';\nimport GhostTable from './../../utils/ghostTable';\nimport { isObject, hasOwnProperty } from './../../helpers/object';\nimport { valueAccordingPercent, rangeEach } from './../../helpers/number';\nimport { registerPlugin } from './../../plugins';\nimport SamplesGenerator from './../../utils/samplesGenerator';\nimport { isPercentValue } from './../../helpers/string';\nimport { ViewportColumnsCalculator } from './../../3rdparty/walkontable/src';\nvar privatePool = new WeakMap();\n/**\n * @plugin AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   date: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\nvar AutoColumnSize = /*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n  _createClass(AutoColumnSize, null, [{\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n  function AutoColumnSize(hotInstance) {\n    var _this;\n    _classCallCheck(this, AutoColumnSize);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoColumnSize).call(this, hotInstance));\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Cached columns widths.\n     *\n     * @type {Number[]}\n     */\n\n    _this.widths = [];\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n      var cellValue = '';\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n      var bundleCountSeed = 0;\n      if (cellMeta.label) {\n        var _cellMeta$label = cellMeta.label,\n          labelValue = _cellMeta$label.value,\n          labelProperty = _cellMeta$label.property;\n        var labelText = '';\n        if (labelValue) {\n          labelText = typeof labelValue === 'function' ? labelValue(row, column, _this.hot.colToProp(column), cellValue) : labelValue;\n        } else if (labelProperty) {\n          var labelData = _this.hot.getDataAtRowProp(row, labelProperty);\n          labelText = labelData !== null ? labelData : '';\n        }\n        bundleCountSeed = labelText.length;\n      }\n      return {\n        value: cellValue,\n        bundleCountSeed: bundleCountSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {Boolean}\n     */\n\n    _this.inProgress = false; // moved to constructor to allow auto-sizing the columns when the plugin is disabled\n\n    _this.addHook('beforeColumnResize', function (col, size, isDblClick) {\n      return _this.onBeforeColumnResize(col, size, isDblClick);\n    });\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      var setting = this.hot.getSettings().autoColumnSize;\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData();\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('beforeRender', function (force) {\n        return _this2.onBeforeRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n      }\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {Number|Object} colRange Column index or an object with `from` and `to` indexes as a range.\n     * @param {Number|Object} rowRange Row index or an object with `from` and `to` indexes as a range.\n     * @param {Boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this3 = this;\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (col) {\n        if (force || _this3.widths[col] === void 0 && !_this3.hot._getColWidthFromSettings(col)) {\n          var samples = _this3.samplesGenerator.generateColumnSamples(col, rowsRange);\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              column = _ref2[0],\n              sample = _ref2[1];\n            return _this3.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n      if (this.ghostTable.columns.length) {\n        this.ghostTable.getWidths(function (col, width) {\n          _this3.widths[col] = width;\n        });\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specyfied column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {Object|Number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this4 = this;\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this4.hot) {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false;\n          return;\n        }\n        _this4.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this4.hot.view.wt.wtOverlays.adjustElementsSize();\n        }\n      };\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings().autoColumnSize;\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? this.hot.getSettings().autoColumnSize.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? this.hot.getSettings().autoColumnSize.allowSampleDuplicates : void 0;\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {Number}\n     */\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      /* eslint-disable no-bitwise */\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n      if (isObject(this.hot.getSettings().autoColumnSize)) {\n        limit = this.hot.getSettings().autoColumnSize.syncLimit;\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {Boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {Number}\n     */\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n      if (width === void 0) {\n        width = this.widths[column];\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {Number} Returns column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getFirstVisibleColumn();\n      }\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getFirstRenderedColumn();\n      }\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {Number} Returns column index or -1 if table is not rendered.\n     */\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getLastVisibleColumn();\n      }\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getLastRenderedColumn();\n      }\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n      var _privatePool$get = privatePool.get(this),\n        cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {Number[]} [columns] List of physical column indexes to clear.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this5 = this;\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (columns.length) {\n        arrayEach(columns, function (physicalIndex) {\n          _this5.widths[physicalIndex] = void 0;\n        });\n      } else {\n        this.widths.length = 0;\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.widths, function (item) {\n        return item === void 0;\n      }).length;\n    }\n    /**\n     * On before render listener.\n     *\n     * @private\n     */\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      var force = this.hot.renderCall;\n      var rowsCount = this.hot.countRows();\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      } // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n      if (!rowsCount) {\n        return;\n      }\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this6 = this;\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this6.hot) {\n            _this6.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes\n     */\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this7 = this;\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          column = _ref4[1];\n        return _this7.hot.propToCol(column);\n      });\n      this.clearCache(changedColumns);\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {Number} col\n     * @param {Number} size\n     * @param {Boolean} isDblClick\n     * @returns {Number}\n     */\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(col, size, isDblClick) {\n      var newSize = size;\n      if (isDblClick) {\n        this.calculateColumnsWidth(col, void 0, true);\n        newSize = this.getColumnWidth(col, void 0, false);\n      }\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n  return AutoColumnSize;\n}(BasePlugin);\nregisterPlugin('autoColumnSize', AutoColumnSize);\nexport default AutoColumnSize;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Object","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_classCallCheck","instance","Constructor","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_get","target","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","_setPrototypeOf","p","BasePlugin","arrayEach","arrayFilter","arrayReduce","arrayMap","cancelAnimationFrame","requestAnimationFrame","GhostTable","isObject","valueAccordingPercent","rangeEach","registerPlugin","SamplesGenerator","isPercentValue","ViewportColumnsCalculator","privatePool","WeakMap","AutoColumnSize","_BasePlugin","hotInstance","_this","set","cachedColumnHeaders","widths","ghostTable","hot","samplesGenerator","row","column","cellMeta","getCellMeta","cellValue","spanned","getDataAtCell","bundleCountSeed","label","_cellMeta$label","labelValue","labelProperty","labelText","colToProp","labelData","getDataAtRowProp","firstCalculation","inProgress","addHook","col","size","isDblClick","onBeforeColumnResize","isEnabled","getSettings","autoColumnSize","colWidths","enablePlugin","_this2","enabled","setting","useHeaders","setSetting","setSamplingOptions","onAfterLoadData","changes","onBeforeChange","force","onBeforeRender","width","getColumnWidth","onAfterInit","updatePlugin","changedColumns","findColumnsWhereHeaderWasChanged","clearCache","disablePlugin","calculateColumnsWidth","_this3","colRange","arguments","from","to","countCols","rowRange","countRows","columnsRange","rowsRange","_getColWidthFromSettings","samples","generateColumnSamples","_ref","_ref2","sample","addColumn","columns","getWidths","clean","calculateAllColumnsWidth","_this4","current","timer","loop","Math","min","CALCULATION_STEP","view","wt","wtOverlays","adjustElementsSize","syncLimit","getSyncCalculationLimit","samplingRatio","allowSampleDuplicates","isNaN","setSampleCount","parseInt","setAllowDuplicates","recalculateAllColumnsWidth","wtTable","isVisible","limit","SYNC_CALCULATION_LIMIT","colsLimit","defaultWidth","keepMinimum","max","DEFAULT_WIDTH","getFirstVisibleColumn","wot","wtViewport","columnsVisibleCalculator","columnsRenderCalculator","getFirstRenderedColumn","getLastVisibleColumn","getLastRenderedColumn","columnHeaders","getColHeader","_privatePool$get","acc","columnTitle","physicalColumn","cachedColumnsLength","_this5","physicalIndex","isNeedRecalculate","item","renderCall","rowsCount","firstVisibleColumn","lastVisibleColumn","_this6","setTimeout","_this7","_ref3","_ref4","propToCol","newSize","destroy"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/autoColumnSize/autoColumnSize.js"],"sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.timers\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport BasePlugin from './../_base';\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from './../../helpers/array';\nimport { cancelAnimationFrame, requestAnimationFrame } from './../../helpers/feature';\nimport GhostTable from './../../utils/ghostTable';\nimport { isObject, hasOwnProperty } from './../../helpers/object';\nimport { valueAccordingPercent, rangeEach } from './../../helpers/number';\nimport { registerPlugin } from './../../plugins';\nimport SamplesGenerator from './../../utils/samplesGenerator';\nimport { isPercentValue } from './../../helpers/string';\nimport { ViewportColumnsCalculator } from './../../3rdparty/walkontable/src';\nvar privatePool = new WeakMap();\n/**\n * @plugin AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   date: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\nvar AutoColumnSize =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n\n  _createClass(AutoColumnSize, null, [{\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n\n  function AutoColumnSize(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, AutoColumnSize);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoColumnSize).call(this, hotInstance));\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Cached columns widths.\n     *\n     * @type {Number[]}\n     */\n\n    _this.widths = [];\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n\n      var cellValue = '';\n\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n\n      var bundleCountSeed = 0;\n\n      if (cellMeta.label) {\n        var _cellMeta$label = cellMeta.label,\n            labelValue = _cellMeta$label.value,\n            labelProperty = _cellMeta$label.property;\n        var labelText = '';\n\n        if (labelValue) {\n          labelText = typeof labelValue === 'function' ? labelValue(row, column, _this.hot.colToProp(column), cellValue) : labelValue;\n        } else if (labelProperty) {\n          var labelData = _this.hot.getDataAtRowProp(row, labelProperty);\n\n          labelText = labelData !== null ? labelData : '';\n        }\n\n        bundleCountSeed = labelText.length;\n      }\n\n      return {\n        value: cellValue,\n        bundleCountSeed: bundleCountSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {Boolean}\n     */\n\n    _this.inProgress = false; // moved to constructor to allow auto-sizing the columns when the plugin is disabled\n\n    _this.addHook('beforeColumnResize', function (col, size, isDblClick) {\n      return _this.onBeforeColumnResize(col, size, isDblClick);\n    });\n\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var setting = this.hot.getSettings().autoColumnSize;\n\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData();\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('beforeRender', function (force) {\n        return _this2.onBeforeRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n      }\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {Number|Object} colRange Column index or an object with `from` and `to` indexes as a range.\n     * @param {Number|Object} rowRange Row index or an object with `from` and `to` indexes as a range.\n     * @param {Boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this3 = this;\n\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (col) {\n        if (force || _this3.widths[col] === void 0 && !_this3.hot._getColWidthFromSettings(col)) {\n          var samples = _this3.samplesGenerator.generateColumnSamples(col, rowsRange);\n\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                column = _ref2[0],\n                sample = _ref2[1];\n\n            return _this3.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n\n      if (this.ghostTable.columns.length) {\n        this.ghostTable.getWidths(function (col, width) {\n          _this3.widths[col] = width;\n        });\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specyfied column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {Object|Number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this4 = this;\n\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this4.hot) {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false;\n          return;\n        }\n\n        _this4.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this4.hot.view.wt.wtOverlays.adjustElementsSize();\n        }\n      };\n\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings().autoColumnSize;\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? this.hot.getSettings().autoColumnSize.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? this.hot.getSettings().autoColumnSize.allowSampleDuplicates : void 0;\n\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      /* eslint-disable no-bitwise */\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n\n      if (isObject(this.hot.getSettings().autoColumnSize)) {\n        limit = this.hot.getSettings().autoColumnSize.syncLimit;\n\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {Boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n\n      if (width === void 0) {\n        width = this.widths[column];\n\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {Number} Returns column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getFirstVisibleColumn();\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getFirstRenderedColumn();\n      }\n\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {Number} Returns column index or -1 if table is not rendered.\n     */\n\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getLastVisibleColumn();\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getLastRenderedColumn();\n      }\n\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n\n      var _privatePool$get = privatePool.get(this),\n          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {Number[]} [columns] List of physical column indexes to clear.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this5 = this;\n\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (columns.length) {\n        arrayEach(columns, function (physicalIndex) {\n          _this5.widths[physicalIndex] = void 0;\n        });\n      } else {\n        this.widths.length = 0;\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.widths, function (item) {\n        return item === void 0;\n      }).length;\n    }\n    /**\n     * On before render listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      var force = this.hot.renderCall;\n      var rowsCount = this.hot.countRows();\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      } // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n\n      if (!rowsCount) {\n        return;\n      }\n\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this6 = this;\n\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this6.hot) {\n            _this6.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes\n     */\n\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this7 = this;\n\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            column = _ref4[1];\n\n        return _this7.hot.propToCol(column);\n      });\n      this.clearCache(changedColumns);\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {Number} col\n     * @param {Number} size\n     * @param {Boolean} isDblClick\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(col, size, isDblClick) {\n      var newSize = size;\n\n      if (isDblClick) {\n        this.calculateColumnsWidth(col, void 0, true);\n        newSize = this.getColumnWidth(col, void 0, false);\n      }\n\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return AutoColumnSize;\n}(BasePlugin);\n\nregisterPlugin('autoColumnSize', AutoColumnSize);\nexport default AutoColumnSize;"],"mappings":"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"},"metadata":{},"sourceType":"module"}