{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from './constants';\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of rows to render OR rows that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportRowsCalculator\n */\n\nvar ViewportRowsCalculator = /*#__PURE__*/\nfunction () {\n  _createClass(ViewportRowsCalculator, null, [{\n    key: \"DEFAULT_HEIGHT\",\n    /**\n     * Default row height\n     *\n     * @type {Number}\n     */\n    get: function get() {\n      return 23;\n    }\n    /**\n     * @param {Object} options Object with all options specyfied for row viewport calculation.\n     * @param {Number} options.viewportHeight Height of the viewport\n     * @param {Number} options.scrollOffset Current vertical scroll position of the viewport\n     * @param {Number} options.totalRows Total number of rows\n     * @param {Function} options.rowHeightFn Function that returns the height of the row at a given index (in px)\n     * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin)\n     * @param {String} options.calculationType String which describes types of calculation which will be performed.\n     * @param {Number} options.horizontalScrollbarHeight\n     */\n  }]);\n\n  function ViewportRowsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      scrollbarHeight = _ref.scrollbarHeight;\n    _classCallCheck(this, ViewportRowsCalculator);\n    privatePool.set(this, {\n      viewportHeight: viewportSize,\n      scrollOffset: scrollOffset,\n      totalRows: totalItems,\n      rowHeightFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n    /**\n     * Number of rendered/visible rows\n     *\n     * @type {Number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible row (can be overwritten using overrideFn)\n     *\n     * @type {Number|null}\n     */\n\n    this.startRow = null;\n    /**\n     * Index of the last rendered/visible row (can be overwritten using overrideFn)\n     *\n     * @type {null}\n     */\n\n    this.endRow = null;\n    /**\n     * Position of the first rendered/visible row (in px)\n     *\n     * @type {Number|null}\n     */\n\n    this.startPosition = null;\n    this.calculate();\n  }\n  /**\n   * Calculates viewport\n   */\n\n  _createClass(ViewportRowsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var rowHeightFn = priv.rowHeightFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalRows = priv.totalRows;\n      var viewportHeight = priv.viewportHeight;\n      var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;\n      var rowHeight; // Calculate the number (start and end index) of rows needed\n\n      for (var i = 0; i < totalRows; i++) {\n        rowHeight = rowHeightFn(i);\n        if (isNaN(rowHeight)) {\n          rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;\n        }\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startRow = i;\n        }\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? rowHeight : 0) <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          if (this.startRow === null) {\n            this.startRow = i;\n          }\n          this.endRow = i;\n        }\n        startPositions.push(sum);\n        sum += rowHeight;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endRow = i;\n        }\n        if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          needReverse = false;\n          break;\n        }\n      } // If the estimation has reached the last row and there is still some space available in the viewport,\n      // we need to render in reverse in order to fill the whole viewport with rows\n\n      if (this.endRow === totalRows - 1 && needReverse) {\n        this.startRow = this.endRow;\n        while (this.startRow > 0) {\n          // rowHeight is the height of the last row\n          var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];\n          if (viewportSum <= viewportHeight - horizontalScrollbarHeight || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startRow -= 1;\n          }\n          if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startRow !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startRow];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalRows exceeded its total rows size set endRow to the latest item\n\n      if (totalRows < this.endRow) {\n        this.endRow = totalRows - 1;\n      }\n      if (this.startRow !== null) {\n        this.count = this.endRow - this.startRow + 1;\n      }\n    }\n  }]);\n  return ViewportRowsCalculator;\n}();\nexport default ViewportRowsCalculator;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","RENDER_TYPE","FULLY_VISIBLE_TYPE","privatePool","WeakMap","ViewportRowsCalculator","get","_ref","arguments","undefined","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","scrollbarHeight","set","viewportHeight","totalRows","rowHeightFn","horizontalScrollbarHeight","count","startRow","endRow","startPosition","calculate","value","sum","needReverse","startPositions","priv","rowHeight","isNaN","DEFAULT_HEIGHT","push","viewportSum"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/3rdparty/walkontable/src/calculator/viewportRows.js"],"sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from './constants';\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of rows to render OR rows that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportRowsCalculator\n */\n\nvar ViewportRowsCalculator =\n/*#__PURE__*/\nfunction () {\n  _createClass(ViewportRowsCalculator, null, [{\n    key: \"DEFAULT_HEIGHT\",\n\n    /**\n     * Default row height\n     *\n     * @type {Number}\n     */\n    get: function get() {\n      return 23;\n    }\n    /**\n     * @param {Object} options Object with all options specyfied for row viewport calculation.\n     * @param {Number} options.viewportHeight Height of the viewport\n     * @param {Number} options.scrollOffset Current vertical scroll position of the viewport\n     * @param {Number} options.totalRows Total number of rows\n     * @param {Function} options.rowHeightFn Function that returns the height of the row at a given index (in px)\n     * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin)\n     * @param {String} options.calculationType String which describes types of calculation which will be performed.\n     * @param {Number} options.horizontalScrollbarHeight\n     */\n\n  }]);\n\n  function ViewportRowsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        viewportSize = _ref.viewportSize,\n        scrollOffset = _ref.scrollOffset,\n        totalItems = _ref.totalItems,\n        itemSizeFn = _ref.itemSizeFn,\n        overrideFn = _ref.overrideFn,\n        calculationType = _ref.calculationType,\n        scrollbarHeight = _ref.scrollbarHeight;\n\n    _classCallCheck(this, ViewportRowsCalculator);\n\n    privatePool.set(this, {\n      viewportHeight: viewportSize,\n      scrollOffset: scrollOffset,\n      totalRows: totalItems,\n      rowHeightFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n    /**\n     * Number of rendered/visible rows\n     *\n     * @type {Number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible row (can be overwritten using overrideFn)\n     *\n     * @type {Number|null}\n     */\n\n    this.startRow = null;\n    /**\n     * Index of the last rendered/visible row (can be overwritten using overrideFn)\n     *\n     * @type {null}\n     */\n\n    this.endRow = null;\n    /**\n     * Position of the first rendered/visible row (in px)\n     *\n     * @type {Number|null}\n     */\n\n    this.startPosition = null;\n    this.calculate();\n  }\n  /**\n   * Calculates viewport\n   */\n\n\n  _createClass(ViewportRowsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var rowHeightFn = priv.rowHeightFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalRows = priv.totalRows;\n      var viewportHeight = priv.viewportHeight;\n      var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;\n      var rowHeight; // Calculate the number (start and end index) of rows needed\n\n      for (var i = 0; i < totalRows; i++) {\n        rowHeight = rowHeightFn(i);\n\n        if (isNaN(rowHeight)) {\n          rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;\n        }\n\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startRow = i;\n        }\n\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? rowHeight : 0) <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          if (this.startRow === null) {\n            this.startRow = i;\n          }\n\n          this.endRow = i;\n        }\n\n        startPositions.push(sum);\n        sum += rowHeight;\n\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endRow = i;\n        }\n\n        if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          needReverse = false;\n          break;\n        }\n      } // If the estimation has reached the last row and there is still some space available in the viewport,\n      // we need to render in reverse in order to fill the whole viewport with rows\n\n\n      if (this.endRow === totalRows - 1 && needReverse) {\n        this.startRow = this.endRow;\n\n        while (this.startRow > 0) {\n          // rowHeight is the height of the last row\n          var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];\n\n          if (viewportSum <= viewportHeight - horizontalScrollbarHeight || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startRow -= 1;\n          }\n\n          if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {\n            break;\n          }\n        }\n      }\n\n      if (calculationType === RENDER_TYPE && this.startRow !== null && overrideFn) {\n        overrideFn(this);\n      }\n\n      this.startPosition = startPositions[this.startRow];\n\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalRows exceeded its total rows size set endRow to the latest item\n\n\n      if (totalRows < this.endRow) {\n        this.endRow = totalRows - 1;\n      }\n\n      if (this.startRow !== null) {\n        this.count = this.endRow - this.startRow + 1;\n      }\n    }\n  }]);\n\n  return ViewportRowsCalculator;\n}();\n\nexport default ViewportRowsCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module"}