{"ast":null,"code":"import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.match\";\nimport \"core-js/modules/es.string.replace\";\n\n/**\n * Check if provided expression is valid formula expression.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\nexport function isFormulaExpression(expression) {\n  return typeof expression === 'string' && expression.length >= 2 && expression.charAt(0) === '=';\n}\n/**\n * Check if provided formula expression is escaped.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\n\nexport function isFormulaExpressionEscaped(expression) {\n  return typeof expression === 'string' && expression.charAt(0) === '\\'' && expression.charAt(1) === '=';\n}\n/**\n * Replace escaped formula expression into valid string.\n *\n * @param {String} expression Expression to process.\n * @returns {String}\n */\n\nexport function unescapeFormulaExpression(expression) {\n  return isFormulaExpressionEscaped(expression) ? expression.substr(1) : expression;\n}\n/**\n * Upper case formula expression.\n *\n * @param {String} expression Formula expression.\n * @returns {String}\n */\n\nexport function toUpperCaseFormula(expression) {\n  var PATTERN = /(\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\+))|(\\\\'|'(?:\\\\'|[^'])*'|(\\+))/g;\n  var strings = expression.match(PATTERN) || [];\n  var index = -1;\n  return expression.toUpperCase().replace(PATTERN, function () {\n    index += 1;\n    return strings[index];\n  });\n}\n/**\n * Cell coordinates function factory.\n *\n * @param {String} axis An axis name (`row` or `column`) which default index will be applied to.\n * @param {Number} defaultIndex Default index.\n * @returns {Function}\n */\n\nexport function cellCoordFactory(axis, defaultIndex) {\n  return function (cell) {\n    return {\n      row: axis === 'row' ? defaultIndex : cell.row,\n      column: axis === 'column' ? defaultIndex : cell.column\n    };\n  };\n}","map":{"version":3,"names":["isFormulaExpression","expression","length","charAt","isFormulaExpressionEscaped","unescapeFormulaExpression","substr","toUpperCaseFormula","PATTERN","strings","match","index","toUpperCase","replace","cellCoordFactory","axis","defaultIndex","cell","row","column"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/plugins/formulas/utils.js"],"sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.match\";\nimport \"core-js/modules/es.string.replace\";\n\n/**\n * Check if provided expression is valid formula expression.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\nexport function isFormulaExpression(expression) {\n  return typeof expression === 'string' && expression.length >= 2 && expression.charAt(0) === '=';\n}\n/**\n * Check if provided formula expression is escaped.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\n\nexport function isFormulaExpressionEscaped(expression) {\n  return typeof expression === 'string' && expression.charAt(0) === '\\'' && expression.charAt(1) === '=';\n}\n/**\n * Replace escaped formula expression into valid string.\n *\n * @param {String} expression Expression to process.\n * @returns {String}\n */\n\nexport function unescapeFormulaExpression(expression) {\n  return isFormulaExpressionEscaped(expression) ? expression.substr(1) : expression;\n}\n/**\n * Upper case formula expression.\n *\n * @param {String} expression Formula expression.\n * @returns {String}\n */\n\nexport function toUpperCaseFormula(expression) {\n  var PATTERN = /(\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\+))|(\\\\'|'(?:\\\\'|[^'])*'|(\\+))/g;\n  var strings = expression.match(PATTERN) || [];\n  var index = -1;\n  return expression.toUpperCase().replace(PATTERN, function () {\n    index += 1;\n    return strings[index];\n  });\n}\n/**\n * Cell coordinates function factory.\n *\n * @param {String} axis An axis name (`row` or `column`) which default index will be applied to.\n * @param {Number} defaultIndex Default index.\n * @returns {Function}\n */\n\nexport function cellCoordFactory(axis, defaultIndex) {\n  return function (cell) {\n    return {\n      row: axis === 'row' ? defaultIndex : cell.row,\n      column: axis === 'column' ? defaultIndex : cell.column\n    };\n  };\n}"],"mappings":"AAAA,OAAO,gCAAgC;AACvC,OAAO,iCAAiC;AACxC,OAAO,mCAAmC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmB,CAACC,UAAU,EAAE;EAC9C,OAAO,OAAOA,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACC,MAAM,IAAI,CAAC,IAAID,UAAU,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,0BAA0B,CAACH,UAAU,EAAE;EACrD,OAAO,OAAOA,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIF,UAAU,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,yBAAyB,CAACJ,UAAU,EAAE;EACpD,OAAOG,0BAA0B,CAACH,UAAU,CAAC,GAAGA,UAAU,CAACK,MAAM,CAAC,CAAC,CAAC,GAAGL,UAAU;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,kBAAkB,CAACN,UAAU,EAAE;EAC7C,IAAIO,OAAO,GAAG,wDAAwD;EACtE,IAAIC,OAAO,GAAGR,UAAU,CAACS,KAAK,CAACF,OAAO,CAAC,IAAI,EAAE;EAC7C,IAAIG,KAAK,GAAG,CAAC,CAAC;EACd,OAAOV,UAAU,CAACW,WAAW,EAAE,CAACC,OAAO,CAACL,OAAO,EAAE,YAAY;IAC3DG,KAAK,IAAI,CAAC;IACV,OAAOF,OAAO,CAACE,KAAK,CAAC;EACvB,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,gBAAgB,CAACC,IAAI,EAAEC,YAAY,EAAE;EACnD,OAAO,UAAUC,IAAI,EAAE;IACrB,OAAO;MACLC,GAAG,EAAEH,IAAI,KAAK,KAAK,GAAGC,YAAY,GAAGC,IAAI,CAACC,GAAG;MAC7CC,MAAM,EAAEJ,IAAI,KAAK,QAAQ,GAAGC,YAAY,GAAGC,IAAI,CAACE;IAClD,CAAC;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module"}