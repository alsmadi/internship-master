{"ast":null,"code":"import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport { CellCoords } from './3rdparty/walkontable/src';\nimport { KEY_CODES, isMetaKey, isCtrlMetaKey } from './helpers/unicode';\nimport { stopPropagation, stopImmediatePropagation, isImmediatePropagationStopped } from './helpers/dom/event';\nimport { getEditorInstance } from './editors';\nimport EventManager from './eventManager';\nimport { EditorState } from './editors/_baseEditor';\nimport { getParentWindow } from './helpers/dom/element';\nvar EditorManager = /*#__PURE__*/\nfunction () {\n  /**\n   * @param {Handsontable} instance\n   * @param {GridSettings} priv\n   * @param {Selection} selection\n   */\n  function EditorManager(instance, priv, selection) {\n    var _this = this;\n    _classCallCheck(this, EditorManager);\n\n    /**\n     * Instance of {@link Handsontable}\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.priv = priv;\n    /**\n     * Instance of {@link Selection}\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {*}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {Boolean} revertOriginal\n     */\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {*}\n     */\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n      if (this.lock) {\n        return;\n      }\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n        row = _this$instance$select.row,\n        col = _this$instance$select.col;\n      this.cellProperties = this.instance.getCellMeta(row, col);\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n      var editorClass = this.instance.getCellEditor(this.cellProperties);\n      var td = this.instance.getCell(row, col, true);\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(col);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.runHooks('modifyRow', row), col);\n        this.activeEditor = getEditorInstance(editorClass, this.instance);\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|String} newInitialValue new value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event\n     */\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {Boolean} restoreOriginalValue\n     * @param {Boolean} [isCtrlPressed]\n     * @param {Function} [callback]\n     */\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      return this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.priv.settings.enterMoves === 'function' ? this.priv.settings.enterMoves(event) : this.priv.settings.enterMoves;\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, 1);\n      } else {\n        this.selection.transformStart(0, 1);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1);\n      } else {\n        this.selection.transformStart(0, -1);\n      }\n    }\n    /**\n     * onAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event\n     */\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n      this.instance.runHooks('beforeKeyDown', event); // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || event.keyCode === 229) {\n        return;\n      }\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n      this.priv.lastKeyCode = event.keyCode;\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isMetaKey(event.keyCode) && !isCtrlMetaKey(event.keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n      switch (event.keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            stopPropagation(event);\n          }\n          break;\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.priv.settings.tabMoves === 'function' ? this.priv.settings.tabMoves(event) : this.priv.settings.tabMoves;\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EditorState.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n          event.preventDefault();\n          break;\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(0, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, 0));\n          }\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.countRows() - 1, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.countCols() - 1));\n          }\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          stopPropagation(event);\n          break;\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          stopPropagation(event);\n          break;\n        default:\n          break;\n      }\n    }\n    /**\n     * onCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} coords\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem\n     */\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n  return EditorManager;\n}();\nvar instances = new WeakMap();\n/**\n * @param {Handsontable} hotInstance\n * @param {GridSettings} hotSettings\n * @param {Selection} selection\n * @param {DataMap} datamap\n */\n\nEditorManager.getInstance = function (hotInstance, hotSettings, selection, datamap) {\n  var editorManager = instances.get(hotInstance);\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, hotSettings, selection, datamap);\n    instances.set(hotInstance, editorManager);\n  }\n  return editorManager;\n};\nexport default EditorManager;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","CellCoords","KEY_CODES","isMetaKey","isCtrlMetaKey","stopPropagation","stopImmediatePropagation","isImmediatePropagationStopped","getEditorInstance","EventManager","EditorState","getParentWindow","EditorManager","priv","selection","_this","eventManager","destroyed","lock","activeEditor","cellProperties","addHook","event","onAfterDocumentKeyDown","frame","rootWindow","addEventListener","document","documentElement","runHooks","rootDocument","isOpened","isListening","openEditor","view","wt","update","coords","elem","onCellDblClick","value","lockEditor","unlockEditor","destroyEditor","revertOriginal","closeEditor","getActiveEditor","prepareEditor","_this2","isWaiting","dataSaved","_this$instance$select","selectedRange","current","highlight","row","col","getCellMeta","readOnly","clearActiveEditor","editorClass","getCellEditor","td","getCell","prop","colToProp","originalValue","getSourceDataAtCell","prepare","isEditorOpened","newInitialValue","beginEditing","restoreOriginalValue","isCtrlPressed","callback","finishEditing","closeEditorAndSaveChanges","closeEditorAndRestoreOriginalValue","moveSelectionAfterEnter","isShiftPressed","enterMoves","settings","transformStart","moveSelectionUp","transformEnd","moveSelectionDown","moveSelectionRight","moveSelectionLeft","keyCode","lastKeyCode","isSelected","ctrlKey","metaKey","altKey","shiftKey","rangeModifier","setRangeEnd","setRangeStart","tabMoves","A","selectAll","preventDefault","ARROW_UP","ARROW_DOWN","ARROW_RIGHT","ARROW_LEFT","TAB","BACKSPACE","DELETE","emptySelectedCells","F2","enableFullEditMode","ENTER","state","WAITING","getSettings","enterBeginsEditing","ESCAPE","focus","HOME","call","from","END","countRows","countCols","PAGE_UP","countVisibleRows","PAGE_DOWN","nodeName","destroy","instances","WeakMap","getInstance","hotInstance","hotSettings","datamap","editorManager","get","set"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/editorManager.js"],"sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { CellCoords } from './3rdparty/walkontable/src';\nimport { KEY_CODES, isMetaKey, isCtrlMetaKey } from './helpers/unicode';\nimport { stopPropagation, stopImmediatePropagation, isImmediatePropagationStopped } from './helpers/dom/event';\nimport { getEditorInstance } from './editors';\nimport EventManager from './eventManager';\nimport { EditorState } from './editors/_baseEditor';\nimport { getParentWindow } from './helpers/dom/element';\n\nvar EditorManager =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Handsontable} instance\n   * @param {GridSettings} priv\n   * @param {Selection} selection\n   */\n  function EditorManager(instance, priv, selection) {\n    var _this = this;\n\n    _classCallCheck(this, EditorManager);\n\n    /**\n     * Instance of {@link Handsontable}\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.priv = priv;\n    /**\n     * Instance of {@link Selection}\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {*}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {Boolean} revertOriginal\n     */\n\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n\n      if (this.lock) {\n        return;\n      }\n\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n          row = _this$instance$select.row,\n          col = _this$instance$select.col;\n      this.cellProperties = this.instance.getCellMeta(row, col);\n\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n\n      var editorClass = this.instance.getCellEditor(this.cellProperties);\n      var td = this.instance.getCell(row, col, true);\n\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(col);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.runHooks('modifyRow', row), col);\n        this.activeEditor = getEditorInstance(editorClass, this.instance);\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|String} newInitialValue new value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {Boolean} restoreOriginalValue\n     * @param {Boolean} [isCtrlPressed]\n     * @param {Function} [callback]\n     */\n\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      return this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.priv.settings.enterMoves === 'function' ? this.priv.settings.enterMoves(event) : this.priv.settings.enterMoves;\n\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, 1);\n      } else {\n        this.selection.transformStart(0, 1);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1);\n      } else {\n        this.selection.transformStart(0, -1);\n      }\n    }\n    /**\n     * onAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event\n     */\n\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n\n      this.instance.runHooks('beforeKeyDown', event); // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || event.keyCode === 229) {\n        return;\n      }\n\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n\n      this.priv.lastKeyCode = event.keyCode;\n\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isMetaKey(event.keyCode) && !isCtrlMetaKey(event.keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n\n      switch (event.keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            stopPropagation(event);\n          }\n\n          break;\n\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.priv.settings.tabMoves === 'function' ? this.priv.settings.tabMoves(event) : this.priv.settings.tabMoves;\n\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EditorState.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(0, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, 0));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.countRows() - 1, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.countCols() - 1));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          stopPropagation(event);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * onCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} coords\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem\n     */\n\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n\n  return EditorManager;\n}();\n\nvar instances = new WeakMap();\n/**\n * @param {Handsontable} hotInstance\n * @param {GridSettings} hotSettings\n * @param {Selection} selection\n * @param {DataMap} datamap\n */\n\nEditorManager.getInstance = function (hotInstance, hotSettings, selection, datamap) {\n  var editorManager = instances.get(hotInstance);\n\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, hotSettings, selection, datamap);\n    instances.set(hotInstance, editorManager);\n  }\n\n  return editorManager;\n};\n\nexport default EditorManager;"],"mappings":"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"},"metadata":{},"sourceType":"module"}