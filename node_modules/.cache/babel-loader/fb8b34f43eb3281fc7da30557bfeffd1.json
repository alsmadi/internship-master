{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * CellCoords holds cell coordinates (row, column) and few method to validate them and retrieve as an array or an object.\n *\n * @util\n */\nvar CellCoords = /*#__PURE__*/\nfunction () {\n  function CellCoords(row, column) {\n    _classCallCheck(this, CellCoords);\n\n    /**\n     * Row index.\n     *\n     * @type {Number}\n     */\n    this.row = null;\n    /**\n     * Column index.\n     *\n     * @type {Number}\n     */\n\n    this.col = null;\n    if (typeof row !== 'undefined' && typeof column !== 'undefined') {\n      this.row = row;\n      this.col = column;\n    }\n  }\n  /**\n   * Checks if given set of coordinates is valid in context of a given Walkontable instance.\n   *\n   * @param {Walkontable} wot A Walkontable instance.\n   * @returns {Boolean}\n   */\n\n  _createClass(CellCoords, [{\n    key: \"isValid\",\n    value: function isValid(wot) {\n      // is it a valid cell index (0 or higher)\n      if (this.row < 0 || this.col < 0) {\n        return false;\n      } // is selection within total rows and columns\n\n      if (this.row >= wot.getSetting('totalRows') || this.col >= wot.getSetting('totalColumns')) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Checks if this cell coordinates are the same as cell coordinates given as an argument.\n     *\n     * @param {CellCoords} cellCoords Cell coordinates to equal.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(cellCoords) {\n      if (cellCoords === this) {\n        return true;\n      }\n      return this.row === cellCoords.row && this.col === cellCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-east from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isSouthEastOf\",\n    value: function isSouthEastOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isNorthWestOf\",\n    value: function isNorthWestOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-west from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isSouthWestOf\",\n    value: function isSouthWestOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isNorthEastOf\",\n    value: function isNorthEastOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Converts CellCoords to literal object with `row` and `col` properties.\n     *\n     * @return {Object} Returns a literal object with `row` and `col` properties.\n     */\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        row: this.row,\n        col: this.col\n      };\n    }\n  }]);\n  return CellCoords;\n}();\nexport default CellCoords;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","CellCoords","row","column","col","value","isValid","wot","getSetting","isEqual","cellCoords","isSouthEastOf","testedCoords","isNorthWestOf","isSouthWestOf","isNorthEastOf","toObject"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/3rdparty/walkontable/src/cell/coords.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * CellCoords holds cell coordinates (row, column) and few method to validate them and retrieve as an array or an object.\n *\n * @util\n */\nvar CellCoords =\n/*#__PURE__*/\nfunction () {\n  function CellCoords(row, column) {\n    _classCallCheck(this, CellCoords);\n\n    /**\n     * Row index.\n     *\n     * @type {Number}\n     */\n    this.row = null;\n    /**\n     * Column index.\n     *\n     * @type {Number}\n     */\n\n    this.col = null;\n\n    if (typeof row !== 'undefined' && typeof column !== 'undefined') {\n      this.row = row;\n      this.col = column;\n    }\n  }\n  /**\n   * Checks if given set of coordinates is valid in context of a given Walkontable instance.\n   *\n   * @param {Walkontable} wot A Walkontable instance.\n   * @returns {Boolean}\n   */\n\n\n  _createClass(CellCoords, [{\n    key: \"isValid\",\n    value: function isValid(wot) {\n      // is it a valid cell index (0 or higher)\n      if (this.row < 0 || this.col < 0) {\n        return false;\n      } // is selection within total rows and columns\n\n\n      if (this.row >= wot.getSetting('totalRows') || this.col >= wot.getSetting('totalColumns')) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Checks if this cell coordinates are the same as cell coordinates given as an argument.\n     *\n     * @param {CellCoords} cellCoords Cell coordinates to equal.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(cellCoords) {\n      if (cellCoords === this) {\n        return true;\n      }\n\n      return this.row === cellCoords.row && this.col === cellCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-east from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isSouthEastOf\",\n    value: function isSouthEastOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isNorthWestOf\",\n    value: function isNorthWestOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in south-west from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isSouthWestOf\",\n    value: function isSouthWestOf(testedCoords) {\n      return this.row >= testedCoords.row && this.col <= testedCoords.col;\n    }\n    /**\n     * Checks if tested coordinates are positioned in north-east from this cell coordinates.\n     *\n     * @param {Object} testedCoords Cell coordinates to check.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isNorthEastOf\",\n    value: function isNorthEastOf(testedCoords) {\n      return this.row <= testedCoords.row && this.col >= testedCoords.col;\n    }\n    /**\n     * Converts CellCoords to literal object with `row` and `col` properties.\n     *\n     * @return {Object} Returns a literal object with `row` and `col` properties.\n     */\n\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        row: this.row,\n        col: this.col\n      };\n    }\n  }]);\n\n  return CellCoords;\n}();\n\nexport default CellCoords;"],"mappings":"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"},"metadata":{},"sourceType":"module"}