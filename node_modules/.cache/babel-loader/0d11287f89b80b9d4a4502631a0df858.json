{"ast":null,"code":"import { isObject, deepClone } from '../helpers/object';\nimport { extendNotExistingKeys } from './utils';\nimport staticRegister from '../utils/staticRegister';\nimport DEFAULT_DICTIONARY from './languages/en-US';\nvar DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\nvar _staticRegister = staticRegister('languagesDictionaries'),\n  registerGloballyLanguageDictionary = _staticRegister.register,\n  getGlobalLanguageDictionary = _staticRegister.getItem,\n  hasGlobalLanguageDictionary = _staticRegister.hasItem,\n  getGlobalLanguagesDictionaries = _staticRegister.getValues;\n/**\n * Register language dictionary for specific language code.\n *\n * @param {String|Object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {Object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n */\n\nfunction registerLanguage(languageCodeOrDictionary, dictionary) {\n  var languageCode = languageCodeOrDictionary;\n  var dictionaryObject = dictionary; // Dictionary passed as first argument.\n\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject)); // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n\n  return deepClone(dictionaryObject);\n}\n/**\n * Get language dictionary for specific language code.\n *\n * @param {String} languageCode Language code.\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\nfunction getLanguage(languageCode) {\n  if (!hasLanguage(languageCode)) {\n    return null;\n  }\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {Boolean}\n */\n\nfunction hasLanguage(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n/**\n * Get default language dictionary.\n *\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\nfunction getDefaultLanguage() {\n  return DEFAULT_DICTIONARY;\n}\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {String} languageCode Language code.\n * @param {Object} dictionary Dictionary which is extended.\n */\n\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\n\nfunction getLanguages() {\n  return getGlobalLanguagesDictionaries();\n}\nexport { registerLanguage as registerLanguageDictionary, getLanguage as getLanguageDictionary, hasLanguage as hasLanguageDictionary, getDefaultLanguage as getDefaultLanguageDictionary, getLanguages as getLanguagesDictionaries, DEFAULT_LANGUAGE_CODE };\n/**\n * Automatically registers default dictionary.\n */\n\nregisterLanguage(DEFAULT_DICTIONARY);","map":{"version":3,"names":["isObject","deepClone","extendNotExistingKeys","staticRegister","DEFAULT_DICTIONARY","DEFAULT_LANGUAGE_CODE","languageCode","_staticRegister","registerGloballyLanguageDictionary","register","getGlobalLanguageDictionary","getItem","hasGlobalLanguageDictionary","hasItem","getGlobalLanguagesDictionaries","getValues","registerLanguage","languageCodeOrDictionary","dictionary","dictionaryObject","extendLanguageDictionary","getLanguage","hasLanguage","getDefaultLanguage","getLanguages","registerLanguageDictionary","getLanguageDictionary","hasLanguageDictionary","getDefaultLanguageDictionary","getLanguagesDictionaries"],"sources":["C:/Users/mrezy/VSCode/internships-master/node_modules/handsontable/es/i18n/dictionariesManager.js"],"sourcesContent":["import { isObject, deepClone } from '../helpers/object';\nimport { extendNotExistingKeys } from './utils';\nimport staticRegister from '../utils/staticRegister';\nimport DEFAULT_DICTIONARY from './languages/en-US';\nvar DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\n\nvar _staticRegister = staticRegister('languagesDictionaries'),\n    registerGloballyLanguageDictionary = _staticRegister.register,\n    getGlobalLanguageDictionary = _staticRegister.getItem,\n    hasGlobalLanguageDictionary = _staticRegister.hasItem,\n    getGlobalLanguagesDictionaries = _staticRegister.getValues;\n/**\n * Register language dictionary for specific language code.\n *\n * @param {String|Object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {Object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n */\n\n\nfunction registerLanguage(languageCodeOrDictionary, dictionary) {\n  var languageCode = languageCodeOrDictionary;\n  var dictionaryObject = dictionary; // Dictionary passed as first argument.\n\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject)); // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n\n  return deepClone(dictionaryObject);\n}\n/**\n * Get language dictionary for specific language code.\n *\n * @param {String} languageCode Language code.\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nfunction getLanguage(languageCode) {\n  if (!hasLanguage(languageCode)) {\n    return null;\n  }\n\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {Boolean}\n */\n\n\nfunction hasLanguage(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n/**\n * Get default language dictionary.\n *\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nfunction getDefaultLanguage() {\n  return DEFAULT_DICTIONARY;\n}\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {String} languageCode Language code.\n * @param {Object} dictionary Dictionary which is extended.\n */\n\n\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\n\n\nfunction getLanguages() {\n  return getGlobalLanguagesDictionaries();\n}\n\nexport { registerLanguage as registerLanguageDictionary, getLanguage as getLanguageDictionary, hasLanguage as hasLanguageDictionary, getDefaultLanguage as getDefaultLanguageDictionary, getLanguages as getLanguagesDictionaries, DEFAULT_LANGUAGE_CODE };\n/**\n * Automatically registers default dictionary.\n */\n\nregisterLanguage(DEFAULT_DICTIONARY);"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,mBAAmB;AACvD,SAASC,qBAAqB,QAAQ,SAAS;AAC/C,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,kBAAkB,MAAM,mBAAmB;AAClD,IAAIC,qBAAqB,GAAGD,kBAAkB,CAACE,YAAY;AAE3D,IAAIC,eAAe,GAAGJ,cAAc,CAAC,uBAAuB,CAAC;EACzDK,kCAAkC,GAAGD,eAAe,CAACE,QAAQ;EAC7DC,2BAA2B,GAAGH,eAAe,CAACI,OAAO;EACrDC,2BAA2B,GAAGL,eAAe,CAACM,OAAO;EACrDC,8BAA8B,GAAGP,eAAe,CAACQ,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,gBAAgB,CAACC,wBAAwB,EAAEC,UAAU,EAAE;EAC9D,IAAIZ,YAAY,GAAGW,wBAAwB;EAC3C,IAAIE,gBAAgB,GAAGD,UAAU,CAAC,CAAC;;EAEnC,IAAIlB,QAAQ,CAACiB,wBAAwB,CAAC,EAAE;IACtCE,gBAAgB,GAAGF,wBAAwB;IAC3CX,YAAY,GAAGa,gBAAgB,CAACb,YAAY;EAC9C;EAEAc,wBAAwB,CAACd,YAAY,EAAEa,gBAAgB,CAAC;EACxDX,kCAAkC,CAACF,YAAY,EAAEL,SAAS,CAACkB,gBAAgB,CAAC,CAAC,CAAC,CAAC;;EAE/E,OAAOlB,SAAS,CAACkB,gBAAgB,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASE,WAAW,CAACf,YAAY,EAAE;EACjC,IAAI,CAACgB,WAAW,CAAChB,YAAY,CAAC,EAAE;IAC9B,OAAO,IAAI;EACb;EAEA,OAAOL,SAAS,CAACS,2BAA2B,CAACJ,YAAY,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASgB,WAAW,CAAChB,YAAY,EAAE;EACjC,OAAOM,2BAA2B,CAACN,YAAY,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASiB,kBAAkB,GAAG;EAC5B,OAAOnB,kBAAkB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASgB,wBAAwB,CAACd,YAAY,EAAEY,UAAU,EAAE;EAC1D,IAAIZ,YAAY,KAAKD,qBAAqB,EAAE;IAC1CH,qBAAqB,CAACgB,UAAU,EAAER,2BAA2B,CAACL,qBAAqB,CAAC,CAAC;EACvF;AACF;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASmB,YAAY,GAAG;EACtB,OAAOV,8BAA8B,EAAE;AACzC;AAEA,SAASE,gBAAgB,IAAIS,0BAA0B,EAAEJ,WAAW,IAAIK,qBAAqB,EAAEJ,WAAW,IAAIK,qBAAqB,EAAEJ,kBAAkB,IAAIK,4BAA4B,EAAEJ,YAAY,IAAIK,wBAAwB,EAAExB,qBAAqB;AACxP;AACA;AACA;;AAEAW,gBAAgB,CAACZ,kBAAkB,CAAC"},"metadata":{},"sourceType":"module"}